var app=function(){"use strict";function E(){}function T(E){return E()}function e(){return Object.create(null)}function R(E){E.forEach(T)}function A(E){return"function"==typeof E}function S(E,T){return E!=E?T==T:E!==T||E&&"object"==typeof E||"function"==typeof E}function t(E,T){E.appendChild(T)}function I(E,T,e){E.insertBefore(T,e||null)}function O(E){E.parentNode&&E.parentNode.removeChild(E)}function N(E,T){for(let e=0;e<E.length;e+=1)E[e]&&E[e].d(T)}function s(E){return document.createElement(E)}function r(E){return document.createTextNode(E)}function _(){return r(" ")}function n(){return r("")}function L(E,T,e,R){return E.addEventListener(T,e,R),()=>E.removeEventListener(T,e,R)}function C(E,T,e){null==e?E.removeAttribute(T):E.getAttribute(T)!==e&&E.setAttribute(T,e)}function a(E,T){T=""+T,E.data!==T&&(E.data=T)}let i;function o(E){i=E}function P(){if(!i)throw new Error("Function called outside component initialization");return i}function D(E){P().$$.on_mount.push(E)}function M(){const E=P();return(T,e,{cancelable:R=!1}={})=>{const A=E.$$.callbacks[T];if(A){const S=function(E,T,{bubbles:e=!1,cancelable:R=!1}={}){const A=document.createEvent("CustomEvent");return A.initCustomEvent(E,e,R,T),A}(T,e,{cancelable:R});return A.slice().forEach((T=>{T.call(E,S)})),!S.defaultPrevented}return!0}}const U=[],l=[];let c=[];const u=[],d=Promise.resolve();let G=!1;function p(){G||(G=!0,d.then(Y))}function h(){return p(),d}function H(E){c.push(E)}function m(E){u.push(E)}const B=new Set;let f=0;function Y(){if(0!==f)return;const E=i;do{try{for(;f<U.length;){const E=U[f];f++,o(E),F(E.$$)}}catch(E){throw U.length=0,f=0,E}for(o(null),U.length=0,f=0;l.length;)l.pop()();for(let E=0;E<c.length;E+=1){const T=c[E];B.has(T)||(B.add(T),T())}c.length=0}while(U.length);for(;u.length;)u.pop()();G=!1,B.clear(),o(E)}function F(E){if(null!==E.fragment){E.update(),R(E.before_update);const T=E.dirty;E.dirty=[-1],E.fragment&&E.fragment.p(E.ctx,T),E.after_update.forEach(H)}}const y=new Set;let V;function W(){V={r:0,c:[],p:V}}function g(){V.r||R(V.c),V=V.p}function X(E,T){E&&E.i&&(y.delete(E),E.i(T))}function v(E,T,e,R){if(E&&E.o){if(y.has(E))return;y.add(E),V.c.push((()=>{y.delete(E),R&&(e&&E.d(1),R())})),E.o(T)}else R&&R()}function b(E,T){v(E,1,1,(()=>{T.delete(E.key)}))}function K(E,T,e){const R=E.$$.props[T];void 0!==R&&(E.$$.bound[R]=e,e(E.$$.ctx[R]))}function x(E){E&&E.c()}function $(E,e,S,t){const{fragment:I,after_update:O}=E.$$;I&&I.m(e,S),t||H((()=>{const e=E.$$.on_mount.map(T).filter(A);E.$$.on_destroy?E.$$.on_destroy.push(...e):R(e),E.$$.on_mount=[]})),O.forEach(H)}function w(E,T){const e=E.$$;null!==e.fragment&&(!function(E){const T=[],e=[];c.forEach((R=>-1===E.indexOf(R)?T.push(R):e.push(R))),e.forEach((E=>E())),c=T}(e.after_update),R(e.on_destroy),e.fragment&&e.fragment.d(T),e.on_destroy=e.fragment=null,e.ctx=[])}function k(T,A,S,t,I,N,s,r=[-1]){const _=i;o(T);const n=T.$$={fragment:null,ctx:[],props:N,update:E,not_equal:I,bound:e(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(A.context||(_?_.$$.context:[])),callbacks:e(),dirty:r,skip_bound:!1,root:A.target||_.$$.root};s&&s(n.root);let L=!1;if(n.ctx=S?S(T,A.props||{},((E,e,...R)=>{const A=R.length?R[0]:e;return n.ctx&&I(n.ctx[E],n.ctx[E]=A)&&(!n.skip_bound&&n.bound[E]&&n.bound[E](A),L&&function(E,T){-1===E.$$.dirty[0]&&(U.push(E),p(),E.$$.dirty.fill(0)),E.$$.dirty[T/31|0]|=1<<T%31}(T,E)),e})):[],n.update(),L=!0,R(n.before_update),n.fragment=!!t&&t(n.ctx),A.target){if(A.hydrate){const E=function(E){return Array.from(E.childNodes)}(A.target);n.fragment&&n.fragment.l(E),E.forEach(O)}else n.fragment&&n.fragment.c();A.intro&&X(T.$$.fragment),$(T,A.target,A.anchor,A.customElement),Y()}o(_)}class J{$destroy(){w(this,1),this.$destroy=E}$on(T,e){if(!A(e))return E;const R=this.$$.callbacks[T]||(this.$$.callbacks[T]=[]);return R.push(e),()=>{const E=R.indexOf(e);-1!==E&&R.splice(E,1)}}$set(E){var T;this.$$set&&(T=E,0!==Object.keys(T).length)&&(this.$$.skip_bound=!0,this.$$set(E),this.$$.skip_bound=!1)}}function Z(E){return"tabularLeft"===E.indentStyle||"tabularRight"===E.indentStyle?" ".repeat(10):E.useTabs?"\t":" ".repeat(E.tabWidth)}function Q(E){return"tabularLeft"===E.indentStyle||"tabularRight"===E.indentStyle}class q{constructor(E){this.params=E,this.index=0}get({key:E,text:T}){return this.params?E?this.params[E]:this.params[this.index++]:T}getPositionalParameterIndex(){return this.index}setPositionalParameterIndex(E){this.index=E}}var j="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};var z,EE,TE=(z=function(E){var T,e;T=j,e=function(){function E(T,e,R){return this.id=++E.highestId,this.name=T,this.symbols=e,this.postprocess=R,this}function T(E,T,e,R){this.rule=E,this.dot=T,this.reference=e,this.data=[],this.wantedBy=R,this.isComplete=this.dot===E.symbols.length}function e(E,T){this.grammar=E,this.index=T,this.states=[],this.wants={},this.scannable=[],this.completed={}}function R(E,T){this.rules=E,this.start=T||this.rules[0].name;var e=this.byName={};this.rules.forEach((function(E){e.hasOwnProperty(E.name)||(e[E.name]=[]),e[E.name].push(E)}))}function A(){this.reset("")}function S(E,T,S){if(E instanceof R){var t=E;S=T}else t=R.fromCompiled(E,T);for(var I in this.grammar=t,this.options={keepHistory:!1,lexer:t.lexer||new A},S||{})this.options[I]=S[I];this.lexer=this.options.lexer,this.lexerState=void 0;var O=new e(t,0);this.table=[O],O.wants[t.start]=[],O.predict(t.start),O.process(),this.current=0}function t(E){var T=typeof E;if("string"===T)return E;if("object"===T){if(E.literal)return JSON.stringify(E.literal);if(E instanceof RegExp)return E.toString();if(E.type)return"%"+E.type;if(E.test)return"<"+String(E.test)+">";throw new Error("Unknown symbol type: "+E)}}return E.highestId=0,E.prototype.toString=function(E){var T=void 0===E?this.symbols.map(t).join(" "):this.symbols.slice(0,E).map(t).join(" ")+" ● "+this.symbols.slice(E).map(t).join(" ");return this.name+" → "+T},T.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},T.prototype.nextState=function(E){var e=new T(this.rule,this.dot+1,this.reference,this.wantedBy);return e.left=this,e.right=E,e.isComplete&&(e.data=e.build(),e.right=void 0),e},T.prototype.build=function(){var E=[],T=this;do{E.push(T.right.data),T=T.left}while(T.left);return E.reverse(),E},T.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,S.fail))},e.prototype.process=function(E){for(var T=this.states,e=this.wants,R=this.completed,A=0;A<T.length;A++){var t=T[A];if(t.isComplete){if(t.finish(),t.data!==S.fail){for(var I=t.wantedBy,O=I.length;O--;){var N=I[O];this.complete(N,t)}if(t.reference===this.index){var s=t.rule.name;(this.completed[s]=this.completed[s]||[]).push(t)}}}else{if("string"!=typeof(s=t.rule.symbols[t.dot])){this.scannable.push(t);continue}if(e[s]){if(e[s].push(t),R.hasOwnProperty(s)){var r=R[s];for(O=0;O<r.length;O++){var _=r[O];this.complete(t,_)}}}else e[s]=[t],this.predict(s)}}},e.prototype.predict=function(E){for(var e=this.grammar.byName[E]||[],R=0;R<e.length;R++){var A=e[R],S=this.wants[E],t=new T(A,0,this.index,S);this.states.push(t)}},e.prototype.complete=function(E,T){var e=E.nextState(T);this.states.push(e)},R.fromCompiled=function(T,e){var A=T.Lexer;T.ParserStart&&(e=T.ParserStart,T=T.ParserRules);var S=new R(T=T.map((function(T){return new E(T.name,T.symbols,T.postprocess)})),e);return S.lexer=A,S},A.prototype.reset=function(E,T){this.buffer=E,this.index=0,this.line=T?T.line:1,this.lastLineBreak=T?-T.col:0},A.prototype.next=function(){if(this.index<this.buffer.length){var E=this.buffer[this.index++];return"\n"===E&&(this.line+=1,this.lastLineBreak=this.index),{value:E}}},A.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},A.prototype.formatError=function(E,T){var e=this.buffer;if("string"==typeof e){var R=e.split("\n").slice(Math.max(0,this.line-5),this.line),A=e.indexOf("\n",this.index);-1===A&&(A=e.length);var S=this.index-this.lastLineBreak,t=String(this.line).length;return T+=" at line "+this.line+" col "+S+":\n\n",T+=R.map((function(E,T){return I(this.line-R.length+T+1,t)+" "+E}),this).join("\n"),T+="\n"+I("",t+S)+"^\n"}return T+" at index "+(this.index-1);function I(E,T){var e=String(E);return Array(T-e.length+1).join(" ")+e}},S.fail={},S.prototype.feed=function(E){var T,R=this.lexer;for(R.reset(E,this.lexerState);;){try{if(!(T=R.next()))break}catch(E){var S=new e(this.grammar,this.current+1);throw this.table.push(S),(O=new Error(this.reportLexerError(E))).offset=this.current,O.token=E.token,O}var t=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var I=this.current+1;S=new e(this.grammar,I),this.table.push(S);for(var O,N=void 0!==T.text?T.text:T.value,s=R.constructor===A?T.value:T,r=t.scannable,_=r.length;_--;){var n=r[_],L=n.rule.symbols[n.dot];if(L.test?L.test(s):L.type?L.type===T.type:L.literal===N){var C=n.nextState({data:s,token:T,isToken:!0,reference:I-1});S.states.push(C)}}if(S.process(),0===S.states.length)throw(O=new Error(this.reportError(T))).offset=this.current,O.token=T,O;this.options.keepHistory&&(t.lexerState=R.save()),this.current++}return t&&(this.lexerState=R.save()),this.results=this.finish(),this},S.prototype.reportLexerError=function(E){var T,e,R=E.token;return R?(T="input "+JSON.stringify(R.text[0])+" (lexer error)",e=this.lexer.formatError(R,"Syntax error")):(T="input (lexer error)",e=E.message),this.reportErrorCommon(e,T)},S.prototype.reportError=function(E){var T=(E.type?E.type+" token: ":"")+JSON.stringify(void 0!==E.value?E.value:E),e=this.lexer.formatError(E,"Syntax error");return this.reportErrorCommon(e,T)},S.prototype.reportErrorCommon=function(E,T){var e=[];e.push(E);var R=this.table.length-2,A=this.table[R],S=A.states.filter((function(E){var T=E.rule.symbols[E.dot];return T&&"string"!=typeof T}));return 0===S.length?(e.push("Unexpected "+T+". I did not expect any more input. Here is the state of my parse table:\n"),this.displayStateStack(A.states,e)):(e.push("Unexpected "+T+". Instead, I was expecting to see one of the following:\n"),S.map((function(E){return this.buildFirstStateStack(E,[])||[E]}),this).forEach((function(E){var T=E[0],R=T.rule.symbols[T.dot],A=this.getSymbolDisplay(R);e.push("A "+A+" based on:"),this.displayStateStack(E,e)}),this)),e.push(""),e.join("\n")},S.prototype.displayStateStack=function(E,T){for(var e,R=0,A=0;A<E.length;A++){var S=E[A],t=S.rule.toString(S.dot);t===e?R++:(R>0&&T.push("    ^ "+R+" more lines identical to this"),R=0,T.push("    "+t)),e=t}},S.prototype.getSymbolDisplay=function(E){return function(E){var T=typeof E;if("string"===T)return E;if("object"===T){if(E.literal)return JSON.stringify(E.literal);if(E instanceof RegExp)return"character matching "+E;if(E.type)return E.type+" token";if(E.test)return"token matching "+String(E.test);throw new Error("Unknown symbol type: "+E)}}(E)},S.prototype.buildFirstStateStack=function(E,T){if(-1!==T.indexOf(E))return null;if(0===E.wantedBy.length)return[E];var e=E.wantedBy[0],R=[E].concat(T),A=this.buildFirstStateStack(e,R);return null===A?null:[E].concat(A)},S.prototype.save=function(){var E=this.table[this.current];return E.lexerState=this.lexerState,E},S.prototype.restore=function(E){var T=E.index;this.current=T,this.table[T]=E,this.table.splice(T+1),this.lexerState=E.lexerState,this.results=this.finish()},S.prototype.rewind=function(E){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[E])},S.prototype.finish=function(){var E=[],T=this.grammar.start;return this.table[this.table.length-1].states.forEach((function(e){e.rule.name===T&&e.dot===e.rule.symbols.length&&0===e.reference&&e.data!==S.fail&&E.push(e)})),E.map((function(E){return E.data}))},{Parser:S,Grammar:R,Rule:E}},E.exports?E.exports=e():T.nearley=e()},z(EE={exports:{}},EE.exports),EE.exports);let eE;!function(E){E.QUOTED_IDENTIFIER="QUOTED_IDENTIFIER",E.IDENTIFIER="IDENTIFIER",E.STRING="STRING",E.VARIABLE="VARIABLE",E.RESERVED_KEYWORD="RESERVED_KEYWORD",E.RESERVED_FUNCTION_NAME="RESERVED_FUNCTION_NAME",E.RESERVED_PHRASE="RESERVED_PHRASE",E.RESERVED_SET_OPERATION="RESERVED_SET_OPERATION",E.RESERVED_CLAUSE="RESERVED_CLAUSE",E.RESERVED_SELECT="RESERVED_SELECT",E.RESERVED_JOIN="RESERVED_JOIN",E.ARRAY_IDENTIFIER="ARRAY_IDENTIFIER",E.ARRAY_KEYWORD="ARRAY_KEYWORD",E.CASE="CASE",E.END="END",E.WHEN="WHEN",E.ELSE="ELSE",E.THEN="THEN",E.LIMIT="LIMIT",E.BETWEEN="BETWEEN",E.AND="AND",E.OR="OR",E.XOR="XOR",E.OPERATOR="OPERATOR",E.COMMA="COMMA",E.ASTERISK="ASTERISK",E.DOT="DOT",E.OPEN_PAREN="OPEN_PAREN",E.CLOSE_PAREN="CLOSE_PAREN",E.LINE_COMMENT="LINE_COMMENT",E.BLOCK_COMMENT="BLOCK_COMMENT",E.NUMBER="NUMBER",E.NAMED_PARAMETER="NAMED_PARAMETER",E.QUOTED_PARAMETER="QUOTED_PARAMETER",E.NUMBERED_PARAMETER="NUMBERED_PARAMETER",E.POSITIONAL_PARAMETER="POSITIONAL_PARAMETER",E.DELIMITER="DELIMITER",E.EOF="EOF"}(eE||(eE={}));const RE=E=>({type:eE.EOF,raw:"«EOF»",text:"«EOF»",start:E}),AE=RE(1/0),SE=E=>T=>T.type===E.type&&T.text===E.text,tE={ARRAY:SE({text:"ARRAY",type:eE.RESERVED_KEYWORD}),BY:SE({text:"BY",type:eE.RESERVED_KEYWORD}),SET:SE({text:"SET",type:eE.RESERVED_CLAUSE}),STRUCT:SE({text:"STRUCT",type:eE.RESERVED_KEYWORD}),WINDOW:SE({text:"WINDOW",type:eE.RESERVED_CLAUSE})},IE=E=>E===eE.RESERVED_KEYWORD||E===eE.RESERVED_FUNCTION_NAME||E===eE.RESERVED_PHRASE||E===eE.RESERVED_CLAUSE||E===eE.RESERVED_SELECT||E===eE.RESERVED_SET_OPERATION||E===eE.RESERVED_JOIN||E===eE.ARRAY_KEYWORD||E===eE.CASE||E===eE.END||E===eE.WHEN||E===eE.ELSE||E===eE.THEN||E===eE.LIMIT||E===eE.BETWEEN||E===eE.AND||E===eE.OR||E===eE.XOR;const OE=(E,T,e)=>{if(IE(E.type)){const R=_E(e,T);if(R&&"."===R.text)return{...E,type:eE.IDENTIFIER,text:E.raw}}return E},NE=(E,T,e)=>{if(E.type===eE.RESERVED_FUNCTION_NAME){const R=nE(e,T);if(!R||!LE(R))return{...E,type:eE.RESERVED_KEYWORD}}return E},sE=(E,T,e)=>{if(E.type===eE.IDENTIFIER){const R=nE(e,T);if(R&&CE(R))return{...E,type:eE.ARRAY_IDENTIFIER}}return E},rE=(E,T,e)=>{if(E.type===eE.RESERVED_KEYWORD){const R=nE(e,T);if(R&&CE(R))return{...E,type:eE.ARRAY_KEYWORD}}return E},_E=(E,T)=>nE(E,T,-1),nE=(E,T,e=1)=>{let R=1;for(;E[T+R*e]&&aE(E[T+R*e]);)R++;return E[T+R*e]},LE=E=>E.type===eE.OPEN_PAREN&&"("===E.text,CE=E=>E.type===eE.OPEN_PAREN&&"["===E.text,aE=E=>E.type===eE.BLOCK_COMMENT||E.type===eE.LINE_COMMENT;function iE(E,T){const e=E.slice(0,T).split(/\n/);return{line:e.length,col:e[e.length-1].length+1}}class oE{index=0;tokens=[];input="";constructor(E){this.tokenize=E}reset(E,T){this.input=E,this.index=0,this.tokens=this.tokenize(E)}next(){return this.tokens[this.index++]}save(){}formatError(E){const{line:T,col:e}=iE(this.input,E.start);return`Parse error at token: ${E.text} at line ${T} column ${e}`}has(E){return E in eE}}let PE;function DE(E){return E[0]}!function(E){E.statement="statement",E.clause="clause",E.set_operation="set_operation",E.function_call="function_call",E.array_subscript="array_subscript",E.property_access="property_access",E.parenthesis="parenthesis",E.between_predicate="between_predicate",E.case_expression="case_expression",E.case_when="case_when",E.case_else="case_else",E.limit_clause="limit_clause",E.all_columns_asterisk="all_columns_asterisk",E.literal="literal",E.identifier="identifier",E.keyword="keyword",E.parameter="parameter",E.operator="operator",E.comma="comma",E.line_comment="line_comment",E.block_comment="block_comment"}(PE||(PE={}));const ME=new oE((E=>[])),UE=([[E]])=>E,lE=E=>({type:PE.keyword,tokenType:E.type,text:E.text,raw:E.raw}),cE=(E,{leading:T,trailing:e})=>(null!=T&&T.length&&(E={...E,leadingComments:T}),null!=e&&e.length&&(E={...E,trailingComments:e}),E),uE={Lexer:ME,ParserRules:[{name:"main$ebnf$1",symbols:[]},{name:"main$ebnf$1",symbols:["main$ebnf$1","statement"],postprocess:E=>E[0].concat([E[1]])},{name:"main",symbols:["main$ebnf$1"],postprocess:([E])=>{const T=E[E.length-1];return T&&!T.hasSemicolon?T.children.length>0?E:E.slice(0,-1):E}},{name:"statement$subexpression$1",symbols:[ME.has("DELIMITER")?{type:"DELIMITER"}:DELIMITER]},{name:"statement$subexpression$1",symbols:[ME.has("EOF")?{type:"EOF"}:EOF]},{name:"statement",symbols:["expressions_or_clauses","statement$subexpression$1"],postprocess:([E,[T]])=>({type:PE.statement,children:E,hasSemicolon:T.type===eE.DELIMITER})},{name:"expressions_or_clauses$ebnf$1",symbols:[]},{name:"expressions_or_clauses$ebnf$1",symbols:["expressions_or_clauses$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"expressions_or_clauses$ebnf$2",symbols:[]},{name:"expressions_or_clauses$ebnf$2",symbols:["expressions_or_clauses$ebnf$2","clause"],postprocess:E=>E[0].concat([E[1]])},{name:"expressions_or_clauses",symbols:["expressions_or_clauses$ebnf$1","expressions_or_clauses$ebnf$2"],postprocess:([E,T])=>[...E,...T]},{name:"clause$subexpression$1",symbols:["limit_clause"]},{name:"clause$subexpression$1",symbols:["select_clause"]},{name:"clause$subexpression$1",symbols:["other_clause"]},{name:"clause$subexpression$1",symbols:["set_operation"]},{name:"clause",symbols:["clause$subexpression$1"],postprocess:UE},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["free_form_sql"]},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"limit_clause$ebnf$1$subexpression$1",symbols:[ME.has("COMMA")?{type:"COMMA"}:COMMA,"limit_clause$ebnf$1$subexpression$1$ebnf$1"]},{name:"limit_clause$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1"],postprocess:DE},{name:"limit_clause$ebnf$1",symbols:[],postprocess:()=>null},{name:"limit_clause",symbols:[ME.has("LIMIT")?{type:"LIMIT"}:LIMIT,"_","expression_chain_","limit_clause$ebnf$1"],postprocess:([E,T,e,R])=>{if(R){const[A,S]=R;return{type:PE.limit_clause,limitKw:cE(lE(E),{trailing:T}),offset:e,count:S}}return{type:PE.limit_clause,limitKw:cE(lE(E),{trailing:T}),count:e}}},{name:"select_clause$subexpression$1$ebnf$1",symbols:[]},{name:"select_clause$subexpression$1$ebnf$1",symbols:["select_clause$subexpression$1$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"select_clause$subexpression$1",symbols:["all_columns_asterisk","select_clause$subexpression$1$ebnf$1"]},{name:"select_clause$subexpression$1$ebnf$2",symbols:[]},{name:"select_clause$subexpression$1$ebnf$2",symbols:["select_clause$subexpression$1$ebnf$2","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"select_clause$subexpression$1",symbols:["asteriskless_free_form_sql","select_clause$subexpression$1$ebnf$2"]},{name:"select_clause",symbols:[ME.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT,"select_clause$subexpression$1"],postprocess:([E,[T,e]])=>({type:PE.clause,nameKw:lE(E),children:[T,...e]})},{name:"select_clause",symbols:[ME.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT],postprocess:([E])=>({type:PE.clause,nameKw:lE(E),children:[]})},{name:"all_columns_asterisk",symbols:[ME.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK],postprocess:()=>({type:PE.all_columns_asterisk})},{name:"other_clause$ebnf$1",symbols:[]},{name:"other_clause$ebnf$1",symbols:["other_clause$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"other_clause",symbols:[ME.has("RESERVED_CLAUSE")?{type:"RESERVED_CLAUSE"}:RESERVED_CLAUSE,"other_clause$ebnf$1"],postprocess:([E,T])=>({type:PE.clause,nameKw:lE(E),children:T})},{name:"set_operation$ebnf$1",symbols:[]},{name:"set_operation$ebnf$1",symbols:["set_operation$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"set_operation",symbols:[ME.has("RESERVED_SET_OPERATION")?{type:"RESERVED_SET_OPERATION"}:RESERVED_SET_OPERATION,"set_operation$ebnf$1"],postprocess:([E,T])=>({type:PE.set_operation,nameKw:lE(E),children:T})},{name:"expression_chain_$ebnf$1",symbols:["expression_with_comments_"]},{name:"expression_chain_$ebnf$1",symbols:["expression_chain_$ebnf$1","expression_with_comments_"],postprocess:E=>E[0].concat([E[1]])},{name:"expression_chain_",symbols:["expression_chain_$ebnf$1"],postprocess:DE},{name:"expression_with_comments_",symbols:["expression","_"],postprocess:([E,T])=>cE(E,{trailing:T})},{name:"free_form_sql$subexpression$1",symbols:["asteriskless_free_form_sql"]},{name:"free_form_sql$subexpression$1",symbols:["asterisk"]},{name:"free_form_sql",symbols:["free_form_sql$subexpression$1"],postprocess:UE},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["asteriskless_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["between_predicate"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["case_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comma"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comment"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["other_keyword"]},{name:"asteriskless_free_form_sql",symbols:["asteriskless_free_form_sql$subexpression$1"],postprocess:UE},{name:"expression$subexpression$1",symbols:["asteriskless_expression"]},{name:"expression$subexpression$1",symbols:["asterisk"]},{name:"expression",symbols:["expression$subexpression$1"],postprocess:UE},{name:"asteriskless_expression$subexpression$1",symbols:["array_subscript"]},{name:"asteriskless_expression$subexpression$1",symbols:["function_call"]},{name:"asteriskless_expression$subexpression$1",symbols:["property_access"]},{name:"asteriskless_expression$subexpression$1",symbols:["parenthesis"]},{name:"asteriskless_expression$subexpression$1",symbols:["curly_braces"]},{name:"asteriskless_expression$subexpression$1",symbols:["square_brackets"]},{name:"asteriskless_expression$subexpression$1",symbols:["operator"]},{name:"asteriskless_expression$subexpression$1",symbols:["identifier"]},{name:"asteriskless_expression$subexpression$1",symbols:["parameter"]},{name:"asteriskless_expression$subexpression$1",symbols:["literal"]},{name:"asteriskless_expression$subexpression$1",symbols:["keyword"]},{name:"asteriskless_expression",symbols:["asteriskless_expression$subexpression$1"],postprocess:UE},{name:"array_subscript",symbols:[ME.has("ARRAY_IDENTIFIER")?{type:"ARRAY_IDENTIFIER"}:ARRAY_IDENTIFIER,"_","square_brackets"],postprocess:([E,T,e])=>({type:PE.array_subscript,array:cE({type:PE.identifier,text:E.text},{trailing:T}),parenthesis:e})},{name:"array_subscript",symbols:[ME.has("ARRAY_KEYWORD")?{type:"ARRAY_KEYWORD"}:ARRAY_KEYWORD,"_","square_brackets"],postprocess:([E,T,e])=>({type:PE.array_subscript,array:cE(lE(E),{trailing:T}),parenthesis:e})},{name:"function_call",symbols:[ME.has("RESERVED_FUNCTION_NAME")?{type:"RESERVED_FUNCTION_NAME"}:RESERVED_FUNCTION_NAME,"_","parenthesis"],postprocess:([E,T,e])=>({type:PE.function_call,nameKw:cE(lE(E),{trailing:T}),parenthesis:e})},{name:"parenthesis",symbols:[{literal:"("},"expressions_or_clauses",{literal:")"}],postprocess:([E,T,e])=>({type:PE.parenthesis,children:T,openParen:"(",closeParen:")"})},{name:"curly_braces$ebnf$1",symbols:[]},{name:"curly_braces$ebnf$1",symbols:["curly_braces$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"curly_braces",symbols:[{literal:"{"},"curly_braces$ebnf$1",{literal:"}"}],postprocess:([E,T,e])=>({type:PE.parenthesis,children:T,openParen:"{",closeParen:"}"})},{name:"square_brackets$ebnf$1",symbols:[]},{name:"square_brackets$ebnf$1",symbols:["square_brackets$ebnf$1","free_form_sql"],postprocess:E=>E[0].concat([E[1]])},{name:"square_brackets",symbols:[{literal:"["},"square_brackets$ebnf$1",{literal:"]"}],postprocess:([E,T,e])=>({type:PE.parenthesis,children:T,openParen:"[",closeParen:"]"})},{name:"property_access$subexpression$1",symbols:["identifier"]},{name:"property_access$subexpression$1",symbols:["array_subscript"]},{name:"property_access$subexpression$1",symbols:["all_columns_asterisk"]},{name:"property_access",symbols:["expression","_",ME.has("DOT")?{type:"DOT"}:DOT,"_","property_access$subexpression$1"],postprocess:([E,T,e,R,[A]])=>({type:PE.property_access,object:cE(E,{trailing:T}),property:cE(A,{leading:R})})},{name:"between_predicate",symbols:[ME.has("BETWEEN")?{type:"BETWEEN"}:BETWEEN,"_","expression","_",ME.has("AND")?{type:"AND"}:AND,"_","expression"],postprocess:([E,T,e,R,A,S,t])=>({type:PE.between_predicate,betweenKw:lE(E),expr1:[cE(e,{leading:T,trailing:R})],andKw:lE(A),expr2:[cE(t,{leading:S})]})},{name:"case_expression$ebnf$1",symbols:["expression_chain_"],postprocess:DE},{name:"case_expression$ebnf$1",symbols:[],postprocess:()=>null},{name:"case_expression$ebnf$2",symbols:[]},{name:"case_expression$ebnf$2",symbols:["case_expression$ebnf$2","case_clause"],postprocess:E=>E[0].concat([E[1]])},{name:"case_expression",symbols:[ME.has("CASE")?{type:"CASE"}:CASE,"_","case_expression$ebnf$1","case_expression$ebnf$2",ME.has("END")?{type:"END"}:END],postprocess:([E,T,e,R,A])=>({type:PE.case_expression,caseKw:cE(lE(E),{trailing:T}),endKw:lE(A),expr:e||[],clauses:R})},{name:"case_clause",symbols:[ME.has("WHEN")?{type:"WHEN"}:WHEN,"_","expression_chain_",ME.has("THEN")?{type:"THEN"}:THEN,"_","expression_chain_"],postprocess:([E,T,e,R,A,S])=>({type:PE.case_when,whenKw:cE(lE(E),{trailing:T}),thenKw:cE(lE(R),{trailing:A}),condition:e,result:S})},{name:"case_clause",symbols:[ME.has("ELSE")?{type:"ELSE"}:ELSE,"_","expression_chain_"],postprocess:([E,T,e])=>({type:PE.case_else,elseKw:cE(lE(E),{trailing:T}),result:e})},{name:"comma$subexpression$1",symbols:[ME.has("COMMA")?{type:"COMMA"}:COMMA]},{name:"comma",symbols:["comma$subexpression$1"],postprocess:([[E]])=>({type:PE.comma})},{name:"asterisk$subexpression$1",symbols:[ME.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK]},{name:"asterisk",symbols:["asterisk$subexpression$1"],postprocess:([[E]])=>({type:PE.operator,text:E.text})},{name:"operator$subexpression$1",symbols:[ME.has("OPERATOR")?{type:"OPERATOR"}:OPERATOR]},{name:"operator",symbols:["operator$subexpression$1"],postprocess:([[E]])=>({type:PE.operator,text:E.text})},{name:"identifier$subexpression$1",symbols:[ME.has("IDENTIFIER")?{type:"IDENTIFIER"}:IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[ME.has("QUOTED_IDENTIFIER")?{type:"QUOTED_IDENTIFIER"}:QUOTED_IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[ME.has("VARIABLE")?{type:"VARIABLE"}:VARIABLE]},{name:"identifier",symbols:["identifier$subexpression$1"],postprocess:([[E]])=>({type:PE.identifier,text:E.text})},{name:"parameter$subexpression$1",symbols:[ME.has("NAMED_PARAMETER")?{type:"NAMED_PARAMETER"}:NAMED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[ME.has("QUOTED_PARAMETER")?{type:"QUOTED_PARAMETER"}:QUOTED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[ME.has("NUMBERED_PARAMETER")?{type:"NUMBERED_PARAMETER"}:NUMBERED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[ME.has("POSITIONAL_PARAMETER")?{type:"POSITIONAL_PARAMETER"}:POSITIONAL_PARAMETER]},{name:"parameter",symbols:["parameter$subexpression$1"],postprocess:([[E]])=>({type:PE.parameter,key:E.key,text:E.text})},{name:"literal$subexpression$1",symbols:[ME.has("NUMBER")?{type:"NUMBER"}:NUMBER]},{name:"literal$subexpression$1",symbols:[ME.has("STRING")?{type:"STRING"}:STRING]},{name:"literal",symbols:["literal$subexpression$1"],postprocess:([[E]])=>({type:PE.literal,text:E.text})},{name:"keyword$subexpression$1",symbols:[ME.has("RESERVED_KEYWORD")?{type:"RESERVED_KEYWORD"}:RESERVED_KEYWORD]},{name:"keyword$subexpression$1",symbols:[ME.has("RESERVED_PHRASE")?{type:"RESERVED_PHRASE"}:RESERVED_PHRASE]},{name:"keyword$subexpression$1",symbols:[ME.has("RESERVED_JOIN")?{type:"RESERVED_JOIN"}:RESERVED_JOIN]},{name:"keyword$subexpression$1",symbols:[ME.has("AND")?{type:"AND"}:AND]},{name:"keyword$subexpression$1",symbols:[ME.has("OR")?{type:"OR"}:OR]},{name:"keyword$subexpression$1",symbols:[ME.has("XOR")?{type:"XOR"}:XOR]},{name:"keyword",symbols:["keyword$subexpression$1"],postprocess:([[E]])=>lE(E)},{name:"other_keyword$subexpression$1",symbols:[ME.has("WHEN")?{type:"WHEN"}:WHEN]},{name:"other_keyword$subexpression$1",symbols:[ME.has("THEN")?{type:"THEN"}:THEN]},{name:"other_keyword$subexpression$1",symbols:[ME.has("ELSE")?{type:"ELSE"}:ELSE]},{name:"other_keyword$subexpression$1",symbols:[ME.has("END")?{type:"END"}:END]},{name:"other_keyword",symbols:["other_keyword$subexpression$1"],postprocess:([[E]])=>lE(E)},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1","comment"],postprocess:E=>E[0].concat([E[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:([E])=>E},{name:"comment",symbols:[ME.has("LINE_COMMENT")?{type:"LINE_COMMENT"}:LINE_COMMENT],postprocess:([E])=>({type:PE.line_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})},{name:"comment",symbols:[ME.has("BLOCK_COMMENT")?{type:"BLOCK_COMMENT"}:BLOCK_COMMENT],postprocess:([E])=>({type:PE.block_comment,text:E.text,precedingWhitespace:E.precedingWhitespace})}],ParserStart:"main"};var dE=uE;const{Parser:GE,Grammar:pE}=TE;const hE=E=>E[E.length-1],HE=E=>E.sort(((E,T)=>T.length-E.length||E.localeCompare(T))),mE=E=>E.reduce(((E,T)=>Math.max(E,T.length)),0),BE=E=>E.replace(/\s+/gu," "),fE=E=>{return T=Object.values(E).flat(),[...new Set(T)];var T},YE=E=>/\n/.test(E),FE=/^\s+/u;function yE(E,T,e){return function(E){const T=[];for(let e=0;e<E.length;e++){const R=[E[e]];for(;E[e].match(/.*,$/);)e++,R.push(E[e]);T.push(R)}return T}(E.split("\n")).flatMap((E=>{if(1===E.length)return E;if("tabular"===T)return function(E){const T=mE(E);return VE(E).map(((e,R)=>R===E.length-1?e:e+" ".repeat(T-e.length-1)+","))}(E);if("before"===T)return function(E,T){return VE(E).map(((E,e)=>{if(0===e)return E;const[R]=E.match(FE)||[""];return function(E,T){return E.replace(new RegExp(T+"$"),"")}(R,T)+T.replace(/ {2}$/,", ")+E.trimStart()}))}(E,e);throw new Error(`Unexpected commaPosition: ${T}`)})).join("\n")}function VE(E){return E.map((E=>E.replace(/,$/,"")))}let WE;!function(E){E[E.SPACE=0]="SPACE",E[E.NO_SPACE=1]="NO_SPACE",E[E.NO_NEWLINE=2]="NO_NEWLINE",E[E.NEWLINE=3]="NEWLINE",E[E.MANDATORY_NEWLINE=4]="MANDATORY_NEWLINE",E[E.INDENT=5]="INDENT",E[E.SINGLE_INDENT=6]="SINGLE_INDENT"}(WE||(WE={}));class gE{items=[];constructor(E){this.indentation=E}add(...E){for(const T of E)switch(T){case WE.SPACE:this.items.push(WE.SPACE);break;case WE.NO_SPACE:this.trimHorizontalWhitespace();break;case WE.NO_NEWLINE:this.trimWhitespace();break;case WE.NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(WE.NEWLINE);break;case WE.MANDATORY_NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(WE.MANDATORY_NEWLINE);break;case WE.INDENT:this.addIndentation();break;case WE.SINGLE_INDENT:this.items.push(WE.SINGLE_INDENT);break;default:this.items.push(T)}}trimHorizontalWhitespace(){for(;XE(hE(this.items));)this.items.pop()}trimWhitespace(){for(;vE(hE(this.items));)this.items.pop()}addNewline(E){if(this.items.length>0)switch(hE(this.items)){case WE.NEWLINE:this.items.pop(),this.items.push(E);break;case WE.MANDATORY_NEWLINE:break;default:this.items.push(E)}}addIndentation(){for(let E=0;E<this.indentation.getLevel();E++)this.items.push(WE.SINGLE_INDENT)}toString(){return this.items.map((E=>this.itemToString(E))).join("")}getLayoutItems(){return this.items}itemToString(E){switch(E){case WE.SPACE:return" ";case WE.NEWLINE:case WE.MANDATORY_NEWLINE:return"\n";case WE.SINGLE_INDENT:return this.indentation.getSingleIndent();default:return E}}}const XE=E=>E===WE.SPACE||E===WE.SINGLE_INDENT,vE=E=>E===WE.SPACE||E===WE.SINGLE_INDENT||E===WE.NEWLINE;function bE(E){return(E=>E===eE.AND||E===eE.OR||E===eE.XOR)(E)||E===eE.RESERVED_CLAUSE||E===eE.RESERVED_SELECT||E===eE.RESERVED_SET_OPERATION||E===eE.RESERVED_JOIN||E===eE.LIMIT}const KE="top-level";class xE{indentTypes=[];constructor(E){this.indent=E}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(KE)}increaseBlockLevel(){this.indentTypes.push("block-level")}decreaseTopLevel(){this.indentTypes.length>0&&hE(this.indentTypes)===KE&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0;){if(this.indentTypes.pop()!==KE)break}}}class $E extends gE{length=0;trailingSpace=!1;constructor(E){super(new xE("")),this.expressionWidth=E}add(...E){if(E.forEach((E=>this.addToLength(E))),this.length>this.expressionWidth)throw new wE;super.add(...E)}addToLength(E){if("string"==typeof E)this.length+=E.length,this.trailingSpace=!1;else{if(E===WE.MANDATORY_NEWLINE||E===WE.NEWLINE)throw new wE;E===WE.INDENT||E===WE.SINGLE_INDENT||E===WE.SPACE?this.trailingSpace||(this.length++,this.trailingSpace=!0):E!==WE.NO_NEWLINE&&E!==WE.NO_SPACE||this.trailingSpace&&(this.trailingSpace=!1,this.length--)}}}class wE extends Error{}class kE{inline=!1;nodes=[];index=-1;constructor({cfg:E,dialectCfg:T,params:e,layout:R,inline:A=!1}){this.cfg=E,this.dialectCfg=T,this.inline=A,this.params=e,this.layout=R}format(E){for(this.nodes=E,this.index=0;this.index<this.nodes.length;this.index++)this.formatNode(this.nodes[this.index]);return this.layout}formatNode(E){this.formatComments(E.leadingComments),this.formatNodeWithoutComments(E),this.formatComments(E.trailingComments)}formatNodeWithoutComments(E){switch(E.type){case PE.function_call:return this.formatFunctionCall(E);case PE.array_subscript:return this.formatArraySubscript(E);case PE.property_access:return this.formatPropertyAccess(E);case PE.parenthesis:return this.formatParenthesis(E);case PE.between_predicate:return this.formatBetweenPredicate(E);case PE.case_expression:return this.formatCaseExpression(E);case PE.case_when:return this.formatCaseWhen(E);case PE.case_else:return this.formatCaseElse(E);case PE.clause:return this.formatClause(E);case PE.set_operation:return this.formatSetOperation(E);case PE.limit_clause:return this.formatLimitClause(E);case PE.all_columns_asterisk:return this.formatAllColumnsAsterisk(E);case PE.literal:return this.formatLiteral(E);case PE.identifier:return this.formatIdentifier(E);case PE.parameter:return this.formatParameter(E);case PE.operator:return this.formatOperator(E);case PE.comma:return this.formatComma(E);case PE.line_comment:return this.formatLineComment(E);case PE.block_comment:return this.formatBlockComment(E);case PE.keyword:return this.formatKeywordNode(E)}}formatFunctionCall(E){this.withComments(E.nameKw,(()=>{this.layout.add(this.showKw(E.nameKw))})),this.formatNode(E.parenthesis)}formatArraySubscript(E){this.withComments(E.array,(()=>{this.layout.add(E.array.type===PE.keyword?this.showKw(E.array):E.array.text)})),this.formatNode(E.parenthesis)}formatPropertyAccess(E){this.formatNode(E.object),this.layout.add(WE.NO_SPACE,"."),this.formatNode(E.property)}formatParenthesis(E){const T=this.formatInlineExpression(E.children);T?(this.layout.add(E.openParen),this.layout.add(...T.getLayoutItems()),this.layout.add(WE.NO_SPACE,E.closeParen,WE.SPACE)):(this.layout.add(E.openParen,WE.NEWLINE),Q(this.cfg)?(this.layout.add(WE.INDENT),this.layout=this.formatSubExpression(E.children)):(this.layout.indentation.increaseBlockLevel(),this.layout.add(WE.INDENT),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseBlockLevel()),this.layout.add(WE.NEWLINE,WE.INDENT,E.closeParen,WE.SPACE))}formatBetweenPredicate(E){this.layout.add(this.showKw(E.betweenKw),WE.SPACE),this.layout=this.formatSubExpression(E.expr1),this.layout.add(WE.NO_SPACE,WE.SPACE,this.showNonTabularKw(E.andKw),WE.SPACE),this.layout=this.formatSubExpression(E.expr2),this.layout.add(WE.SPACE)}formatCaseExpression(E){this.formatNode(E.caseKw),this.layout=this.formatSubExpression(E.expr),this.layout.indentation.increaseBlockLevel(),this.layout=this.formatSubExpression(E.clauses),this.layout.indentation.decreaseBlockLevel(),this.layout.add(WE.NEWLINE,WE.INDENT),this.formatNode(E.endKw)}formatCaseWhen(E){this.layout.add(WE.NEWLINE,WE.INDENT),this.formatNode(E.whenKw),this.layout=this.formatSubExpression(E.condition),this.formatNode(E.thenKw),this.layout=this.formatSubExpression(E.result)}formatCaseElse(E){this.layout.add(WE.NEWLINE,WE.INDENT),this.formatNode(E.elseKw),this.layout=this.formatSubExpression(E.result)}formatClause(E){Q(this.cfg)?this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E.nameKw),WE.SPACE):this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E.nameKw),WE.NEWLINE),this.layout.indentation.increaseTopLevel(),Q(this.cfg)||this.layout.add(WE.INDENT),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseTopLevel()}formatSetOperation(E){this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E.nameKw),WE.NEWLINE),this.layout.add(WE.INDENT),this.layout=this.formatSubExpression(E.children)}formatLimitClause(E){this.withComments(E.limitKw,(()=>{this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E.limitKw))})),this.layout.indentation.increaseTopLevel(),Q(this.cfg)?this.layout.add(WE.SPACE):this.layout.add(WE.NEWLINE,WE.INDENT),E.offset?(this.layout=this.formatSubExpression(E.offset),this.layout.add(WE.NO_SPACE,",",WE.SPACE),this.layout=this.formatSubExpression(E.count)):this.layout=this.formatSubExpression(E.count),this.layout.indentation.decreaseTopLevel()}formatAllColumnsAsterisk(E){this.layout.add("*",WE.SPACE)}formatLiteral(E){this.layout.add(E.text,WE.SPACE)}formatIdentifier(E){this.layout.add(E.text,WE.SPACE)}formatParameter(E){this.layout.add(this.params.get(E),WE.SPACE)}formatOperator({text:E}){var T;this.cfg.denseOperators||null!==(T=this.dialectCfg.alwaysDenseOperators)&&void 0!==T&&T.includes(E)?this.layout.add(WE.NO_SPACE,E):":"===E?this.layout.add(WE.NO_SPACE,E,WE.SPACE):this.layout.add(E,WE.SPACE)}formatComma(E){this.inline?this.layout.add(WE.NO_SPACE,",",WE.SPACE):this.layout.add(WE.NO_SPACE,",",WE.NEWLINE,WE.INDENT)}withComments(E,T){this.formatComments(E.leadingComments),T(),this.formatComments(E.trailingComments)}formatComments(E){E&&E.forEach((E=>{E.type===PE.line_comment?this.formatLineComment(E):this.formatBlockComment(E)}))}formatLineComment(E){YE(E.precedingWhitespace||"")?this.layout.add(WE.NEWLINE,WE.INDENT,E.text,WE.MANDATORY_NEWLINE,WE.INDENT):this.layout.getLayoutItems().length>0?this.layout.add(WE.NO_NEWLINE,WE.SPACE,E.text,WE.MANDATORY_NEWLINE,WE.INDENT):this.layout.add(E.text,WE.MANDATORY_NEWLINE,WE.INDENT)}formatBlockComment(E){this.isMultilineBlockComment(E)?(this.splitBlockComment(E.text).forEach((E=>{this.layout.add(WE.NEWLINE,WE.INDENT,E)})),this.layout.add(WE.NEWLINE,WE.INDENT)):this.layout.add(E.text,WE.SPACE)}isMultilineBlockComment(E){return YE(E.text)||YE(E.precedingWhitespace||"")}splitBlockComment(E){return E.split(/\n/).map((E=>/^\s*\*/.test(E)?" "+E.replace(/^\s*/,""):E.replace(/^\s*/,"")))}formatSubExpression(E){return new kE({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:this.layout,inline:this.inline}).format(E)}formatInlineExpression(E){const T=this.params.getPositionalParameterIndex();try{return new kE({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:new $E(this.cfg.expressionWidth),inline:!0}).format(E)}catch(E){if(E instanceof wE)return void this.params.setPositionalParameterIndex(T);throw E}}formatKeywordNode(E){switch(E.tokenType){case eE.RESERVED_JOIN:return this.formatJoin(E);case eE.AND:case eE.OR:case eE.XOR:return this.formatLogicalOperator(E);default:return this.formatKeyword(E)}}formatJoin(E){Q(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E),WE.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E),WE.SPACE)}formatKeyword(E){this.layout.add(this.showKw(E),WE.SPACE)}formatLogicalOperator(E){"before"===this.cfg.logicalOperatorNewline?Q(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E),WE.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(WE.NEWLINE,WE.INDENT,this.showKw(E),WE.SPACE):this.layout.add(this.showKw(E),WE.NEWLINE,WE.INDENT)}showKw(E){return bE(E.tokenType)?function(E,T){if("standard"===T)return E;let e=[];return E.length>=10&&E.includes(" ")&&([E,...e]=E.split(" ")),(E="tabularLeft"===T?E.padEnd(9," "):E.padStart(9," "))+["",...e].join(" ")}(this.showNonTabularKw(E),this.cfg.indentStyle):this.showNonTabularKw(E)}showNonTabularKw(E){switch(this.cfg.keywordCase){case"preserve":return BE(E.raw);case"upper":return E.text;case"lower":return E.text.toLowerCase()}}}class JE{constructor(E){this.cfg=E,this.params=new q(this.cfg.params)}tokenizer(){throw new Error("tokenizer() not implemented by subclass")}cachedTokenizer(){const E=this.constructor;return E.cachedTokenizer||(E.cachedTokenizer=this.tokenizer()),E.cachedTokenizer}formatOptions(){return{}}format(E){const T=this.parse(E),e=this.formatAst(T);return this.postFormat(e).trimEnd()}parse(E){return function(E){let T={};const e=new oE((e=>{return[...(R=E.tokenize(e,T),R.map(OE).map(NE).map(sE).map(rE)),RE(e.length)];var R})),R=new GE(pE.fromCompiled(dE),{lexer:e});return{parse:(E,e)=>{T=e;const{results:A}=R.feed(E);if(1===A.length)return A[0];throw 0===A.length?new Error("Parse error: Invalid SQL"):new Error("Parse error: Ambiguous grammar")}}}(this.cachedTokenizer()).parse(E,this.cfg.paramTypes||{})}formatAst(E){return E.map((E=>this.formatStatement(E))).join("\n".repeat(this.cfg.linesBetweenQueries+1))}formatStatement(E){const T=new kE({cfg:this.cfg,dialectCfg:this.formatOptions(),params:this.params,layout:new gE(new xE(Z(this.cfg)))}).format(E.children);return E.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?T.add(WE.NEWLINE,";"):T.add(WE.NO_NEWLINE,";")),T.toString()}postFormat(E){return this.cfg.tabulateAlias&&(E=function(E){const T=E.split("\n");let e=[];for(let E=0;E<T.length;E++){if(T[E].match(/^\s*SELECT/i)){let R=[];if(T[E].match(/.*,$/))R=[T[E]];else{if(e.push(T[E]),T[E].match(/^\s*SELECT\s+.+(?!,$)/i))continue;R.push(T[++E])}for(;T[E++].match(/.*,$/);)R.push(T[E]);const A=R.map((E=>({line:E,matches:E.match(/(^.*?\S) (AS )?(\S+,?$)/i)}))).map((({line:E,matches:T})=>T?{precedingText:T[1],as:T[2],alias:T[3]}:{precedingText:E})),S=mE(A.map((({precedingText:E})=>E.replace(/\s*,\s*$/,""))));R=A.map((({precedingText:E,as:T,alias:e})=>E+(e?" ".repeat(S-E.length+1)+(T??"")+e:""))),e=[...e,...R]}e.push(T[E])}return e.join("\n")}(E)),"before"!==this.cfg.commaPosition&&"tabular"!==this.cfg.commaPosition||(E=yE(E,this.cfg.commaPosition,Z(this.cfg))),E}}const ZE=E=>E.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&"),QE=/\s+/uy,qE=E=>new RegExp(`(?:${E})`,"uy"),jE=E=>E.split("").map((E=>/ /gu.test(E)?"\\s+":`[${E.toUpperCase()}${E.toLowerCase()}]`)).join(""),zE=(E,T=[])=>{const e="open"===E?0:1,R=["()",...T].map((E=>E[e]));return qE(R.map(ZE).join("|"))},ET=(E,T={})=>{if(0===E.length)return/^\b$/u;const e=(({rest:E,dashes:T})=>E||T?`(?![${E||""}${T?"-":""}])`:"")(T),R=HE(E).map(ZE).join("|").replace(/ /gu,"\\s+");return new RegExp(`(?:${R})${e}\\b`,"iuy")},TT=(E,T)=>{if(!E.length)return;const e=E.map(ZE).join("|");return qE(`(?:${e})(?:${T})`)},eT={"``":"(?:`[^`]*`)+","[]":String.raw`(?:\[[^\]]*\])(?:\][^\]]*\])*`,'""-qq':String.raw`(?:"[^"]*")+`,'""-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")`,'""-qq-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")+`,'""-raw':String.raw`(?:"[^"]*")`,"''-qq":String.raw`(?:'[^']*')+`,"''-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')`,"''-qq-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')+`,"''-raw":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\$\w*\$)[\s\S]*?\k<tag>`,"'''..'''":String.raw`'''[^\\]*?(?:\\.[^\\]*?)*?'''`,'""".."""':String.raw`"""[^\\]*?(?:\\.[^\\]*?)*?"""`,"{}":String.raw`(?:\{[^\}]*\})`,"q''":(()=>{const E={"<":">","[":"]","(":")","{":"}"},T=Object.entries(E).map((([E,T])=>"{left}(?:(?!{right}').)*?{right}".replace(/{left}/g,ZE(E)).replace(/{right}/g,ZE(T)))),e=ZE(Object.keys(E).join(""));return`[Qq]'(?:${String.raw`(?<tag>[^\s${e}])(?:(?!\k<tag>').)*?\k<tag>`}|${T.join("|")})'`})()},RT=E=>"string"==typeof E?eT[E]:(({prefixes:E,requirePrefix:T})=>`(?:${E.map(jE).join("|")}${T?"":"|"})`)(E)+eT[E.quote],AT=E=>E.map(RT).join("|"),ST=E=>qE(AT(E)),tT=(E={})=>qE(IT(E)),IT=({first:E,rest:T,dashes:e,allowFirstCharNumber:R}={})=>{const A="\\p{Alphabetic}\\p{Mark}_",S="\\p{Decimal_Number}",t=ZE(E??""),I=ZE(T??""),O=R?`[${A}${S}${t}][${A}${S}${I}]*`:`[${A}${t}][${A}${S}${I}]*`;return e?(E=>E+"(?:-"+E+")*")(O):O};class OT{input="";index=0;constructor(E){this.rules=E}tokenize(E){this.input=E,this.index=0;const T=[];let e;for(;this.index<this.input.length;){const E=this.getWhitespace();if(this.index<this.input.length){if(e=this.getNextToken(),!e)throw this.createParseError();T.push({...e,precedingWhitespace:E})}}return T}createParseError(){const E=this.input.slice(this.index,this.index+10),{line:T,col:e}=iE(this.input,this.index);return new Error(`Parse error: Unexpected "${E}" at line ${T} column ${e}`)}getWhitespace(){QE.lastIndex=this.index;const E=QE.exec(this.input);if(E)return this.index+=E[0].length,E[0]}getNextToken(){for(const E of this.rules){const T=this.match(E);if(T)return T}}match(E){E.regex.lastIndex=this.index;const T=E.regex.exec(this.input);if(T){const e=T[0],R={type:E.type,raw:e,text:E.text?E.text(e):e,start:this.index};return E.key&&(R.key=E.key(e)),this.index+=e.length,R}}}const NT=/\/\*/uy,sT=/([^/*]|\*[^/]|\/[^*])+/uy,rT=/\*\//uy;class _T{lastIndex=0;exec(E){let T,e="",R=0;if(!(T=this.matchSection(NT,E)))return null;for(e+=T,R++;R>0;)if(T=this.matchSection(NT,E))e+=T,R++;else if(T=this.matchSection(rT,E))e+=T,R--;else{if(!(T=this.matchSection(sT,E)))return null;e+=T}return[e]}matchSection(E,T){E.lastIndex=this.lastIndex;const e=E.exec(T);return e&&(this.lastIndex+=e[0].length),e?e[0]:null}}class nT{constructor(E){this.cfg=E,this.rulesBeforeParams=this.buildRulesBeforeParams(E),this.rulesAfterParams=this.buildRulesAfterParams(E)}tokenize(E,T){const e=[...this.rulesBeforeParams,...this.buildParamRules(this.cfg,T),...this.rulesAfterParams],R=new OT(e).tokenize(E);return this.cfg.postProcess?this.cfg.postProcess(R):R}buildRulesBeforeParams(E){return this.validRules([{type:eE.BLOCK_COMMENT,regex:E.nestedBlockComments?new _T:/(\/\*[^]*?\*\/)/uy},{type:eE.LINE_COMMENT,regex:(T=E.lineCommentTypes??["--"],new RegExp(`(?:${T.map(ZE).join("|")}).*?(?=\r\n|\r|\n|$)`,"uy"))},{type:eE.QUOTED_IDENTIFIER,regex:ST(E.identTypes)},{type:eE.NUMBER,regex:/(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\s*)?[0-9]+(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\.[0-9]+)?)?)(?!\w)/uy},{type:eE.RESERVED_PHRASE,regex:ET(E.reservedPhrases??[],E.identChars),text:LT},{type:eE.CASE,regex:/CASE\b/iuy,text:LT},{type:eE.END,regex:/END\b/iuy,text:LT},{type:eE.BETWEEN,regex:/BETWEEN\b/iuy,text:LT},{type:eE.LIMIT,regex:E.reservedClauses.includes("LIMIT")?/LIMIT\b/iuy:void 0,text:LT},{type:eE.RESERVED_CLAUSE,regex:ET(E.reservedClauses,E.identChars),text:LT},{type:eE.RESERVED_SELECT,regex:ET(E.reservedSelect,E.identChars),text:LT},{type:eE.RESERVED_SET_OPERATION,regex:ET(E.reservedSetOperations,E.identChars),text:LT},{type:eE.WHEN,regex:/WHEN\b/iuy,text:LT},{type:eE.ELSE,regex:/ELSE\b/iuy,text:LT},{type:eE.THEN,regex:/THEN\b/iuy,text:LT},{type:eE.RESERVED_JOIN,regex:ET(E.reservedJoins,E.identChars),text:LT},{type:eE.AND,regex:/AND\b/iuy,text:LT},{type:eE.OR,regex:/OR\b/iuy,text:LT},{type:eE.XOR,regex:E.supportsXor?/XOR\b/iuy:void 0,text:LT},{type:eE.RESERVED_FUNCTION_NAME,regex:ET(E.reservedFunctionNames,E.identChars),text:LT},{type:eE.RESERVED_KEYWORD,regex:ET(E.reservedKeywords,E.identChars),text:LT}]);var T}buildRulesAfterParams(E){return this.validRules([{type:eE.VARIABLE,regex:E.variableTypes?(e=E.variableTypes,qE(e.map((E=>"regex"in E?E.regex:RT(E))).join("|"))):void 0},{type:eE.STRING,regex:ST(E.stringTypes)},{type:eE.IDENTIFIER,regex:tT(E.identChars)},{type:eE.DELIMITER,regex:/[;]/uy},{type:eE.COMMA,regex:/[,]/y},{type:eE.OPEN_PAREN,regex:zE("open",E.extraParens)},{type:eE.CLOSE_PAREN,regex:zE("close",E.extraParens)},{type:eE.OPERATOR,regex:(T=["+","-","/",">","<","=","<>","<=",">=","!=",...E.operators??[]],qE(`${HE(T).map(ZE).join("|")}`))},{type:eE.ASTERISK,regex:/[*]/uy},{type:eE.DOT,regex:/[.]/uy}]);var T,e}buildParamRules(E,T){var e,R,A,S;const t={named:(null==T?void 0:T.named)||(null===(e=E.paramTypes)||void 0===e?void 0:e.named)||[],quoted:(null==T?void 0:T.quoted)||(null===(R=E.paramTypes)||void 0===R?void 0:R.quoted)||[],numbered:(null==T?void 0:T.numbered)||(null===(A=E.paramTypes)||void 0===A?void 0:A.numbered)||[],positional:"boolean"==typeof(null==T?void 0:T.positional)?T.positional:null===(S=E.paramTypes)||void 0===S?void 0:S.positional};return this.validRules([{type:eE.NAMED_PARAMETER,regex:TT(t.named,IT(E.paramChars||E.identChars)),key:E=>E.slice(1)},{type:eE.QUOTED_PARAMETER,regex:TT(t.quoted,AT(E.identTypes)),key:E=>(({tokenKey:E,quoteChar:T})=>E.replace(new RegExp(ZE("\\"+T),"gu"),T))({tokenKey:E.slice(2,-1),quoteChar:E.slice(-1)})},{type:eE.NUMBERED_PARAMETER,regex:TT(t.numbered,"[0-9]+"),key:E=>E.slice(1)},{type:eE.POSITIONAL_PARAMETER,regex:t.positional?/[?]/y:void 0}])}validRules(E){return E.filter((E=>Boolean(E.regex)))}}const LT=E=>BE(E.toUpperCase()),CT=E=>E.flatMap(aT),aT=E=>MT(DT(E)).map((E=>E.trim())),iT=/[^[\]{}]+/y,oT=/\{.*?\}/y,PT=/\[.*?\]/y,DT=E=>{let T=0;const e=[];for(;T<E.length;){iT.lastIndex=T;const R=iT.exec(E);R&&(e.push([R[0].trim()]),T+=R[0].length),PT.lastIndex=T;const A=PT.exec(E);if(A){const E=A[0].slice(1,-1).split("|").map((E=>E.trim()));e.push(["",...E]),T+=A[0].length}oT.lastIndex=T;const S=oT.exec(E);if(S){const E=S[0].slice(1,-1).split("|").map((E=>E.trim()));e.push(E),T+=S[0].length}if(!R&&!A&&!S)throw new Error(`Unbalanced parenthesis in: ${E}`)}return e},MT=([E,...T])=>void 0===E?[""]:MT(T).flatMap((T=>E.map((E=>E.trim()+" "+T.trim())))),UT=fE({keywords:["ALL","AND","ANY","ARRAY","AS","ASC","ASSERT_ROWS_MODIFIED","AT","BETWEEN","BY","CASE","CAST","COLLATE","CONTAINS","CREATE","CROSS","CUBE","CURRENT","DEFAULT","DEFINE","DESC","DISTINCT","ELSE","END","ENUM","ESCAPE","EXCEPT","EXCLUDE","EXISTS","EXTRACT","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","GROUP","GROUPING","GROUPS","HASH","HAVING","IF","IGNORE","IN","INNER","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LIKE","LIMIT","LOOKUP","MERGE","NATURAL","NEW","NO","NOT","NULL","NULLS","OF","ON","OR","ORDER","OUTER","OVER","PARTITION","PRECEDING","PROTO","RANGE","RECURSIVE","RESPECT","RIGHT","ROLLUP","ROWS","SELECT","SET","SOME","STRUCT","TABLE","TABLESAMPLE","THEN","TO","TREAT","TRUE","UNBOUNDED","UNION","UNNEST","USING","WHEN","WHERE","WINDOW","WITH","WITHIN"],datatypes:["ARRAY","BOOL","BYTES","DATE","DATETIME","GEOGRAPHY","INTERVAL","INT64","INT","SMALLINT","INTEGER","BIGINT","TINYINT","BYTEINT","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","FLOAT64","STRING","STRUCT","TIME","TIMEZONE"],stringFormat:["HEX","BASEX","BASE64M","ASCII","UTF-8","UTF8"],misc:["SAFE"],ddl:["LIKE","COPY","CLONE","IN","OUT","INOUT","RETURNS","LANGUAGE","CASCADE","RESTRICT","DETERMINISTIC"]}),lT=fE({aead:["KEYS.NEW_KEYSET","KEYS.ADD_KEY_FROM_RAW_BYTES","AEAD.DECRYPT_BYTES","AEAD.DECRYPT_STRING","AEAD.ENCRYPT","KEYS.KEYSET_CHAIN","KEYS.KEYSET_FROM_JSON","KEYS.KEYSET_TO_JSON","KEYS.ROTATE_KEYSET","KEYS.KEYSET_LENGTH"],aggregateAnalytic:["ANY_VALUE","ARRAY_AGG","AVG","CORR","COUNT","COUNTIF","COVAR_POP","COVAR_SAMP","MAX","MIN","ST_CLUSTERDBSCAN","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","VAR_POP","VAR_SAMP"],aggregate:["ANY_VALUE","ARRAY_AGG","ARRAY_CONCAT_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","COUNT","COUNTIF","LOGICAL_AND","LOGICAL_OR","MAX","MIN","STRING_AGG","SUM"],approximateAggregate:["APPROX_COUNT_DISTINCT","APPROX_QUANTILES","APPROX_TOP_COUNT","APPROX_TOP_SUM"],array:["ARRAY_CONCAT","ARRAY_LENGTH","ARRAY_TO_STRING","GENERATE_ARRAY","GENERATE_DATE_ARRAY","GENERATE_TIMESTAMP_ARRAY","ARRAY_REVERSE","OFFSET","SAFE_OFFSET","ORDINAL","SAFE_ORDINAL"],bitwise:["BIT_COUNT"],conversion:["PARSE_BIGNUMERIC","PARSE_NUMERIC","SAFE_CAST"],date:["CURRENT_DATE","EXTRACT","DATE","DATE_ADD","DATE_SUB","DATE_DIFF","DATE_TRUNC","DATE_FROM_UNIX_DATE","FORMAT_DATE","LAST_DAY","PARSE_DATE","UNIX_DATE"],datetime:["CURRENT_DATETIME","DATETIME","EXTRACT","DATETIME_ADD","DATETIME_SUB","DATETIME_DIFF","DATETIME_TRUNC","FORMAT_DATETIME","LAST_DAY","PARSE_DATETIME"],debugging:["ERROR"],federatedQuery:["EXTERNAL_QUERY"],geography:["S2_CELLIDFROMPOINT","S2_COVERINGCELLIDS","ST_ANGLE","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_AZIMUTH","ST_BOUNDARY","ST_BOUNDINGBOX","ST_BUFFER","ST_BUFFERWITHTOLERANCE","ST_CENTROID","ST_CENTROID_AGG","ST_CLOSESTPOINT","ST_CLUSTERDBSCAN","ST_CONTAINS","ST_CONVEXHULL","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DUMP","ST_DWITHIN","ST_ENDPOINT","ST_EQUALS","ST_EXTENT","ST_EXTERIORRING","ST_GEOGFROM","ST_GEOGFROMGEOJSON","ST_GEOGFROMTEXT","ST_GEOGFROMWKB","ST_GEOGPOINT","ST_GEOGPOINTFROMGEOHASH","ST_GEOHASH","ST_GEOMETRYTYPE","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_INTERSECTSBOX","ST_ISCOLLECTION","ST_ISEMPTY","ST_LENGTH","ST_MAKELINE","ST_MAKEPOLYGON","ST_MAKEPOLYGONORIENTED","ST_MAXDISTANCE","ST_NPOINTS","ST_NUMGEOMETRIES","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SIMPLIFY","ST_SNAPTOGRID","ST_STARTPOINT","ST_TOUCHES","ST_UNION","ST_UNION_AGG","ST_WITHIN","ST_X","ST_Y"],hash:["FARM_FINGERPRINT","MD5","SHA1","SHA256","SHA512"],hll:["HLL_COUNT.INIT","HLL_COUNT.MERGE","HLL_COUNT.MERGE_PARTIAL","HLL_COUNT.EXTRACT"],interval:["MAKE_INTERVAL","EXTRACT","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL"],json:["JSON_EXTRACT","JSON_QUERY","JSON_EXTRACT_SCALAR","JSON_VALUE","JSON_EXTRACT_ARRAY","JSON_QUERY_ARRAY","JSON_EXTRACT_STRING_ARRAY","JSON_VALUE_ARRAY","TO_JSON_STRING"],math:["ABS","SIGN","IS_INF","IS_NAN","IEEE_DIVIDE","RAND","SQRT","POW","POWER","EXP","LN","LOG","LOG10","GREATEST","LEAST","DIV","SAFE_DIVIDE","SAFE_MULTIPLY","SAFE_NEGATE","SAFE_ADD","SAFE_SUBTRACT","MOD","ROUND","TRUNC","CEIL","CEILING","FLOOR","COS","COSH","ACOS","ACOSH","SIN","SINH","ASIN","ASINH","TAN","TANH","ATAN","ATANH","ATAN2","RANGE_BUCKET"],navigation:["FIRST_VALUE","LAST_VALUE","NTH_VALUE","LEAD","LAG","PERCENTILE_CONT","PERCENTILE_DISC"],net:["NET.IP_FROM_STRING","NET.SAFE_IP_FROM_STRING","NET.IP_TO_STRING","NET.IP_NET_MASK","NET.IP_TRUNC","NET.IPV4_FROM_INT64","NET.IPV4_TO_INT64","NET.HOST","NET.PUBLIC_SUFFIX","NET.REG_DOMAIN"],numbering:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","NTILE","ROW_NUMBER"],security:["SESSION_USER"],statisticalAggregate:["CORR","COVAR_POP","COVAR_SAMP","STDDEV_POP","STDDEV_SAMP","STDDEV","VAR_POP","VAR_SAMP","VARIANCE"],string:["ASCII","BYTE_LENGTH","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CODE_POINTS_TO_BYTES","CODE_POINTS_TO_STRING","CONCAT","CONTAINS_SUBSTR","ENDS_WITH","FORMAT","FROM_BASE32","FROM_BASE64","FROM_HEX","INITCAP","INSTR","LEFT","LENGTH","LPAD","LOWER","LTRIM","NORMALIZE","NORMALIZE_AND_CASEFOLD","OCTET_LENGTH","REGEXP_CONTAINS","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","REPEAT","REVERSE","RIGHT","RPAD","RTRIM","SAFE_CONVERT_BYTES_TO_STRING","SOUNDEX","SPLIT","STARTS_WITH","STRPOS","SUBSTR","SUBSTRING","TO_BASE32","TO_BASE64","TO_CODE_POINTS","TO_HEX","TRANSLATE","TRIM","UNICODE","UPPER"],time:["CURRENT_TIME","TIME","EXTRACT","TIME_ADD","TIME_SUB","TIME_DIFF","TIME_TRUNC","FORMAT_TIME","PARSE_TIME"],timestamp:["CURRENT_TIMESTAMP","EXTRACT","STRING","TIMESTAMP","TIMESTAMP_ADD","TIMESTAMP_SUB","TIMESTAMP_DIFF","TIMESTAMP_TRUNC","FORMAT_TIMESTAMP","PARSE_TIMESTAMP","TIMESTAMP_SECONDS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UNIX_SECONDS","UNIX_MILLIS","UNIX_MICROS"],uuid:["GENERATE_UUID"],conditional:["COALESCE","IF","IFNULL","NULLIF"],legacyAggregate:["AVG","BIT_AND","BIT_OR","BIT_XOR","CORR","COUNT","COVAR_POP","COVAR_SAMP","EXACT_COUNT_DISTINCT","FIRST","GROUP_CONCAT","GROUP_CONCAT_UNQUOTED","LAST","MAX","MIN","NEST","NTH","QUANTILES","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","TOP","UNIQUE","VARIANCE","VAR_POP","VAR_SAMP"],legacyBitwise:["BIT_COUNT"],legacyCasting:["BOOLEAN","BYTES","CAST","FLOAT","HEX_STRING","INTEGER","STRING"],legacyComparison:["COALESCE","GREATEST","IFNULL","IS_INF","IS_NAN","IS_EXPLICITLY_DEFINED","LEAST","NVL"],legacyDatetime:["CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE","DATE_ADD","DATEDIFF","DAY","DAYOFWEEK","DAYOFYEAR","FORMAT_UTC_USEC","HOUR","MINUTE","MONTH","MSEC_TO_TIMESTAMP","NOW","PARSE_UTC_USEC","QUARTER","SEC_TO_TIMESTAMP","SECOND","STRFTIME_UTC_USEC","TIME","TIMESTAMP","TIMESTAMP_TO_MSEC","TIMESTAMP_TO_SEC","TIMESTAMP_TO_USEC","USEC_TO_TIMESTAMP","UTC_USEC_TO_DAY","UTC_USEC_TO_HOUR","UTC_USEC_TO_MONTH","UTC_USEC_TO_WEEK","UTC_USEC_TO_YEAR","WEEK","YEAR"],legacyIp:["FORMAT_IP","PARSE_IP","FORMAT_PACKED_IP","PARSE_PACKED_IP"],legacyJson:["JSON_EXTRACT","JSON_EXTRACT_SCALAR"],legacyMath:["ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","ATAN2","CEIL","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG2","LOG10","PI","POW","RADIANS","RAND","ROUND","SIN","SINH","SQRT","TAN","TANH"],legacyRegex:["REGEXP_MATCH","REGEXP_EXTRACT","REGEXP_REPLACE"],legacyString:["CONCAT","INSTR","LEFT","LENGTH","LOWER","LPAD","LTRIM","REPLACE","RIGHT","RPAD","RTRIM","SPLIT","SUBSTR","UPPER"],legacyTableWildcard:["TABLE_DATE_RANGE","TABLE_DATE_RANGE_STRICT","TABLE_QUERY"],legacyUrl:["HOST","DOMAIN","TLD"],legacyWindow:["AVG","COUNT","MAX","MIN","STDDEV","SUM","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER"],legacyMisc:["CURRENT_USER","EVERY","FROM_BASE64","HASH","FARM_FINGERPRINT","IF","POSITION","SHA1","SOME","TO_BASE64"],other:["BQ.JOBS.CANCEL","BQ.REFRESH_MATERIALIZED_VIEW"],ddl:["OPTIONS"],pivot:["PIVOT","UNPIVOT"],dataTypes:["BYTES","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","STRING"]}),cT=CT(["SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]"]),uT=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","OMIT RECORD IF","INSERT [INTO]","VALUES","UPDATE","SET","DELETE [FROM]","TRUNCATE TABLE","MERGE [INTO]","WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]","UPDATE SET","CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]","DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME TO","ALTER COLUMN [IF EXISTS]","SET DEFAULT COLLATE","SET OPTIONS","DROP NOT NULL","SET DATA TYPE","CREATE SCHEMA [IF NOT EXISTS]","DEFAULT COLLATE","CLUSTER BY","FOR SYSTEM_TIME AS OF","WITH CONNECTION","WITH PARTITION COLUMNS","CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]","REMOTE WITH CONNECTION","RETURNS TABLE","CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]","GRANT TO","FILTER USING","CREATE CAPACITY","AS JSON","CREATE RESERVATION","CREATE ASSIGNMENT","CREATE SEARCH INDEX [IF NOT EXISTS]","ALTER SCHEMA [IF EXISTS]","ALTER [MATERIALIZED] VIEW [IF EXISTS]","ALTER BI_CAPACITY","DROP SCHEMA [IF EXISTS]","DROP [MATERIALIZED] VIEW [IF EXISTS]","DROP [TABLE] FUNCTION [IF EXISTS]","DROP PROCEDURE [IF EXISTS]","DROP ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","DROP CAPACITY [IF EXISTS]","DROP RESERVATION [IF EXISTS]","DROP ASSIGNMENT [IF EXISTS]","DROP SEARCH INDEX [IF EXISTS]","DROP [IF EXISTS]","GRANT","REVOKE","DECLARE","EXECUTE IMMEDIATE","LOOP","END LOOP","REPEAT","END REPEAT","WHILE","END WHILE","BREAK","LEAVE","CONTINUE","ITERATE","FOR","END FOR","BEGIN","BEGIN TRANSACTION","COMMIT TRANSACTION","ROLLBACK TRANSACTION","RAISE","RETURN","CALL","ASSERT","EXPORT DATA"]),dT=CT(["UNION {ALL | DISTINCT}","EXCEPT DISTINCT","INTERSECT DISTINCT"]),GT=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),pT=CT(["TABLESAMPLE SYSTEM","ANY TYPE","ALL COLUMNS","NOT DETERMINISTIC","{ROWS | RANGE} BETWEEN"]);function hT(E){return function(E){let T=AE;return E.map((E=>"OFFSET"===E.text&&"["===T.text?(T=E,{...E,type:eE.RESERVED_FUNCTION_NAME}):(T=E,E)))}(function(E){const T=[];for(let R=0;R<E.length;R++){var e;const A=E[R];if((tE.ARRAY(A)||tE.STRUCT(A))&&"<"===(null===(e=E[R+1])||void 0===e?void 0:e.text)){const e=mT(E,R+1),S=E.slice(R,e+1);T.push({type:eE.IDENTIFIER,raw:S.map(HT("raw")).join(""),text:S.map(HT("text")).join(""),start:A.start}),R=e}else T.push(A)}return T}(E))}const HT=E=>T=>T.type===eE.IDENTIFIER||T.type===eE.COMMA?T[E]+" ":T[E];function mT(E,T){let e=0;for(let R=T;R<E.length;R++){const T=E[R];if("<"===T.text?e++:">"===T.text?e--:">>"===T.text&&(e-=2),0===e)return R}return E.length-1}const BT=fE({aggregate:["ARRAY_AGG","AVG","CORR","CORRELATION","COUNT","COUNT_BIG","COVAR_POP","COVARIANCE","COVAR","COVAR_SAMP","COVARIANCE_SAMP","CUME_DIST","GROUPING","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_ICPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV","STDDEV_SAMP","SUM","VAR_POP","VARIANCE","VAR","VAR_SAMP","VARIANCE_SAMP","XMLAGG"],scalar:["ABS","ABSVAL","ACOS","ADD_DAYS","ADD_MONTHS","ARRAY_DELETE","ARRAY_FIRST","ARRAY_LAST","ARRAY_NEXT","ARRAY_PRIOR","ARRAY_TRIM","ASCII","ASCII_CHR","ASCII_STR","ASCIISTR","ASIN","ATAN","ATANH","ATAN2","BIGINT","BINARY","BITAND","BITANDNOT","BITOR","BITXOR","BITNOT","BLOB","BTRIM","CARDINALITY","CCSID_ENCODING","CEILING","CEIL","CHAR","CHAR9","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CLOB","COALESCE","COLLATION_KEY","COMPARE_DECFLOAT","CONCAT","CONTAINS","COS","COSH","DATE","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEK_ISO","DAYOFYEAR","DAYS","DAYS_BETWEEN","DBCLOB","DECFLOAT","DECFLOAT_FORMAT","DECFLOAT_SORTKEY","DECIMAL","DEC","DECODE","DECRYPT_BINARY","DECRYPT_BIT","DECRYPT_CHAR","DECRYPT_DB","DECRYPT_DATAKEY_BIGINT","DECRYPT_DATAKEY_BIT","DECRYPT_DATAKEY_CLOB","DECRYPT_DATAKEY_DBCLOB","DECRYPT_DATAKEY_DECIMAL","DECRYPT_DATAKEY_INTEGER","DECRYPT_DATAKEY_VARCHAR","DECRYPT_DATAKEY_VARGRAPHIC","DEGREES","DIFFERENCE","DIGITS","DOUBLE_PRECISION","DOUBLE","DSN_XMLVALIDATE","EBCDIC_CHR","EBCDIC_STR","ENCRYPT_DATAKEY","ENCRYPT_TDES","EXP","EXTRACT","FLOAT","FLOOR","GENERATE_UNIQUE","GENERATE_UNIQUE_BINARY","GETHINT","GETVARIABLE","GRAPHIC","GREATEST","HASH","HASH_CRC32","HASH_MD5","HASH_SHA1","HASH_SHA256","HEX","HOUR","IDENTITY_VAL_LOCAL","IFNULL","INSERT","INSTR","INTEGER","INT","JULIAN_DAY","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LN","LOCATE","LOCATE_IN_STRING","LOG10","LOWER","LPAD","LTRIM","MAX","MAX_CARDINALITY","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MOD","MONTH","MONTHS_BETWEEN","MQREAD","MQREADCLOB","MQRECEIVE","MQRECEIVECLOB","MQSEND","MULTIPLY_ALT","NEXT_DAY","NEXT_MONTH","NORMALIZE_DECFLOAT","NORMALIZE_STRING","NULLIF","NVL","OVERLAY","PACK","POSITION","POSSTR","POWER","POW","QUANTIZE","QUARTER","RADIANS","RAISE_ERROR","RANDOM","RAND","REAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RIGHT","ROUND","ROUND_TIMESTAMP","ROWID","RPAD","RTRIM","SCORE","SECOND","SIGN","SIN","SINH","SMALLINT","SOUNDEX","SOAPHTTPC","SOAPHTTPV","SOAPHTTPNC","SOAPHTTPNV","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTRING","TAN","TANH","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMP_TZ","TO_CHAR","TO_CLOB","TO_DATE","TO_NUMBER","TOTALORDER","TO_TIMESTAMP","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRUNC","TRUNC_TIMESTAMP","UCASE","UNICODE","UNICODE_STR","UNISTR","UPPER","VALUE","VARBINARY","VARCHAR","VARCHAR9","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT","VARGRAPHIC","VERIFY_GROUP_FOR_USER","VERIFY_ROLE_FOR_USER","VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER","WEEK","WEEK_ISO","WRAP","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLMODIFY","XMLNAMESPACES","XMLPARSE","XMLPI","XMLQUERY","XMLSERIALIZE","XMLTEXT","XMLXSROBJECTID","XSLTRANSFORM","YEAR"],table:["ADMIN_TASK_LIST","ADMIN_TASK_OUTPUT","ADMIN_TASK_STATUS","BLOCKING_THREADS","MQREADALL","MQREADALLCLOB","MQRECEIVEALL","MQRECEIVEALLCLOB","XMLTABLE"],row:["UNPACK"],olap:["CUME_DIST","PERCENT_RANK","RANK","DENSE_RANK","NTILE","LAG","LEAD","ROW_NUMBER","FIRST_VALUE","LAST_VALUE","NTH_VALUE","RATIO_TO_REPORT"],cast:["CAST"]}),fT=fE({standard:["ALL","ALLOCATE","ALLOW","ALTERAND","ANY","AS","ARRAY","ARRAY_EXISTS","ASENSITIVE","ASSOCIATE","ASUTIME","AT","AUDIT","AUX","AUXILIARY","BEFORE","BEGIN","BETWEEN","BUFFERPOOL","BY","CAPTURE","CASCADED","CAST","CCSID","CHARACTER","CHECK","CLONE","CLUSTER","COLLECTION","COLLID","COLUMN","CONDITION","CONNECTION","CONSTRAINT","CONTENT","CONTINUE","CREATE","CUBE","CURRENT","CURRENT_DATE","CURRENT_LC_CTYPE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRVAL","CURSOR","DATA","DATABASE","DBINFO","DECLARE","DEFAULT","DESCRIPTOR","DETERMINISTIC","DISABLE","DISALLOW","DISTINCT","DO","DOCUMENT","DSSIZE","DYNAMIC","EDITPROC","ELSE","ELSEIF","ENCODING","ENCRYPTION","ENDING","END-EXEC","ERASE","ESCAPE","EXCEPTION","EXISTS","EXIT","EXTERNAL","FENCED","FIELDPROC","FINAL","FIRST","FOR","FREE","FULL","FUNCTION","GENERATED","GET","GLOBAL","GOTO","GROUP","HANDLER","HOLD","HOURS","IF","IMMEDIATE","IN","INCLUSIVE","INDEX","INHERIT","INNER","INOUT","INSENSITIVE","INTO","IS","ISOBID","ITERATE","JAR","KEEP","KEY","LANGUAGE","LAST","LC_CTYPE","LEAVE","LIKE","LOCAL","LOCALE","LOCATOR","LOCATORS","LOCK","LOCKMAX","LOCKSIZE","LONG","LOOP","MAINTAINED","MATERIALIZED","MICROSECONDS","MINUTEMINUTES","MODIFIES","MONTHS","NEXT","NEXTVAL","NO","NONE","NOT","NULL","NULLS","NUMPARTS","OBID","OF","OLD","ON","OPTIMIZATION","OPTIMIZE","ORDER","ORGANIZATION","OUT","OUTER","PACKAGE","PARAMETER","PART","PADDED","PARTITION","PARTITIONED","PARTITIONING","PATH","PIECESIZE","PERIOD","PLAN","PRECISION","PREVVAL","PRIOR","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PSID","PUBLIC","QUERY","QUERYNO","READS","REFERENCES","RESIGNAL","RESTRICT","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNS","ROLE","ROLLUP","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_UP","ROUND_UP","ROW","ROWSET","SCHEMA","SCRATCHPAD","SECONDS","SECQTY","SECURITY","SEQUENCE","SENSITIVE","SESSION_USER","SIMPLE","SOME","SOURCE","SPECIFIC","STANDARD","STATIC","STATEMENT","STAY","STOGROUP","STORES","STYLE","SUMMARY","SYNONYM","SYSDATE","SYSTEM","SYSTIMESTAMP","TABLE","TABLESPACE","THEN","TO","TRIGGER","TYPE","UNDO","UNIQUE","UNTIL","USER","USING","VALIDPROC","VARIABLE","VARIANT","VCAT","VERSIONING","VIEW","VOLATILE","VOLUMES","WHILE","WLM","XMLEXISTS","XMLCAST","YEARS","ZONE"]}),YT=CT(["SELECT [ALL | DISTINCT]"]),FT=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY [INPUT SEQUENCE]","FETCH FIRST","INSERT INTO","VALUES","UPDATE","SET","WHERE CURRENT OF","WITH {RR | RS | CS | UR}","DELETE FROM","TRUNCATE [TABLE]","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT","CREATE [OR REPLACE] VIEW","CREATE [GLOBAL TEMPORARY] TABLE","DROP TABLE [HIERARCHY]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","ALTER [COLUMN]","SET DATA TYPE","SET NOT NULL","DROP {IDENTITY | EXPRESSION | DEFAULT | NOT NULL}","ALLOCATE CURSOR","ALTER DATABASE","ALTER FUNCTION","ALTER INDEX","ALTER MASK","ALTER PERMISSION","ALTER PROCEDURE","ALTER SEQUENCE","ALTER STOGROUP","ALTER TABLESPACE","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER VIEW","ASSOCIATE LOCATORS","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT","COMMIT","CONNECT","CREATE ALIAS","CREATE AUXILIARY TABLE","CREATE DATABASE","CREATE FUNCTION","CREATE GLOBAL TEMPORARY TABLE","CREATE INDEX","CREATE LOB TABLESPACE","CREATE MASK","CREATE PERMISSION","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE STOGROUP","CREATE SYNONYM","CREATE TABLESPACE","CREATE TRIGGER","CREATE TRUSTED CONTEXT","CREATE TYPE","CREATE VARIABLE","DECLARE CURSOR","DECLARE GLOBAL TEMPORARY TABLE","DECLARE STATEMENT","DECLARE TABLE","DECLARE VARIABLE","DESCRIBE CURSOR","DESCRIBE INPUT","DESCRIBE OUTPUT","DESCRIBE PROCEDURE","DESCRIBE TABLE","DROP","END DECLARE SECTION","EXCHANGE","EXECUTE","EXECUTE IMMEDIATE","EXPLAIN","FETCH","FREE LOCATOR","GET DIAGNOSTICS","GRANT","HOLD LOCATOR","INCLUDE","LABEL","LOCK TABLE","OPEN","PREPARE","REFRESH","RELEASE","RELEASE SAVEPOINT","RENAME","REVOKE","ROLLBACK","SAVEPOINT","SELECT INTO","SET CONNECTION","SET CURRENT ACCELERATOR","SET CURRENT APPLICATION COMPATIBILITY","SET CURRENT APPLICATION ENCODING SCHEME","SET CURRENT DEBUG MODE","SET CURRENT DECFLOAT ROUNDING MODE","SET CURRENT DEGREE","SET CURRENT EXPLAIN MODE","SET CURRENT GET_ACCEL_ARCHIVE","SET CURRENT LOCALE LC_CTYPE","SET CURRENT MAINTAINED TABLE TYPES FOR OPTIMIZATION","SET CURRENT OPTIMIZATION HINT","SET CURRENT PACKAGE PATH","SET CURRENT PACKAGESET","SET CURRENT PRECISION","SET CURRENT QUERY ACCELERATION","SET CURRENT QUERY ACCELERATION WAITFORDATA","SET CURRENT REFRESH AGE","SET CURRENT ROUTINE VERSION","SET CURRENT RULES","SET CURRENT SQLID","SET CURRENT TEMPORAL BUSINESS_TIME","SET CURRENT TEMPORAL SYSTEM_TIME","SET ENCRYPTION PASSWORD","SET PATH","SET SCHEMA","SET SESSION TIME ZONE","SIGNAL","VALUES INTO","WHENEVER","AFTER","GO","SET CURRENT SCHEMA"]),yT=CT(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),VT=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),WT=CT(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]);const gT=fE({math:["ABS","ACOS","ASIN","ATAN","BIN","BROUND","CBRT","CEIL","CEILING","CONV","COS","DEGREES","EXP","FACTORIAL","FLOOR","GREATEST","HEX","LEAST","LN","LOG","LOG10","LOG2","NEGATIVE","PI","PMOD","POSITIVE","POW","POWER","RADIANS","RAND","ROUND","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIN","SQRT","TAN","UNHEX","WIDTH_BUCKET"],array:["ARRAY_CONTAINS","MAP_KEYS","MAP_VALUES","SIZE","SORT_ARRAY"],conversion:["BINARY","CAST"],date:["ADD_MONTHS","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","QUARTER","SECOND","TIMESTAMP","TO_DATE","TO_UTC_TIMESTAMP","TRUNC","UNIX_TIMESTAMP","WEEKOFYEAR","YEAR"],conditional:["ASSERT_TRUE","COALESCE","IF","ISNOTNULL","ISNULL","NULLIF","NVL"],string:["ASCII","BASE64","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONTEXT_NGRAMS","DECODE","ELT","ENCODE","FIELD","FIND_IN_SET","FORMAT_NUMBER","GET_JSON_OBJECT","IN_FILE","INITCAP","INSTR","LCASE","LENGTH","LEVENSHTEIN","LOCATE","LOWER","LPAD","LTRIM","NGRAMS","OCTET_LENGTH","PARSE_URL","PRINTF","QUOTE","REGEXP_EXTRACT","REGEXP_REPLACE","REPEAT","REVERSE","RPAD","RTRIM","SENTENCES","SOUNDEX","SPACE","SPLIT","STR_TO_MAP","SUBSTR","SUBSTRING","TRANSLATE","TRIM","UCASE","UNBASE64","UPPER"],masking:["MASK","MASK_FIRST_N","MASK_HASH","MASK_LAST_N","MASK_SHOW_FIRST_N","MASK_SHOW_LAST_N"],misc:["AES_DECRYPT","AES_ENCRYPT","CRC32","CURRENT_DATABASE","CURRENT_USER","HASH","JAVA_METHOD","LOGGED_IN_USER","MD5","REFLECT","SHA","SHA1","SHA2","SURROGATE_KEY","VERSION"],aggregate:["AVG","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COVAR_POP","COVAR_SAMP","HISTOGRAM_NUMERIC","MAX","MIN","NTILE","PERCENTILE","PERCENTILE_APPROX","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],table:["EXPLODE","INLINE","JSON_TUPLE","PARSE_URL_TUPLE","POSEXPLODE","STACK"],window:["LEAD","LAG","FIRST_VALUE","LAST_VALUE","RANK","ROW_NUMBER","DENSE_RANK","CUME_DIST","PERCENT_RANK","NTILE"],dataTypes:["DECIMAL","NUMERIC","VARCHAR","CHAR"]}),XT=fE({nonReserved:["ADD","ADMIN","AFTER","ANALYZE","ARCHIVE","ASC","BEFORE","BUCKET","BUCKETS","CASCADE","CHANGE","CLUSTER","CLUSTERED","CLUSTERSTATUS","COLLECTION","COLUMNS","COMMENT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONTINUE","DATA","DATABASES","DATETIME","DAY","DBPROPERTIES","DEFERRED","DEFINED","DELIMITED","DEPENDENCY","DESC","DIRECTORIES","DIRECTORY","DISABLE","DISTRIBUTE","ELEM_TYPE","ENABLE","ESCAPED","EXCLUSIVE","EXPLAIN","EXPORT","FIELDS","FILE","FILEFORMAT","FIRST","FORMAT","FORMATTED","FUNCTIONS","HOLD_DDLTIME","HOUR","IDXPROPERTIES","IGNORE","INDEX","INDEXES","INPATH","INPUTDRIVER","INPUTFORMAT","ITEMS","JAR","KEYS","KEY_TYPE","LIMIT","LINES","LOAD","LOCATION","LOCK","LOCKS","LOGICAL","LONG","MAPJOIN","MATERIALIZED","METADATA","MINUS","MINUTE","MONTH","MSCK","NOSCAN","NO_DROP","OFFLINE","OPTION","OUTPUTDRIVER","OUTPUTFORMAT","OVERWRITE","OWNER","PARTITIONED","PARTITIONS","PLUS","PRETTY","PRINCIPALS","PROTECTION","PURGE","READ","READONLY","REBUILD","RECORDREADER","RECORDWRITER","RELOAD","RENAME","REPAIR","REPLACE","REPLICATION","RESTRICT","REWRITE","ROLE","ROLES","SCHEMA","SCHEMAS","SECOND","SEMI","SERDE","SERDEPROPERTIES","SERVER","SETS","SHARED","SHOW","SHOW_DATABASE","SKEWED","SORT","SORTED","SSL","STATISTICS","STORED","STREAMTABLE","STRING","STRUCT","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","TINYINT","TOUCH","TRANSACTIONS","UNARCHIVE","UNDO","UNIONTYPE","UNLOCK","UNSET","UNSIGNED","URI","USE","UTC","UTCTIMESTAMP","VALUE_TYPE","VIEW","WHILE","YEAR","AUTOCOMMIT","ISOLATION","LEVEL","OFFSET","SNAPSHOT","TRANSACTION","WORK","WRITE","ABORT","KEY","LAST","NORELY","NOVALIDATE","NULLS","RELY","VALIDATE","DETAIL","DOW","EXPRESSION","OPERATOR","QUARTER","SUMMARY","VECTORIZATION","WEEK","YEARS","MONTHS","WEEKS","DAYS","HOURS","MINUTES","SECONDS","TIMESTAMPTZ","ZONE"],reserved:["ALL","ALTER","AND","ARRAY","AS","AUTHORIZATION","BETWEEN","BIGINT","BINARY","BOOLEAN","BOTH","BY","CASE","CAST","CHAR","COLUMN","CONF","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIMESTAMP","CURSOR","DATABASE","DATE","DECIMAL","DELETE","DESCRIBE","DISTINCT","DOUBLE","DROP","ELSE","END","EXCHANGE","EXISTS","EXTENDED","EXTERNAL","FALSE","FETCH","FLOAT","FOLLOWING","FOR","FROM","FULL","FUNCTION","GRANT","GROUP","GROUPING","HAVING","IF","IMPORT","IN","INNER","INSERT","INT","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LESS","LIKE","LOCAL","MACRO","MAP","MORE","NONE","NOT","NULL","OF","ON","OR","ORDER","OUT","OUTER","OVER","PARTIALSCAN","PARTITION","PERCENT","PRECEDING","PRESERVE","PROCEDURE","RANGE","READS","REDUCE","REVOKE","RIGHT","ROLLUP","ROW","ROWS","SELECT","SET","SMALLINT","TABLE","TABLESAMPLE","THEN","TIMESTAMP","TO","TRANSFORM","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNION","UNIQUEJOIN","UPDATE","USER","USING","UTC_TMESTAMP","VALUES","VARCHAR","WHEN","WHERE","WINDOW","WITH","COMMIT","ONLY","REGEXP","RLIKE","ROLLBACK","START","CACHE","CONSTRAINT","FOREIGN","PRIMARY","REFERENCES","DAYOFWEEK","EXTRACT","FLOOR","INTEGER","PRECISION","VIEWS","TIME","NUMERIC","SYNC"],fileTypes:["TEXTFILE","SEQUENCEFILE","ORC","CSV","TSV","PARQUET","AVRO","RCFILE","JSONFILE","INPUTFORMAT","OUTPUTFORMAT"]}),vT=CT(["SELECT [ALL | DISTINCT]"]),bT=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT INTO [TABLE]","VALUES","UPDATE","SET","DELETE FROM","TRUNCATE [TABLE]","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT [VALUES]","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","RENAME TO","ALTER","CREATE","USE","DESCRIBE","DROP","FETCH","SET SCHEMA","SHOW","STORED AS","STORED BY","ROW FORMAT"]),KT=CT(["UNION [ALL | DISTINCT]"]),xT=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","LEFT SEMI JOIN"]),$T=CT(["{ROWS | RANGE} BETWEEN"]);const wT=fE({all:["ACCESSIBLE","ACCOUNT","ACTION","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALL","ALGORITHM","ALTER","ALWAYS","ANALYZE","AND","ANY","AS","ASC","ASCII","ASENSITIVE","AT","ATOMIC","AUTHORS","AUTO_INCREMENT","AUTOEXTEND_SIZE","AUTO","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BODY","BOOL","BOOLEAN","BOTH","BTREE","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHANGE","CHANGED","CHAR","CHARACTER","CHARSET","CHECK","CHECKPOINT","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLOB","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMN_NAME","COLUMNS","COLUMN_ADD","COLUMN_CHECK","COLUMN_CREATE","COLUMN_DELETE","COLUMN_GET","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPRESSED","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONTRIBUTORS","CONVERT","CPU","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_POS","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","CYCLE","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELETE_DOMAIN_ID","DESC","DESCRIBE","DES_KEY_FILE","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DO_DOMAIN_IDS","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","ELSIF","EMPTY","ENABLE","ENCLOSED","END","ENDS","ENGINE","ENGINES","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXAMINED","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXCEPTION","EXISTS","EXIT","EXPANSION","EXPIRE","EXPORT","EXPLAIN","EXTENDED","EXTENT_SIZE","FALSE","FAST","FAULTS","FEDERATED","FETCH","FIELDS","FILE","FIRST","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GET_FORMAT","GET","GLOBAL","GOTO","GRANT","GRANTS","GROUP","HANDLER","HARD","HASH","HAVING","HELP","HIGH_PRIORITY","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORED","IGNORE_DOMAIN_IDS","IGNORE_SERVER_IDS","IMMEDIATE","IMPORT","INTERSECT","IN","INCREMENT","INDEX","INDEXES","INFILE","INITIAL_SIZE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERVAL","INVISIBLE","INTO","IO","IO_THREAD","IPC","IS","ISOLATION","ISOPEN","ISSUER","ITERATE","INVOKER","JOIN","JSON","JSON_TABLE","KEY","KEYS","KEY_BLOCK_SIZE","KILL","LANGUAGE","LAST","LAST_VALUE","LASTVAL","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_GTID_POS","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_SERVER_ID","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_USER","MASTER_USE_GTID","MASTER_HEARTBEAT_PERIOD","MATCH","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_STATEMENT_TIME","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MAXVALUE","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUS","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONITOR","MONTH","MUTEX","MYSQL","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NESTED","NEVER","NEW","NEXT","NEXTVAL","NO","NOMAXVALUE","NOMINVALUE","NOCACHE","NOCYCLE","NO_WAIT","NOWAIT","NODEGROUP","NONE","NOT","NOTFOUND","NO_WRITE_TO_BINLOG","NULL","NUMBER","NUMERIC","NVARCHAR","OF","OFFSET","OLD_PASSWORD","ON","ONE","ONLINE","ONLY","OPEN","OPTIMIZE","OPTIONS","OPTION","OPTIONALLY","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OUTFILE","OVER","OVERLAPS","OWNER","PACKAGE","PACK_KEYS","PAGE","PAGE_CHECKSUM","PARSER","PARSE_VCOL_EXPR","PATH","PERIOD","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PERSISTENT","PHASE","PLUGIN","PLUGINS","PORT","PORTION","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PREVIOUS","PRIMARY","PRIVILEGES","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RAISE","RANGE","RAW","READ","READ_ONLY","READ_WRITE","READS","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDOFILE","REDUNDANT","REFERENCES","REGEXP","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEATABLE","REPLACE","REPLAY","REPLICA","REPLICAS","REPLICA_POS","REPLICATION","REPEAT","REQUIRE","RESET","RESIGNAL","RESTART","RESTORE","RESTRICT","RESUME","RETURNED_SQLSTATE","RETURN","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROW","ROWCOUNT","ROWNUM","ROWS","ROWTYPE","ROW_COUNT","ROW_FORMAT","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMA_NAME","SCHEMAS","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SEQUENCE","SERIAL","SERIALIZABLE","SESSION","SERVER","SET","SETVAL","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLAVES","SLAVE_POS","SLOW","SNAPSHOT","SMALLINT","SOCKET","SOFT","SOME","SONAME","SOUNDS","SOURCE","STAGE","STORED","SPATIAL","SPECIFIC","REF_SYSTEM_ID","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_SECOND","SQL_TSI_MINUTE","SQL_TSI_HOUR","SQL_TSI_DAY","SQL_TSI_WEEK","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_YEAR","SSL","START","STARTING","STARTS","STATEMENT","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STRAIGHT_JOIN","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSDATE","SYSTEM","SYSTEM_TIME","TABLE","TABLE_NAME","TABLES","TABLESPACE","TABLE_CHECKSUM","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRANSACTION","TRANSACTIONAL","THREADS","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO_BUFFER_SIZE","UNDOFILE","UNDO","UNICODE","UNION","UNIQUE","UNKNOWN","UNLOCK","UNINSTALL","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARCHAR2","VARIABLES","VARYING","VIA","VIEW","VIRTUAL","VISIBLE","VERSIONING","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","X509","XOR","XA","XML","YEAR","YEAR_MONTH","ZEROFILL"]}),kT=fE({all:["ADDDATE","ADD_MONTHS","BIT_AND","BIT_OR","BIT_XOR","CAST","COUNT","CUME_DIST","CURDATE","CURTIME","DATE_ADD","DATE_SUB","DATE_FORMAT","DECODE","DENSE_RANK","EXTRACT","FIRST_VALUE","GROUP_CONCAT","JSON_ARRAYAGG","JSON_OBJECTAGG","LAG","LEAD","MAX","MEDIAN","MID","MIN","NOW","NTH_VALUE","NTILE","POSITION","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","ROW_NUMBER","SESSION_USER","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUBDATE","SUBSTR","SUBSTRING","SUM","SYSTEM_USER","TRIM","TRIM_ORACLE","VARIANCE","VAR_POP","VAR_SAMP","ABS","ACOS","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ASIN","ATAN","ATAN2","BENCHMARK","BIN","BINLOG_GTID_POS","BIT_COUNT","BIT_LENGTH","CEIL","CEILING","CHARACTER_LENGTH","CHAR_LENGTH","CHR","COERCIBILITY","COLUMN_CHECK","COLUMN_EXISTS","COLUMN_LIST","COLUMN_JSON","COMPRESS","CONCAT","CONCAT_OPERATOR_ORACLE","CONCAT_WS","CONNECTION_ID","CONV","CONVERT_TZ","COS","COT","CRC32","DATEDIFF","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEGREES","DECODE_HISTOGRAM","DECODE_ORACLE","DES_DECRYPT","DES_ENCRYPT","ELT","ENCODE","ENCRYPT","EXP","EXPORT_SET","EXTRACTVALUE","FIELD","FIND_IN_SET","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GET_LOCK","GREATEST","HEX","IFNULL","INSTR","ISNULL","IS_FREE_LOCK","IS_USED_LOCK","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_COMPACT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_DETAILED","JSON_EXISTS","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_LOOSE","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_QUERY","JSON_QUOTE","JSON_OBJECT","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_SEARCH","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAST_DAY","LAST_INSERT_ID","LCASE","LEAST","LENGTH","LENGTHB","LN","LOAD_FILE","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LPAD_ORACLE","LTRIM","LTRIM_ORACLE","MAKEDATE","MAKETIME","MAKE_SET","MASTER_GTID_WAIT","MASTER_POS_WAIT","MD5","MONTHNAME","NAME_CONST","NVL","NVL2","OCT","OCTET_LENGTH","ORD","PERIOD_ADD","PERIOD_DIFF","PI","POW","POWER","QUOTE","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","RADIANS","RAND","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPLACE_ORACLE","REVERSE","ROUND","RPAD","RPAD_ORACLE","RTRIM","RTRIM_ORACLE","SEC_TO_TIME","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SPACE","SQRT","STRCMP","STR_TO_DATE","SUBSTR_ORACLE","SUBSTRING_INDEX","SUBTIME","SYS_GUID","TAN","TIMEDIFF","TIME_FORMAT","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_SECONDS","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UUID","UUID_SHORT","VERSION","WEEKDAY","WEEKOFYEAR","WSREP_LAST_WRITTEN_GTID","WSREP_LAST_SEEN_GTID","WSREP_SYNC_WAIT_UPTO_GTID","YEARWEEK","COALESCE","NULLIF","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","BIT","BINARY","BLOB","CHAR","NATIONAL CHAR","CHAR BYTE","ENUM","VARBINARY","VARCHAR","NATIONAL VARCHAR","TIME","DATETIME","TIMESTAMP","YEAR"]}),JT=CT(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),ZT=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","UPDATE [LOW_PRIORITY] [IGNORE]","SET","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","TRUNCATE [TABLE]","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]","ADD [COLUMN] [IF NOT EXISTS]","{CHANGE | MODIFY} [COLUMN] [IF EXISTS]","DROP [COLUMN] [IF EXISTS]","RENAME [TO]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","SET {VISIBLE | INVISIBLE}","ALTER DATABASE","ALTER DATABASE COMMENT","ALTER EVENT","ALTER FUNCTION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SCHEMA COMMENT","ALTER SEQUENCE","ALTER SERVER","ALTER USER","ALTER VIEW","ANALYZE","ANALYZE TABLE","BACKUP LOCK","BACKUP STAGE","BACKUP UNLOCK","BEGIN","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHECK TABLE","CHECK VIEW","CHECKSUM TABLE","COMMIT","CREATE AGGREGATE FUNCTION","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE INDEX","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE SERVER","CREATE SPATIAL INDEX","CREATE TRIGGER","CREATE UNIQUE INDEX","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DO","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP INDEX","DROP PREPARE","DROP PROCEDURE","DROP ROLE","DROP SEQUENCE","DROP SERVER","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GET DIAGNOSTICS","GET DIAGNOSTICS CONDITION","GRANT","HANDLER","HELP","INSTALL PLUGIN","INSTALL SONAME","KILL","LOAD DATA INFILE","LOAD INDEX INTO CACHE","LOAD XML INFILE","LOCK TABLE","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","PURGE MASTER LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","REPAIR VIEW","RESET MASTER","RESET QUERY CACHE","RESET REPLICA","RESET SLAVE","RESIGNAL","RETURNING","REVOKE","ROLLBACK","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET GLOBAL TRANSACTION","SET NAMES","SET PASSWORD","SET ROLE","SET STATEMENT","SET TRANSACTION","SHOW","SHOW ALL REPLICAS STATUS","SHOW ALL SLAVES STATUS","SHOW AUTHORS","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW BINLOG STATUS","SHOW CHARACTER SET","SHOW CLIENT_STATISTICS","SHOW COLLATION","SHOW COLUMNS","SHOW CONTRIBUTORS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PACKAGE","SHOW CREATE PACKAGE BODY","SHOW CREATE PROCEDURE","SHOW CREATE SEQUENCE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINE INNODB STATUS","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW EXPLAIN","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW INDEXES","SHOW INDEX_STATISTICS","SHOW KEYS","SHOW LOCALES","SHOW MASTER LOGS","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PACKAGE BODY CODE","SHOW PACKAGE BODY STATUS","SHOW PACKAGE STATUS","SHOW PLUGINS","SHOW PLUGINS SONAME","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW QUERY_RESPONSE_TIME","SHOW RELAYLOG EVENTS","SHOW REPLICA","SHOW REPLICA HOSTS","SHOW REPLICA STATUS","SHOW SCHEMAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW SLAVE STATUS","SHOW STATUS","SHOW STORAGE ENGINES","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW USER_STATISTICS","SHOW VARIABLES","SHOW WARNINGS","SHOW WSREP_MEMBERSHIP","SHOW WSREP_STATUS","SHUTDOWN","SIGNAL","START ALL REPLICAS","START ALL SLAVES","START REPLICA","START SLAVE","START TRANSACTION","STOP ALL REPLICAS","STOP ALL SLAVES","STOP REPLICA","STOP SLAVE","UNINSTALL PLUGIN","UNINSTALL SONAME","UNLOCK TABLE","USE","XA BEGIN","XA COMMIT","XA END","XA PREPARE","XA RECOVER","XA ROLLBACK","XA START"]),QT=CT(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]","MINUS [ALL | DISTINCT]"]),qT=CT(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),jT=CT(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]);function zT(E){return E.map(((T,e)=>{const R=E[e+1]||AE;return tE.SET(T)&&"("===R.text?{...T,type:eE.RESERVED_FUNCTION_NAME}:T}))}const Ee=fE({all:["ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALL","ALTER","ALWAYS","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASCII","ASENSITIVE","AT","ATTRIBUTE","AUTHENTICATION","AUTOEXTEND_SIZE","AUTO_INCREMENT","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BOOL","BOOLEAN","BOTH","BTREE","BUCKETS","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHALLENGE_RESPONSE","CHANGE","CHANGED","CHANNEL","CHAR","CHARACTER","CHARSET","CHECK","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLONE","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMNS","COLUMN_FORMAT","COLUMN_NAME","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPONENT","COMPRESSED","COMPRESSION","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONVERT","CPU","CREATE","CROSS","CUBE","CUME_DIST","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULT_AUTH","DEFINER","DEFINITION","DELAYED","DELAY_KEY_WRITE","DELETE","DENSE_RANK","DESC","DESCRIBE","DESCRIPTION","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","EMPTY","ENABLE","ENCLOSED","ENCRYPTION","END","ENDS","ENFORCED","ENGINE","ENGINES","ENGINE_ATTRIBUTE","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXISTS","EXIT","EXPANSION","EXPIRE","EXPLAIN","EXPORT","EXTENDED","EXTENT_SIZE","FACTOR","FAILED_LOGIN_ATTEMPTS","FALSE","FAST","FAULTS","FETCH","FIELDS","FILE","FILE_BLOCK_SIZE","FILTER","FINISH","FIRST","FIRST_VALUE","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GEOMCOLLECTION","GEOMETRY","GEOMETRYCOLLECTION","GET","GET_FORMAT","GET_MASTER_PUBLIC_KEY","GET_SOURCE_PUBLIC_KEY","GLOBAL","GRANT","GRANTS","GROUP","GROUPING","GROUPS","GROUP_REPLICATION","GTID_ONLY","HANDLER","HASH","HAVING","HELP","HIGH_PRIORITY","HISTOGRAM","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORE_SERVER_IDS","IMPORT","IN","INACTIVE","INDEX","INDEXES","INFILE","INITIAL","INITIAL_SIZE","INITIATE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INSTANCE","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERSECT","INTERVAL","INTO","INVISIBLE","INVOKER","IO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IO_THREAD","IPC","IS","ISOLATION","ISSUER","ITERATE","JOIN","JSON","JSON_TABLE","JSON_VALUE","KEY","KEYRING","KEYS","KEY_BLOCK_SIZE","KILL","LAG","LANGUAGE","LAST","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LINESTRING","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_AUTO_POSITION","MASTER_BIND","MASTER_COMPRESSION_ALGORITHMS","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_PUBLIC_KEY_PATH","MASTER_RETRY_COUNT","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_TLS_CIPHERSUITES","MASTER_TLS_VERSION","MASTER_USER","MASTER_ZSTD_COMPRESSION_LEVEL","MATCH","MAXVALUE","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONTH","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NDB","NDBCLUSTER","NESTED","NETWORK_NAMESPACE","NEVER","NEW","NEXT","NO","NODEGROUP","NONE","NOT","NOWAIT","NO_WAIT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","NULLS","NUMBER","NUMERIC","NVARCHAR","OF","OFF","OFFSET","OJ","OLD","ON","ONE","ONLY","OPEN","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONAL","OPTIONALLY","OPTIONS","OR","ORDER","ORDINALITY","ORGANIZATION","OTHERS","OUT","OUTER","OUTFILE","OVER","OWNER","PACK_KEYS","PAGE","PARSER","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PASSWORD_LOCK_TIME","PATH","PERCENT_RANK","PERSIST","PERSIST_ONLY","PHASE","PLUGIN","PLUGINS","PLUGIN_DIR","POINT","POLYGON","PORT","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PRIMARY","PRIVILEGES","PRIVILEGE_CHECKS_USER","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RANDOM","RANGE","RANK","READ","READS","READ_ONLY","READ_WRITE","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDUNDANT","REFERENCE","REFERENCES","REGEXP","REGISTRATION","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEAT","REPEATABLE","REPLACE","REPLICA","REPLICAS","REPLICATE_DO_DB","REPLICATE_DO_TABLE","REPLICATE_IGNORE_DB","REPLICATE_IGNORE_TABLE","REPLICATE_REWRITE_DB","REPLICATE_WILD_DO_TABLE","REPLICATE_WILD_IGNORE_TABLE","REPLICATION","REQUIRE","REQUIRE_ROW_FORMAT","RESET","RESIGNAL","RESOURCE","RESPECT","RESTART","RESTORE","RESTRICT","RESUME","RETAIN","RETURN","RETURNED_SQLSTATE","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROTATE","ROUTINE","ROW","ROWS","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMAS","SCHEMA_NAME","SECOND","SECONDARY","SECONDARY_ENGINE","SECONDARY_ENGINE_ATTRIBUTE","SECONDARY_LOAD","SECONDARY_UNLOAD","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SERIAL","SERIALIZABLE","SERVER","SESSION","SET","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLOW","SMALLINT","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SOURCE_AUTO_POSITION","SOURCE_BIND","SOURCE_COMPRESSION_ALGORITHMS","SOURCE_CONNECT_RETRY","SOURCE_DELAY","SOURCE_HEARTBEAT_PERIOD","SOURCE_HOST","SOURCE_LOG_FILE","SOURCE_LOG_POS","SOURCE_PASSWORD","SOURCE_PORT","SOURCE_PUBLIC_KEY_PATH","SOURCE_RETRY_COUNT","SOURCE_SSL","SOURCE_SSL_CA","SOURCE_SSL_CAPATH","SOURCE_SSL_CERT","SOURCE_SSL_CIPHER","SOURCE_SSL_CRL","SOURCE_SSL_CRLPATH","SOURCE_SSL_KEY","SOURCE_SSL_VERIFY_SERVER_CERT","SOURCE_TLS_CIPHERSUITES","SOURCE_TLS_VERSION","SOURCE_USER","SOURCE_ZSTD_COMPRESSION_LEVEL","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","SSL","STACKED","START","STARTING","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STORED","STRAIGHT_JOIN","STREAM","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSTEM","TABLE","TABLES","TABLESPACE","TABLE_CHECKSUM","TABLE_NAME","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","THREAD_PRIORITY","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TLS","TO","TRAILING","TRANSACTION","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNDOFILE","UNDO_BUFFER_SIZE","UNICODE","UNINSTALL","UNION","UNIQUE","UNKNOWN","UNLOCK","UNREGISTER","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALIDATION","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARYING","VCPU","VIEW","VIRTUAL","VISIBLE","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHOUT","WORK","WRAPPER","WRITE","X509","XA","XID","XML","XOR","YEAR","YEAR_MONTH","ZEROFILL","ZONE"]}),Te=fE({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BINARY","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","CAN_ACCESS_COLUMN","CAN_ACCESS_DATABASE","CAN_ACCESS_TABLE","CAN_ACCESS_USER","CAN_ACCESS_VIEW","CAST","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEFAULT","DEGREES","DENSE_RANK","DIV","ELT","EXP","EXPORT_SET","EXTRACT","EXTRACTVALUE","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_PICO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_DD_COLUMN_PRIVILEGES","GET_DD_CREATE_OPTIONS","GET_DD_INDEX_SUB_PART_LENGTH","GET_FORMAT","GET_LOCK","GREATEST","GROUP_CONCAT","GROUPING","GTID_SUBSET","GTID_SUBTRACT","HEX","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INSERT","INSTR","INTERNAL_AUTO_INCREMENT","INTERNAL_AVG_ROW_LENGTH","INTERNAL_CHECK_TIME","INTERNAL_CHECKSUM","INTERNAL_DATA_FREE","INTERNAL_DATA_LENGTH","INTERNAL_DD_CHAR_LENGTH","INTERNAL_GET_COMMENT_OR_ERROR","INTERNAL_GET_ENABLED_ROLE_JSON","INTERNAL_GET_HOSTNAME","INTERNAL_GET_USERNAME","INTERNAL_GET_VIEW_WARNING_OR_ERROR","INTERNAL_INDEX_COLUMN_CARDINALITY","INTERNAL_INDEX_LENGTH","INTERNAL_IS_ENABLED_ROLE","INTERNAL_IS_MANDATORY_ROLE","INTERNAL_KEYS_DISABLED","INTERNAL_MAX_DATA_LENGTH","INTERNAL_TABLE_ROWS","INTERNAL_UPDATE_TIME","INTERVAL","IS","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS NOT","IS NOT NULL","IS NULL","IS_USED_LOCK","IS_UUID","ISNULL","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_ARRAYAGG","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SCHEMA_VALID","JSON_SCHEMA_VALIDATION_REPORT","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TABLE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LINESTRING","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MATCH","MAX","MBRCONTAINS","MBRCOVEREDBY","MBRCOVERS","MBRDISJOINT","MBREQUALS","MBRINTERSECTS","MBROVERLAPS","MBRTOUCHES","MBRWITHIN","MD5","MEMBER OF","MICROSECOND","MID","MIN","MINUTE","MOD","MONTH","MONTHNAME","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","NAME_CONST","NOT","NOT IN","NOT LIKE","NOT REGEXP","NOW","NTH_VALUE","NTILE","NULLIF","OCT","OCTET_LENGTH","ORD","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","POINT","POLYGON","POSITION","POW","POWER","PS_CURRENT_THREAD_ID","PS_THREAD_ID","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROLES_GRAPHML","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_BUFFER","ST_BUFFER_STRATEGY","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_CONVEXHULL","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DISTANCE_SPHERE","ST_ENDPOINT","ST_ENVELOPE","ST_EQUALS","ST_EXTERIORRING","ST_FRECHETDISTANCE","ST_GEOHASH","ST_GEOMCOLLFROMTEXT","ST_GEOMCOLLFROMWKB","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMGEOJSON","ST_GEOMFROMTEXT","ST_GEOMFROMWKB","ST_HAUSDORFFDISTANCE","ST_INTERIORRINGN","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISSIMPLE","ST_ISVALID","ST_LATFROMGEOHASH","ST_LATITUDE","ST_LENGTH","ST_LINEFROMTEXT","ST_LINEFROMWKB","ST_LINEINTERPOLATEPOINT","ST_LINEINTERPOLATEPOINTS","ST_LONGFROMGEOHASH","ST_LONGITUDE","ST_MAKEENVELOPE","ST_MLINEFROMTEXT","ST_MLINEFROMWKB","ST_MPOINTFROMTEXT","ST_MPOINTFROMWKB","ST_MPOLYFROMTEXT","ST_MPOLYFROMWKB","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINTATDISTANCE","ST_POINTFROMGEOHASH","ST_POINTFROMTEXT","ST_POINTFROMWKB","ST_POINTN","ST_POLYFROMTEXT","ST_POLYFROMWKB","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SWAPXY","ST_SYMDIFFERENCE","ST_TOUCHES","ST_TRANSFORM","ST_UNION","ST_VALIDATE","ST_WITHIN","ST_X","ST_Y","STATEMENT_DIGEST","STATEMENT_DIGEST_TEXT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRIM","TRUNCATE","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VALUES","VAR_POP","VAR_SAMP","VARIANCE","VERSION","WAIT_FOR_EXECUTED_GTID_SET","WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]}),ee=CT(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),Re=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","UPDATE [LOW_PRIORITY] [IGNORE]","SET","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","TRUNCATE [TABLE]","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] TABLE [IF NOT EXISTS]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","ALTER DATABASE","ALTER EVENT","ALTER FUNCTION","ALTER INSTANCE","ALTER LOGFILE GROUP","ALTER PROCEDURE","ALTER RESOURCE GROUP","ALTER SERVER","ALTER TABLESPACE","ALTER USER","ALTER VIEW","ANALYZE TABLE","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK TABLE","CHECKSUM TABLE","CLONE","COMMIT","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE FUNCTION","CREATE INDEX","CREATE LOGFILE GROUP","CREATE PROCEDURE","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SERVER","CREATE SPATIAL REFERENCE SYSTEM","CREATE TABLESPACE","CREATE TRIGGER","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DO","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP FUNCTION","DROP INDEX","DROP LOGFILE GROUP","DROP PROCEDURE","DROP RESOURCE GROUP","DROP ROLE","DROP SERVER","DROP SPATIAL REFERENCE SYSTEM","DROP TABLESPACE","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GRANT","HANDLER","HELP","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SOURCE_POS_WAIT","START GROUP_REPLICATION","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP REPLICA","STOP SLAVE","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),Ae=CT(["UNION [ALL | DISTINCT]"]),Se=CT(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),te=CT(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]);function Ie(E){return E.map(((T,e)=>{const R=E[e+1]||AE;return tE.SET(T)&&"("===R.text?{...T,type:eE.RESERVED_FUNCTION_NAME}:T}))}const Oe=fE({all:["ABORT","ABS","ACOS","ADVISOR","ARRAY_AGG","ARRAY_AGG","ARRAY_APPEND","ARRAY_AVG","ARRAY_BINARY_SEARCH","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COUNT","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_FLATTEN","ARRAY_IFNULL","ARRAY_INSERT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_MAX","ARRAY_MIN","ARRAY_MOVE","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUT","ARRAY_RANGE","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_REPLACE","ARRAY_REVERSE","ARRAY_SORT","ARRAY_STAR","ARRAY_SUM","ARRAY_SYMDIFF","ARRAY_SYMDIFF1","ARRAY_SYMDIFFN","ARRAY_UNION","ASIN","ATAN","ATAN2","AVG","BASE64","BASE64_DECODE","BASE64_ENCODE","BITAND ","BITCLEAR ","BITNOT ","BITOR ","BITSET ","BITSHIFT ","BITTEST ","BITXOR ","CEIL","CLOCK_LOCAL","CLOCK_MILLIS","CLOCK_STR","CLOCK_TZ","CLOCK_UTC","COALESCE","CONCAT","CONCAT2","CONTAINS","CONTAINS_TOKEN","CONTAINS_TOKEN_LIKE","CONTAINS_TOKEN_REGEXP","COS","COUNT","COUNT","COUNTN","CUME_DIST","CURL","DATE_ADD_MILLIS","DATE_ADD_STR","DATE_DIFF_MILLIS","DATE_DIFF_STR","DATE_FORMAT_STR","DATE_PART_MILLIS","DATE_PART_STR","DATE_RANGE_MILLIS","DATE_RANGE_STR","DATE_TRUNC_MILLIS","DATE_TRUNC_STR","DECODE","DECODE_JSON","DEGREES","DENSE_RANK","DURATION_TO_STR","ENCODED_SIZE","ENCODE_JSON","EXP","FIRST_VALUE","FLOOR","GREATEST","HAS_TOKEN","IFINF","IFMISSING","IFMISSINGORNULL","IFNAN","IFNANORINF","IFNULL","INITCAP","ISARRAY","ISATOM","ISBITSET","ISBOOLEAN","ISNUMBER","ISOBJECT","ISSTRING","LAG","LAST_VALUE","LEAD","LEAST","LENGTH","LN","LOG","LOWER","LTRIM","MAX","MEAN","MEDIAN","META","MILLIS","MILLIS_TO_LOCAL","MILLIS_TO_STR","MILLIS_TO_TZ","MILLIS_TO_UTC","MILLIS_TO_ZONE_NAME","MIN","MISSINGIF","NANIF","NEGINFIF","NOW_LOCAL","NOW_MILLIS","NOW_STR","NOW_TZ","NOW_UTC","NTH_VALUE","NTILE","NULLIF","NVL","NVL2","OBJECT_ADD","OBJECT_CONCAT","OBJECT_INNER_PAIRS","OBJECT_INNER_VALUES","OBJECT_LENGTH","OBJECT_NAMES","OBJECT_PAIRS","OBJECT_PUT","OBJECT_REMOVE","OBJECT_RENAME","OBJECT_REPLACE","OBJECT_UNWRAP","OBJECT_VALUES","PAIRS","PERCENT_RANK","PI","POLY_LENGTH","POSINFIF","POSITION","POWER","RADIANS","RANDOM","RANK","RATIO_TO_REPORT","REGEXP_CONTAINS","REGEXP_LIKE","REGEXP_MATCHES","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGEX_CONTAINS","REGEX_LIKE","REGEX_MATCHES","REGEX_POSITION","REGEX_REPLACE","REGEX_SPLIT","REPEAT","REPLACE","REVERSE","ROUND","ROW_NUMBER","RTRIM","SEARCH","SEARCH_META","SEARCH_SCORE","SIGN","SIN","SPLIT","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DURATION","STR_TO_MILLIS","STR_TO_TZ","STR_TO_UTC","STR_TO_ZONE_NAME","SUBSTR","SUFFIXES","SUM","TAN","TITLE","TOARRAY","TOATOM","TOBOOLEAN","TOKENS","TOKENS","TONUMBER","TOOBJECT","TOSTRING","TRIM","TRUNC","UPPER","UUID","VARIANCE","VARIANCE_POP","VARIANCE_SAMP","VAR_POP","VAR_SAMP","WEEKDAY_MILLIS","WEEKDAY_STR","CAST"]}),Ne=fE({all:["ADVISE","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","BEGIN","BETWEEN","BINARY","BOOLEAN","BREAK","BUCKET","BUILD","BY","CALL","CASE","CAST","CLUSTER","COLLATE","COLLECTION","COMMIT","COMMITTED","CONNECT","CONTINUE","CORRELATED","COVER","CREATE","CURRENT","DATABASE","DATASET","DATASTORE","DECLARE","DECREMENT","DELETE","DERIVED","DESC","DESCRIBE","DISTINCT","DO","DROP","EACH","ELEMENT","ELSE","END","EVERY","EXCEPT","EXCLUDE","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FILTER","FIRST","FLATTEN","FLUSH","FOLLOWING","FOR","FORCE","FROM","FTS","FUNCTION","GOLANG","GRANT","GROUP","GROUPS","GSI","HASH","HAVING","IF","ISOLATION","IGNORE","ILIKE","IN","INCLUDE","INCREMENT","INDEX","INFER","INLINE","INNER","INSERT","INTERSECT","INTO","IS","JAVASCRIPT","JOIN","KEY","KEYS","KEYSPACE","KNOWN","LANGUAGE","LAST","LEFT","LET","LETTING","LEVEL","LIKE","LIMIT","LSM","MAP","MAPPING","MATCHED","MATERIALIZED","MERGE","MINUS","MISSING","NAMESPACE","NEST","NL","NO","NOT","NTH_VALUE","NULL","NULLS","NUMBER","OBJECT","OFFSET","ON","OPTION","OPTIONS","OR","ORDER","OTHERS","OUTER","OVER","PARSE","PARTITION","PASSWORD","PATH","POOL","PRECEDING","PREPARE","PRIMARY","PRIVATE","PRIVILEGE","PROBE","PROCEDURE","PUBLIC","RANGE","RAW","REALM","REDUCE","RENAME","RESPECT","RETURN","RETURNING","REVOKE","RIGHT","ROLE","ROLLBACK","ROW","ROWS","SATISFIES","SAVEPOINT","SCHEMA","SCOPE","SELECT","SELF","SEMI","SET","SHOW","SOME","START","STATISTICS","STRING","SYSTEM","THEN","TIES","TO","TRAN","TRANSACTION","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNDER","UNION","UNIQUE","UNKNOWN","UNNEST","UNSET","UPDATE","UPSERT","USE","USER","USING","VALIDATE","VALUE","VALUED","VALUES","VIA","VIEW","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WORK","XOR"]}),se=CT(["SELECT [ALL | DISTINCT]"]),re=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","UPDATE","SET","DELETE FROM","MERGE INTO","WHEN [NOT] MATCHED THEN","UPDATE SET","INSERT","ADVISE","ALTER INDEX","BEGIN TRANSACTION","BUILD INDEX","COMMIT TRANSACTION","CREATE COLLECTION","CREATE FUNCTION","CREATE INDEX","CREATE PRIMARY INDEX","CREATE SCOPE","DROP COLLECTION","DROP FUNCTION","DROP INDEX","DROP PRIMARY INDEX","DROP SCOPE","EXECUTE","EXECUTE FUNCTION","EXPLAIN","GRANT","INFER","PREPARE","RETURNING","REVOKE","ROLLBACK TRANSACTION","SAVEPOINT","SET TRANSACTION","UPDATE STATISTICS","UPSERT","LET","NEST","SET CURRENT SCHEMA","SET SCHEMA","SHOW","UNNEST","USE KEYS"]),_e=CT(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),ne=CT(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","INNER JOIN"]),Le=CT(["{ROWS | RANGE | GROUPS} BETWEEN"]);const Ce=fE({all:["ADD","AGENT","AGGREGATE","ALL","ALTER","AND","ANY","ARRAY","ARROW","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BEGIN","BETWEEN","BFILE_BASE","BINARY","BLOB_BASE","BLOCK","BODY","BOTH","BOUND","BULK","BY","BYTE","CALL","CALLING","CASCADE","CASE","CHAR","CHAR_BASE","CHARACTER","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOB_BASE","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONVERT","COUNT","CRASH","CREATE","CURRENT","CURSOR","CUSTOMDATUM","DANGLING","DATA","DATE","DATE_BASE","DAY","DECIMAL","DECLARE","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DISTINCT","DOUBLE","DROP","DURATION","ELEMENT","ELSE","ELSIF","EMPTY","END","ESCAPE","EXCEPT","EXCEPTION","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FINAL","FIXED","FLOAT","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HAVING","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSERT","INSTANTIABLE","INT","INTERFACE","INTERSECT","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMIT","LIMITED","LOCAL","LOCK","LONG","LOOP","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MOD","MODE","MODIFY","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NCHAR","NEW","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","NUMBER_BASE","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","OR","ORACLE","ORADATA","ORDER","OVERLAPS","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARTITION","PASCAL","PIPE","PIPELINED","PRAGMA","PRECISION","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","RAW","READ","RECORD","REF","REFERENCE","REM","REMAINDER","RENAME","RESOURCE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELECT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SET","SHARE","SHORT","SIZE","SIZE_T","SOME","SPARSE","SQL","SQLCODE","SQLDATA","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUM","SYNONYM","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMESTAMP","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSAC","TRANSACTIONAL","TRUSTED","TYPE","UB1","UB2","UB4","UNDER","UNION","UNIQUE","UNSIGNED","UNTRUSTED","UPDATE","USE","USING","VALIST","VALUE","VALUES","VARIABLE","VARIANCE","VARRAY","VARYING","VIEW","VIEWS","VOID","WHEN","WHERE","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"]}),ae=fE({numeric:["ABS","ACOS","ASIN","ATAN","ATAN2","BITAND","CEIL","COS","COSH","EXP","FLOOR","LN","LOG","MOD","NANVL","POWER","REMAINDER","ROUND","SIGN","SIN","SINH","SQRT","TAN","TANH","TRUNC","WIDTH_BUCKET"],character:["CHR","CONCAT","INITCAP","LOWER","LPAD","LTRIM","NLS_INITCAP","NLS_LOWER","NLSSORT","NLS_UPPER","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","RPAD","RTRIM","SOUNDEX","SUBSTR","TRANSLATE","TREAT","TRIM","UPPER","NLS_CHARSET_DECL_LEN","NLS_CHARSET_ID","NLS_CHARSET_NAME","ASCII","INSTR","LENGTH","REGEXP_INSTR"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_TIMESTAMP","DBTIMEZONE","EXTRACT","FROM_TZ","LAST_DAY","LOCALTIMESTAMP","MONTHS_BETWEEN","NEW_TIME","NEXT_DAY","NUMTODSINTERVAL","NUMTOYMINTERVAL","ROUND","SESSIONTIMEZONE","SYS_EXTRACT_UTC","SYSDATE","SYSTIMESTAMP","TO_CHAR","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_DSINTERVAL","TO_YMINTERVAL","TRUNC","TZ_OFFSET"],comparison:["GREATEST","LEAST"],conversion:["ASCIISTR","BIN_TO_NUM","CAST","CHARTOROWID","COMPOSE","CONVERT","DECOMPOSE","HEXTORAW","NUMTODSINTERVAL","NUMTOYMINTERVAL","RAWTOHEX","RAWTONHEX","ROWIDTOCHAR","ROWIDTONCHAR","SCN_TO_TIMESTAMP","TIMESTAMP_TO_SCN","TO_BINARY_DOUBLE","TO_BINARY_FLOAT","TO_CHAR","TO_CLOB","TO_DATE","TO_DSINTERVAL","TO_LOB","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_DSINTERVAL","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_YMINTERVAL","TO_YMINTERVAL","TRANSLATE","UNISTR"],largeObject:["BFILENAME","EMPTY_BLOB,","EMPTY_CLOB"],collection:["CARDINALITY","COLLECT","POWERMULTISET","POWERMULTISET_BY_CARDINALITY","SET"],hierarchical:["SYS_CONNECT_BY_PATH"],dataMining:["CLUSTER_ID","CLUSTER_PROBABILITY","CLUSTER_SET","FEATURE_ID","FEATURE_SET","FEATURE_VALUE","PREDICTION","PREDICTION_COST","PREDICTION_DETAILS","PREDICTION_PROBABILITY","PREDICTION_SET"],xml:["APPENDCHILDXML","DELETEXML","DEPTH","EXTRACT","EXISTSNODE","EXTRACTVALUE","INSERTCHILDXML","INSERTXMLBEFORE","PATH","SYS_DBURIGEN","SYS_XMLAGG","SYS_XMLGEN","UPDATEXML","XMLAGG","XMLCDATA","XMLCOLATTVAL","XMLCOMMENT","XMLCONCAT","XMLFOREST","XMLPARSE","XMLPI","XMLQUERY","XMLROOT","XMLSEQUENCE","XMLSERIALIZE","XMLTABLE","XMLTRANSFORM"],encoding:["DECODE","DUMP","ORA_HASH","VSIZE"],nullRelated:["COALESCE","LNNVL","NULLIF","NVL","NVL2"],env:["SYS_CONTEXT","SYS_GUID","SYS_TYPEID","UID","USER","USERENV"],aggregate:["AVG","COLLECT","CORR","CORR_S","CORR_K","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","FIRST","GROUP_ID","GROUPING","GROUPING_ID","LAST","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANK","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","STATS_BINOMIAL_TEST","STATS_CROSSTAB","STATS_F_TEST","STATS_KS_TEST","STATS_MODE","STATS_MW_TEST","STATS_ONE_WAY_ANOVA","STATS_T_TEST_ONE","STATS_T_TEST_PAIRED","STATS_T_TEST_INDEP","STATS_T_TEST_INDEPU","STATS_WSR_TEST","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTILE","RATIO_TO_REPORT","ROW_NUMBER"],objectReference:["DEREF","MAKE_REF","REF","REFTOHEX","VALUE"],model:["CV","ITERATION_NUMBER","PRESENTNNV","PRESENTV","PREVIOUS"],dataTypes:["VARCHAR2","NVARCHAR2","NUMBER","FLOAT","TIMESTAMP","INTERVAL YEAR","INTERVAL DAY","RAW","UROWID","NCHAR","CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","NATIONAL CHARACTER","NATIONAL CHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NUMERIC","DECIMAL","FLOAT","VARCHAR"]}),ie=CT(["SELECT [ALL | DISTINCT | UNIQUE]"]),oe=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE","INSERT [INTO | ALL INTO]","VALUES","UPDATE [ONLY]","SET","DELETE FROM [ONLY]","TRUNCATE TABLE","MERGE [INTO]","WHEN [NOT] MATCHED [THEN]","UPDATE SET","CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW","CREATE MATERIALIZED VIEW","CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE","DROP TABLE","ALTER TABLE","ADD","DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}","MODIFY","RENAME TO","RENAME COLUMN","BEGIN","CONNECT BY","DECLARE","EXCEPT","EXCEPTION","LOOP","RETURNING","START WITH","SET SCHEMA"]),Pe=CT(["UNION [ALL]","EXCEPT","INTERSECT"]),De=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | OUTER} APPLY"]),Me=CT(["ON {UPDATE | DELETE} [SET NULL]","ON COMMIT","{ROWS | RANGE} BETWEEN"]);function Ue(E){let T=AE;return E.map((E=>tE.SET(E)&&tE.BY(T)?{...E,type:eE.RESERVED_KEYWORD}:(IE(E.type)&&(T=E),E)))}const le=fE({math:["ABS","ACOS","ACOSD","ACOSH","ASIN","ASIND","ASINH","ATAN","ATAN2","ATAN2D","ATAND","ATANH","CBRT","CEIL","CEILING","COS","COSD","COSH","COT","COTD","DEGREES","DIV","EXP","FACTORIAL","FLOOR","GCD","LCM","LN","LOG","LOG10","MIN_SCALE","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SCALE","SETSEED","SIGN","SIN","SIND","SINH","SQRT","TAN","TAND","TANH","TRIM_SCALE","TRUNC","WIDTH_BUCKET"],string:["ABS","ASCII","BIT_LENGTH","BTRIM","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CONCAT","CONCAT_WS","FORMAT","INITCAP","LEFT","LENGTH","LOWER","LPAD","LTRIM","MD5","NORMALIZE","OCTET_LENGTH","OVERLAY","PARSE_IDENT","PG_CLIENT_ENCODING","POSITION","QUOTE_IDENT","QUOTE_LITERAL","QUOTE_NULLABLE","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REPEAT","REPLACE","REVERSE","RIGHT","RPAD","RTRIM","SPLIT_PART","SPRINTF","STARTS_WITH","STRING_AGG","STRING_TO_ARRAY","STRING_TO_TABLE","STRPOS","SUBSTR","SUBSTRING","TO_ASCII","TO_HEX","TRANSLATE","TRIM","UNISTR","UPPER"],binary:["BIT_COUNT","BIT_LENGTH","BTRIM","CONVERT","CONVERT_FROM","CONVERT_TO","DECODE","ENCODE","GET_BIT","GET_BYTE","LENGTH","LTRIM","MD5","OCTET_LENGTH","OVERLAY","POSITION","RTRIM","SET_BIT","SET_BYTE","SHA224","SHA256","SHA384","SHA512","STRING_AGG","SUBSTR","SUBSTRING","TRIM"],bitstring:["BIT_COUNT","BIT_LENGTH","GET_BIT","LENGTH","OCTET_LENGTH","OVERLAY","POSITION","SET_BIT","SUBSTRING"],pattern:["REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE"],datatype:["TO_CHAR","TO_DATE","TO_NUMBER","TO_TIMESTAMP"],datetime:["CLOCK_TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_BIN","DATE_PART","DATE_TRUNC","EXTRACT","ISFINITE","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","LOCALTIME","LOCALTIMESTAMP","MAKE_DATE","MAKE_INTERVAL","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","NOW","PG_SLEEP","PG_SLEEP_FOR","PG_SLEEP_UNTIL","STATEMENT_TIMESTAMP","TIMEOFDAY","TO_TIMESTAMP","TRANSACTION_TIMESTAMP"],enum:["ENUM_FIRST","ENUM_LAST","ENUM_RANGE"],geometry:["AREA","BOUND_BOX","BOX","CENTER","CIRCLE","DIAGONAL","DIAMETER","HEIGHT","ISCLOSED","ISOPEN","LENGTH","LINE","LSEG","NPOINTS","PATH","PCLOSE","POINT","POLYGON","POPEN","RADIUS","SLOPE","WIDTH"],network:["ABBREV","BROADCAST","FAMILY","HOST","HOSTMASK","INET_MERGE","INET_SAME_FAMILY","MACADDR8_SET7BIT","MASKLEN","NETMASK","NETWORK","SET_MASKLEN","TEXT","TRUNC"],textsearch:["ARRAY_TO_TSVECTOR","GET_CURRENT_TS_CONFIG","JSONB_TO_TSVECTOR","JSON_TO_TSVECTOR","LENGTH","NUMNODE","PHRASETO_TSQUERY","PLAINTO_TSQUERY","QUERYTREE","SETWEIGHT","STRIP","TO_TSQUERY","TO_TSVECTOR","TSQUERY_PHRASE","TSVECTOR_TO_ARRAY","TS_DEBUG","TS_DELETE","TS_FILTER","TS_HEADLINE","TS_LEXIZE","TS_PARSE","TS_RANK","TS_RANK_CD","TS_REWRITE","TS_STAT","TS_TOKEN_TYPE","WEBSEARCH_TO_TSQUERY"],uuid:["UUID"],xml:["CURSOR_TO_XML","CURSOR_TO_XMLSCHEMA","DATABASE_TO_XML","DATABASE_TO_XMLSCHEMA","DATABASE_TO_XML_AND_XMLSCHEMA","NEXTVAL","QUERY_TO_XML","QUERY_TO_XMLSCHEMA","QUERY_TO_XML_AND_XMLSCHEMA","SCHEMA_TO_XML","SCHEMA_TO_XMLSCHEMA","SCHEMA_TO_XML_AND_XMLSCHEMA","STRING","TABLE_TO_XML","TABLE_TO_XMLSCHEMA","TABLE_TO_XML_AND_XMLSCHEMA","XMLAGG","XMLCOMMENT","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","XML_IS_WELL_FORMED","XML_IS_WELL_FORMED_CONTENT","XML_IS_WELL_FORMED_DOCUMENT","XPATH","XPATH_EXISTS"],json:["ARRAY_TO_JSON","JSONB_AGG","JSONB_ARRAY_ELEMENTS","JSONB_ARRAY_ELEMENTS_TEXT","JSONB_ARRAY_LENGTH","JSONB_BUILD_ARRAY","JSONB_BUILD_OBJECT","JSONB_EACH","JSONB_EACH_TEXT","JSONB_EXTRACT_PATH","JSONB_EXTRACT_PATH_TEXT","JSONB_INSERT","JSONB_OBJECT","JSONB_OBJECT_AGG","JSONB_OBJECT_KEYS","JSONB_PATH_EXISTS","JSONB_PATH_EXISTS_TZ","JSONB_PATH_MATCH","JSONB_PATH_MATCH_TZ","JSONB_PATH_QUERY","JSONB_PATH_QUERY_ARRAY","JSONB_PATH_QUERY_ARRAY_TZ","JSONB_PATH_QUERY_FIRST","JSONB_PATH_QUERY_FIRST_TZ","JSONB_PATH_QUERY_TZ","JSONB_POPULATE_RECORD","JSONB_POPULATE_RECORDSET","JSONB_PRETTY","JSONB_SET","JSONB_SET_LAX","JSONB_STRIP_NULLS","JSONB_TO_RECORD","JSONB_TO_RECORDSET","JSONB_TYPEOF","JSON_AGG","JSON_ARRAY_ELEMENTS","JSON_ARRAY_ELEMENTS_TEXT","JSON_ARRAY_LENGTH","JSON_BUILD_ARRAY","JSON_BUILD_OBJECT","JSON_EACH","JSON_EACH_TEXT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_OBJECT","JSON_OBJECT_AGG","JSON_OBJECT_KEYS","JSON_POPULATE_RECORD","JSON_POPULATE_RECORDSET","JSON_STRIP_NULLS","JSON_TO_RECORD","JSON_TO_RECORDSET","JSON_TYPEOF","ROW_TO_JSON","TO_JSON","TO_JSONB","TO_TIMESTAMP"],sequence:["CURRVAL","LASTVAL","NEXTVAL","SETVAL"],conditional:["COALESCE","GREATEST","LEAST","NULLIF"],array:["ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_DIMS","ARRAY_FILL","ARRAY_LENGTH","ARRAY_LOWER","ARRAY_NDIMS","ARRAY_POSITION","ARRAY_POSITIONS","ARRAY_PREPEND","ARRAY_REMOVE","ARRAY_REPLACE","ARRAY_TO_STRING","ARRAY_UPPER","CARDINALITY","STRING_TO_ARRAY","TRIM_ARRAY","UNNEST"],range:["ISEMPTY","LOWER","LOWER_INC","LOWER_INF","MULTIRANGE","RANGE_MERGE","UPPER","UPPER_INC","UPPER_INF"],aggregate:["ARRAY_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COALESCE","CORR","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","EVERY","GROUPING","JSONB_AGG","JSONB_OBJECT_AGG","JSON_AGG","JSON_OBJECT_AGG","MAX","MIN","MODE","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANGE_AGG","RANGE_INTERSECT_AGG","RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","TO_JSON","TO_JSONB","VARIANCE","VAR_POP","VAR_SAMP","XMLAGG"],window:["CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],set:["GENERATE_SERIES","GENERATE_SUBSCRIPTS"],sysInfo:["ACLDEFAULT","ACLEXPLODE","COL_DESCRIPTION","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","FORMAT_TYPE","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HAS_TYPE_PRIVILEGE","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","MAKEACLITEM","OBJ_DESCRIPTION","PG_BACKEND_PID","PG_BLOCKING_PIDS","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONTROL_CHECKPOINT","PG_CONTROL_INIT","PG_CONTROL_SYSTEM","PG_CONVERSION_IS_VISIBLE","PG_CURRENT_LOGFILE","PG_CURRENT_SNAPSHOT","PG_CURRENT_XACT_ID","PG_CURRENT_XACT_ID_IF_ASSIGNED","PG_DESCRIBE_OBJECT","PG_FUNCTION_IS_VISIBLE","PG_GET_CATALOG_FOREIGN_KEYS","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_FUNCTIONDEF","PG_GET_FUNCTION_ARGUMENTS","PG_GET_FUNCTION_IDENTITY_ARGUMENTS","PG_GET_FUNCTION_RESULT","PG_GET_INDEXDEF","PG_GET_KEYWORDS","PG_GET_OBJECT_ADDRESS","PG_GET_OWNED_SEQUENCE","PG_GET_RULEDEF","PG_GET_SERIAL_SEQUENCE","PG_GET_STATISTICSOBJDEF","PG_GET_TRIGGERDEF","PG_GET_USERBYID","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IDENTIFY_OBJECT","PG_IDENTIFY_OBJECT_AS_ADDRESS","PG_INDEXAM_HAS_PROPERTY","PG_INDEX_COLUMN_HAS_PROPERTY","PG_INDEX_HAS_PROPERTY","PG_IS_OTHER_TEMP_SCHEMA","PG_JIT_AVAILABLE","PG_LAST_COMMITTED_XACT","PG_LISTENING_CHANNELS","PG_MY_TEMP_SCHEMA","PG_NOTIFICATION_QUEUE_USAGE","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_OPTIONS_TO_TABLE","PG_POSTMASTER_START_TIME","PG_SAFE_SNAPSHOT_BLOCKING_PIDS","PG_SNAPSHOT_XIP","PG_SNAPSHOT_XMAX","PG_SNAPSHOT_XMIN","PG_STATISTICS_OBJ_IS_VISIBLE","PG_TABLESPACE_DATABASES","PG_TABLESPACE_LOCATION","PG_TABLE_IS_VISIBLE","PG_TRIGGER_DEPTH","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PG_VISIBLE_IN_SNAPSHOT","PG_XACT_COMMIT_TIMESTAMP","PG_XACT_COMMIT_TIMESTAMP_ORIGIN","PG_XACT_STATUS","PQSERVERVERSION","ROW_SECURITY_ACTIVE","SESSION_USER","SHOBJ_DESCRIPTION","TO_REGCLASS","TO_REGCOLLATION","TO_REGNAMESPACE","TO_REGOPER","TO_REGOPERATOR","TO_REGPROC","TO_REGPROCEDURE","TO_REGROLE","TO_REGTYPE","TXID_CURRENT","TXID_CURRENT_IF_ASSIGNED","TXID_CURRENT_SNAPSHOT","TXID_SNAPSHOT_XIP","TXID_SNAPSHOT_XMAX","TXID_SNAPSHOT_XMIN","TXID_STATUS","TXID_VISIBLE_IN_SNAPSHOT","USER","VERSION"],sysAdmin:["BRIN_DESUMMARIZE_RANGE","BRIN_SUMMARIZE_NEW_VALUES","BRIN_SUMMARIZE_RANGE","CONVERT_FROM","CURRENT_SETTING","GIN_CLEAN_PENDING_LIST","PG_ADVISORY_LOCK","PG_ADVISORY_LOCK_SHARED","PG_ADVISORY_UNLOCK","PG_ADVISORY_UNLOCK_ALL","PG_ADVISORY_UNLOCK_SHARED","PG_ADVISORY_XACT_LOCK","PG_ADVISORY_XACT_LOCK_SHARED","PG_BACKUP_START_TIME","PG_CANCEL_BACKEND","PG_COLLATION_ACTUAL_VERSION","PG_COLUMN_COMPRESSION","PG_COLUMN_SIZE","PG_COPY_LOGICAL_REPLICATION_SLOT","PG_COPY_PHYSICAL_REPLICATION_SLOT","PG_CREATE_LOGICAL_REPLICATION_SLOT","PG_CREATE_PHYSICAL_REPLICATION_SLOT","PG_CREATE_RESTORE_POINT","PG_CURRENT_WAL_FLUSH_LSN","PG_CURRENT_WAL_INSERT_LSN","PG_CURRENT_WAL_LSN","PG_DATABASE_SIZE","PG_DROP_REPLICATION_SLOT","PG_EXPORT_SNAPSHOT","PG_FILENODE_RELATION","PG_GET_WAL_REPLAY_PAUSE_STATE","PG_IMPORT_SYSTEM_COLLATIONS","PG_INDEXES_SIZE","PG_IS_IN_BACKUP","PG_IS_IN_RECOVERY","PG_IS_WAL_REPLAY_PAUSED","PG_LAST_WAL_RECEIVE_LSN","PG_LAST_WAL_REPLAY_LSN","PG_LAST_XACT_REPLAY_TIMESTAMP","PG_LOGICAL_EMIT_MESSAGE","PG_LOGICAL_SLOT_GET_BINARY_CHANGES","PG_LOGICAL_SLOT_GET_CHANGES","PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES","PG_LOGICAL_SLOT_PEEK_CHANGES","PG_LOG_BACKEND_MEMORY_CONTEXTS","PG_LS_ARCHIVE_STATUSDIR","PG_LS_DIR","PG_LS_LOGDIR","PG_LS_TMPDIR","PG_LS_WALDIR","PG_PARTITION_ANCESTORS","PG_PARTITION_ROOT","PG_PARTITION_TREE","PG_PROMOTE","PG_READ_BINARY_FILE","PG_READ_FILE","PG_RELATION_FILENODE","PG_RELATION_FILEPATH","PG_RELATION_SIZE","PG_RELOAD_CONF","PG_REPLICATION_ORIGIN_ADVANCE","PG_REPLICATION_ORIGIN_CREATE","PG_REPLICATION_ORIGIN_DROP","PG_REPLICATION_ORIGIN_OID","PG_REPLICATION_ORIGIN_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_IS_SETUP","PG_REPLICATION_ORIGIN_SESSION_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_RESET","PG_REPLICATION_ORIGIN_SESSION_SETUP","PG_REPLICATION_ORIGIN_XACT_RESET","PG_REPLICATION_ORIGIN_XACT_SETUP","PG_REPLICATION_SLOT_ADVANCE","PG_ROTATE_LOGFILE","PG_SIZE_BYTES","PG_SIZE_PRETTY","PG_START_BACKUP","PG_STAT_FILE","PG_STOP_BACKUP","PG_SWITCH_WAL","PG_TABLESPACE_SIZE","PG_TABLE_SIZE","PG_TERMINATE_BACKEND","PG_TOTAL_RELATION_SIZE","PG_TRY_ADVISORY_LOCK","PG_TRY_ADVISORY_LOCK_SHARED","PG_TRY_ADVISORY_XACT_LOCK","PG_TRY_ADVISORY_XACT_LOCK_SHARED","PG_WALFILE_NAME","PG_WALFILE_NAME_OFFSET","PG_WAL_LSN_DIFF","PG_WAL_REPLAY_PAUSE","PG_WAL_REPLAY_RESUME","SET_CONFIG"],trigger:["SUPPRESS_REDUNDANT_UPDATES_TRIGGER","TSVECTOR_UPDATE_TRIGGER","TSVECTOR_UPDATE_TRIGGER_COLUMN"],eventTrigger:["PG_EVENT_TRIGGER_DDL_COMMANDS","PG_EVENT_TRIGGER_DROPPED_OBJECTS","PG_EVENT_TRIGGER_TABLE_REWRITE_OID","PG_EVENT_TRIGGER_TABLE_REWRITE_REASON","PG_GET_OBJECT_ADDRESS"],stats:["PG_MCV_LIST_ITEMS"],cast:["CAST"],dataTypes:["BIT","BIT VARYING","CHARACTER","CHARACTER VARYING","VARCHAR","CHAR","DECIMAL","NUMERIC","TIME","TIMESTAMP","ENUM"]}),ce=fE({all:["ABORT","ABSOLUTE","ACCESS","ACTION","ADD","ADMIN","AFTER","AGGREGATE","ALL","ALSO","ALTER","ALWAYS","ANALYSE","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASENSITIVE","ASSERTION","ASSIGNMENT","ASYMMETRIC","AT","ATOMIC","ATTACH","ATTRIBUTE","AUTHORIZATION","BACKWARD","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BIT","BOOLEAN","BOTH","BREADTH","BY","CACHE","CALL","CALLED","CASCADE","CASCADED","CASE","CAST","CATALOG","CHAIN","CHAR","CHARACTER","CHARACTERISTICS","CHECK","CHECKPOINT","CLASS","CLOSE","CLUSTER","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNS","COMMENT","COMMENTS","COMMIT","COMMITTED","COMPRESSION","CONCURRENTLY","CONFIGURATION","CONFLICT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTENT","CONTINUE","CONVERSION","COPY","COST","CREATE","CROSS","CSV","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINER","DELETE","DELIMITER","DELIMITERS","DEPENDS","DEPTH","DESC","DETACH","DICTIONARY","DISABLE","DISCARD","DISTINCT","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","EACH","ELSE","ENABLE","ENCODING","ENCRYPTED","END","ENUM","ESCAPE","EVENT","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXPLAIN","EXPRESSION","EXTENSION","EXTERNAL","EXTRACT","FALSE","FAMILY","FETCH","FILTER","FINALIZE","FIRST","FLOAT","FOLLOWING","FOR","FORCE","FOREIGN","FORWARD","FREEZE","FROM","FULL","FUNCTION","FUNCTIONS","GENERATED","GLOBAL","GRANT","GRANTED","GREATEST","GROUP","GROUPING","GROUPS","HANDLER","HAVING","HEADER","HOLD","HOUR","IDENTITY","IF","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDE","INCLUDING","INCREMENT","INDEX","INDEXES","INHERIT","INHERITS","INITIALLY","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSTEAD","INT","INTEGER","INTERSECT","INTERVAL","INTO","INVOKER","IS","ISNULL","ISOLATION","JOIN","KEY","LABEL","LANGUAGE","LARGE","LAST","LATERAL","LEADING","LEAKPROOF","LEAST","LEFT","LEVEL","LIKE","LIMIT","LISTEN","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LOCKED","LOGGED","MAPPING","MATCH","MATERIALIZED","MAXVALUE","METHOD","MINUTE","MINVALUE","MODE","MONTH","MOVE","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NEW","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NORMALIZE","NORMALIZED","NOT","NOTHING","NOTIFY","NOTNULL","NOWAIT","NULL","NULLIF","NULLS","NUMERIC","OBJECT","OF","OFF","OFFSET","OIDS","OLD","ON","ONLY","OPERATOR","OPTION","OPTIONS","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OVER","OVERLAPS","OVERLAY","OVERRIDING","OWNED","OWNER","PARALLEL","PARSER","PARTIAL","PARTITION","PASSING","PASSWORD","PLACING","PLANS","POLICY","POSITION","PRECEDING","PRECISION","PREPARE","PREPARED","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROGRAM","PUBLICATION","QUOTE","RANGE","READ","REAL","REASSIGN","RECHECK","RECURSIVE","REF","REFERENCES","REFERENCING","REFRESH","REINDEX","RELATIVE","RELEASE","RENAME","REPEATABLE","REPLACE","REPLICA","RESET","RESTART","RESTRICT","RETURN","RETURNING","RETURNS","REVOKE","RIGHT","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROUTINES","ROW","ROWS","RULE","SAVEPOINT","SCHEMA","SCHEMAS","SCROLL","SEARCH","SECOND","SECURITY","SELECT","SEQUENCE","SEQUENCES","SERIALIZABLE","SERVER","SESSION","SESSION_USER","SET","SETOF","SETS","SHARE","SHOW","SIMILAR","SIMPLE","SKIP","SMALLINT","SNAPSHOT","SOME","SQL","STABLE","STANDALONE","START","STATEMENT","STATISTICS","STDIN","STDOUT","STORAGE","STORED","STRICT","STRIP","SUBSCRIPTION","SUBSTRING","SUPPORT","SYMMETRIC","SYSID","SYSTEM","TABLE","TABLES","TABLESAMPLE","TABLESPACE","TEMP","TEMPLATE","TEMPORARY","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRANSFORM","TREAT","TRIGGER","TRIM","TRUE","TRUNCATE","TRUSTED","TYPE","TYPES","UESCAPE","UNBOUNDED","UNCOMMITTED","UNENCRYPTED","UNION","UNIQUE","UNKNOWN","UNLISTEN","UNLOGGED","UNTIL","UPDATE","USER","USING","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARCHAR","VARIADIC","VARYING","VERBOSE","VERSION","VIEW","VIEWS","VOLATILE","WHEN","WHERE","WHITESPACE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","XML","XMLATTRIBUTES","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","YEAR","YES","ZONE"]}),ue=CT(["SELECT [ALL | DISTINCT]"]),de=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","UPDATE [ONLY]","SET","WHERE CURRENT OF","DELETE FROM [ONLY]","TRUNCATE [TABLE] [ONLY]","CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW","CREATE MATERIALIZED VIEW [IF NOT EXISTS]","CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS] [ONLY]","ALTER TABLE ALL IN TABLESPACE","RENAME [COLUMN]","RENAME TO","ADD [COLUMN] [IF NOT EXISTS]","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","[SET DATA] TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","ABORT","ALTER AGGREGATE","ALTER COLLATION","ALTER CONVERSION","ALTER DATABASE","ALTER DEFAULT PRIVILEGES","ALTER DOMAIN","ALTER EVENT TRIGGER","ALTER EXTENSION","ALTER FOREIGN DATA WRAPPER","ALTER FOREIGN TABLE","ALTER FUNCTION","ALTER GROUP","ALTER INDEX","ALTER LANGUAGE","ALTER LARGE OBJECT","ALTER MATERIALIZED VIEW","ALTER OPERATOR","ALTER OPERATOR CLASS","ALTER OPERATOR FAMILY","ALTER POLICY","ALTER PROCEDURE","ALTER PUBLICATION","ALTER ROLE","ALTER ROUTINE","ALTER RULE","ALTER SCHEMA","ALTER SEQUENCE","ALTER SERVER","ALTER STATISTICS","ALTER SUBSCRIPTION","ALTER SYSTEM","ALTER TABLESPACE","ALTER TEXT SEARCH CONFIGURATION","ALTER TEXT SEARCH DICTIONARY","ALTER TEXT SEARCH PARSER","ALTER TEXT SEARCH TEMPLATE","ALTER TRIGGER","ALTER TYPE","ALTER USER","ALTER USER MAPPING","ALTER VIEW","ANALYZE","BEGIN","CALL","CHECKPOINT","CLOSE","CLUSTER","COMMENT","COMMIT","COMMIT PREPARED","COPY","CREATE ACCESS METHOD","CREATE AGGREGATE","CREATE CAST","CREATE COLLATION","CREATE CONVERSION","CREATE DATABASE","CREATE DOMAIN","CREATE EVENT TRIGGER","CREATE EXTENSION","CREATE FOREIGN DATA WRAPPER","CREATE FOREIGN TABLE","CREATE FUNCTION","CREATE GROUP","CREATE INDEX","CREATE LANGUAGE","CREATE OPERATOR","CREATE OPERATOR CLASS","CREATE OPERATOR FAMILY","CREATE POLICY","CREATE PROCEDURE","CREATE PUBLICATION","CREATE ROLE","CREATE RULE","CREATE SCHEMA","CREATE SEQUENCE","CREATE SERVER","CREATE STATISTICS","CREATE SUBSCRIPTION","CREATE TABLESPACE","CREATE TEXT SEARCH CONFIGURATION","CREATE TEXT SEARCH DICTIONARY","CREATE TEXT SEARCH PARSER","CREATE TEXT SEARCH TEMPLATE","CREATE TRANSFORM","CREATE TRIGGER","CREATE TYPE","CREATE USER","CREATE USER MAPPING","DEALLOCATE","DECLARE","DISCARD","DO","DROP ACCESS METHOD","DROP AGGREGATE","DROP CAST","DROP COLLATION","DROP CONVERSION","DROP DATABASE","DROP DOMAIN","DROP EVENT TRIGGER","DROP EXTENSION","DROP FOREIGN DATA WRAPPER","DROP FOREIGN TABLE","DROP FUNCTION","DROP GROUP","DROP INDEX","DROP LANGUAGE","DROP MATERIALIZED VIEW","DROP OPERATOR","DROP OPERATOR CLASS","DROP OPERATOR FAMILY","DROP OWNED","DROP POLICY","DROP PROCEDURE","DROP PUBLICATION","DROP ROLE","DROP ROUTINE","DROP RULE","DROP SCHEMA","DROP SEQUENCE","DROP SERVER","DROP STATISTICS","DROP SUBSCRIPTION","DROP TABLESPACE","DROP TEXT SEARCH CONFIGURATION","DROP TEXT SEARCH DICTIONARY","DROP TEXT SEARCH PARSER","DROP TEXT SEARCH TEMPLATE","DROP TRANSFORM","DROP TRIGGER","DROP TYPE","DROP USER","DROP USER MAPPING","DROP VIEW","EXECUTE","EXPLAIN","FETCH","GRANT","IMPORT FOREIGN SCHEMA","LISTEN","LOAD","LOCK","MOVE","NOTIFY","PREPARE","PREPARE TRANSACTION","REASSIGN OWNED","REFRESH MATERIALIZED VIEW","REINDEX","RELEASE SAVEPOINT","RESET","RETURNING","REVOKE","ROLLBACK","ROLLBACK PREPARED","ROLLBACK TO SAVEPOINT","SAVEPOINT","SECURITY LABEL","SELECT INTO","SET CONSTRAINTS","SET ROLE","SET SESSION AUTHORIZATION","SET TRANSACTION","SHOW","START TRANSACTION","UNLISTEN","VACUUM","AFTER","SET SCHEMA"]),Ge=CT(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),pe=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),he=CT(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN","{TIMESTAMP | TIME} {WITH | WITHOUT} TIME ZONE"]);const He=fE({aggregate:["ANY_VALUE","APPROXIMATE PERCENTILE_DISC","AVG","COUNT","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],array:["array","array_concat","array_flatten","get_array_length","split_to_array","subarray"],bitwise:["BIT_AND","BIT_OR","BOOL_AND","BOOL_OR"],conditional:["COALESCE","DECODE","GREATEST","LEAST","NVL","NVL2","NULLIF"],dateTime:["ADD_MONTHS","AT TIME ZONE","CONVERT_TIMEZONE","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_CMP","DATE_CMP_TIMESTAMP","DATE_CMP_TIMESTAMPTZ","DATE_PART_YEAR","DATEADD","DATEDIFF","DATE_PART","DATE_TRUNC","EXTRACT","GETDATE","INTERVAL_CMP","LAST_DAY","MONTHS_BETWEEN","NEXT_DAY","SYSDATE","TIMEOFDAY","TIMESTAMP_CMP","TIMESTAMP_CMP_DATE","TIMESTAMP_CMP_TIMESTAMPTZ","TIMESTAMPTZ_CMP","TIMESTAMPTZ_CMP_DATE","TIMESTAMPTZ_CMP_TIMESTAMP","TIMEZONE","TO_TIMESTAMP","TRUNC"],spatial:["AddBBox","DropBBox","GeometryType","ST_AddPoint","ST_Angle","ST_Area","ST_AsBinary","ST_AsEWKB","ST_AsEWKT","ST_AsGeoJSON","ST_AsText","ST_Azimuth","ST_Boundary","ST_Collect","ST_Contains","ST_ContainsProperly","ST_ConvexHull","ST_CoveredBy","ST_Covers","ST_Crosses","ST_Dimension","ST_Disjoint","ST_Distance","ST_DistanceSphere","ST_DWithin","ST_EndPoint","ST_Envelope","ST_Equals","ST_ExteriorRing","ST_Force2D","ST_Force3D","ST_Force3DM","ST_Force3DZ","ST_Force4D","ST_GeometryN","ST_GeometryType","ST_GeomFromEWKB","ST_GeomFromEWKT","ST_GeomFromText","ST_GeomFromWKB","ST_InteriorRingN","ST_Intersects","ST_IsPolygonCCW","ST_IsPolygonCW","ST_IsClosed","ST_IsCollection","ST_IsEmpty","ST_IsSimple","ST_IsValid","ST_Length","ST_LengthSphere","ST_Length2D","ST_LineFromMultiPoint","ST_LineInterpolatePoint","ST_M","ST_MakeEnvelope","ST_MakeLine","ST_MakePoint","ST_MakePolygon","ST_MemSize","ST_MMax","ST_MMin","ST_Multi","ST_NDims","ST_NPoints","ST_NRings","ST_NumGeometries","ST_NumInteriorRings","ST_NumPoints","ST_Perimeter","ST_Perimeter2D","ST_Point","ST_PointN","ST_Points","ST_Polygon","ST_RemovePoint","ST_Reverse","ST_SetPoint","ST_SetSRID","ST_Simplify","ST_SRID","ST_StartPoint","ST_Touches","ST_Within","ST_X","ST_XMax","ST_XMin","ST_Y","ST_YMax","ST_YMin","ST_Z","ST_ZMax","ST_ZMin","SupportsBBox"],hash:["CHECKSUM","FUNC_SHA1","FNV_HASH","MD5","SHA","SHA1","SHA2"],hyperLogLog:["HLL","HLL_CREATE_SKETCH","HLL_CARDINALITY","HLL_COMBINE"],json:["IS_VALID_JSON","IS_VALID_JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_EXTRACT_ARRAY_ELEMENT_TEXT","JSON_EXTRACT_PATH_TEXT","JSON_PARSE","JSON_SERIALIZE"],math:["ABS","ACOS","ASIN","ATAN","ATAN2","CBRT","CEILING","CEIL","COS","COT","DEGREES","DEXP","DLOG1","DLOG10","EXP","FLOOR","LN","LOG","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SIN","SIGN","SQRT","TAN","TO_HEX","TRUNC"],machineLearning:["EXPLAIN_MODEL"],string:["ASCII","BPCHARCMP","BTRIM","BTTEXT_PATTERN_CMP","CHAR_LENGTH","CHARACTER_LENGTH","CHARINDEX","CHR","COLLATE","CONCAT","CRC32","DIFFERENCE","INITCAP","LEFT","RIGHT","LEN","LENGTH","LOWER","LPAD","RPAD","LTRIM","OCTETINDEX","OCTET_LENGTH","POSITION","QUOTE_IDENT","QUOTE_LITERAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","REPLICATE","REVERSE","RTRIM","SOUNDEX","SPLIT_PART","STRPOS","STRTOL","SUBSTRING","TEXTLEN","TRANSLATE","TRIM","UPPER"],superType:["decimal_precision","decimal_scale","is_array","is_bigint","is_boolean","is_char","is_decimal","is_float","is_integer","is_object","is_scalar","is_smallint","is_varchar","json_typeof"],window:["AVG","COUNT","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAST_VALUE","LAG","LEAD","LISTAGG","MAX","MEDIAN","MIN","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],dataType:["CAST","CONVERT","TO_CHAR","TO_DATE","TO_NUMBER","TEXT_TO_INT_ALT","TEXT_TO_NUMERIC_ALT"],sysAdmin:["CHANGE_QUERY_PRIORITY","CHANGE_SESSION_PRIORITY","CHANGE_USER_PRIORITY","CURRENT_SETTING","PG_CANCEL_BACKEND","PG_TERMINATE_BACKEND","REBOOT_CLUSTER","SET_CONFIG"],sysInfo:["CURRENT_AWS_ACCOUNT","CURRENT_DATABASE","CURRENT_NAMESPACE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","CURRENT_USER_ID","HAS_ASSUMEROLE_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_TABLE_PRIVILEGE","PG_BACKEND_PID","PG_GET_COLS","PG_GET_GRANTEE_BY_IAM_ROLE","PG_GET_IAM_ROLE_BY_USER","PG_GET_LATE_BINDING_VIEW_COLS","PG_LAST_COPY_COUNT","PG_LAST_COPY_ID","PG_LAST_UNLOAD_ID","PG_LAST_QUERY_ID","PG_LAST_UNLOAD_COUNT","SESSION_USER","SLICE_NUM","USER","VERSION"],dataTypes:["DECIMAL","NUMERIC","CHAR","CHARACTER","VARCHAR","CHARACTER VARYING","NCHAR","NVARCHAR","VARBYTE"]}),me=fE({standard:["AES128","AES256","ALL","ALLOWOVERWRITE","ANY","ARRAY","AS","ASC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BOTH","CHECK","COLUMN","CONSTRAINT","CREATE","CROSS","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DESC","DISABLE","DISTINCT","DO","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","EXPLICIT","FALSE","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GROUP","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTO","IS","ISNULL","LANGUAGE","LEADING","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","MINUS","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OID","OLD","ON","ONLY","OPEN","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PERMISSIONS","PLACING","PRIMARY","RECOVER","REFERENCES","REJECTLOG","RESORT","RESPECT","RESTORE","SIMILAR","SNAPSHOT","SOME","SYSTEM","TABLE","TAG","TDES","THEN","TIMESTAMP","TO","TOP","TRAILING","TRUE","UNIQUE","USING","VERBOSE","WALLET","WITHOUT"],dataConversionParams:["ACCEPTANYDATE","ACCEPTINVCHARS","BLANKSASNULL","DATEFORMAT","EMPTYASNULL","ENCODING","ESCAPE","EXPLICIT_IDS","FILLRECORD","IGNOREBLANKLINES","IGNOREHEADER","REMOVEQUOTES","ROUNDEC","TIMEFORMAT","TRIMBLANKS","TRUNCATECOLUMNS"],dataLoadParams:["COMPROWS","COMPUPDATE","MAXERROR","NOLOAD","STATUPDATE"],dataFormatParams:["FORMAT","CSV","DELIMITER","FIXEDWIDTH","SHAPEFILE","AVRO","JSON","PARQUET","ORC"],copyAuthParams:["ACCESS_KEY_ID","CREDENTIALS","ENCRYPTED","IAM_ROLE","MASTER_SYMMETRIC_KEY","SECRET_ACCESS_KEY","SESSION_TOKEN"],copyCompressionParams:["BZIP2","GZIP","LZOP","ZSTD"],copyMiscParams:["MANIFEST","READRATIO","REGION","SSH"],compressionEncodings:["RAW","AZ64","BYTEDICT","DELTA","DELTA32K","LZO","MOSTLY8","MOSTLY16","MOSTLY32","RUNLENGTH","TEXT255","TEXT32K"],misc:["CATALOG_ROLE","SECRET_ARN","EXTERNAL","AUTO","EVEN","KEY","PREDICATE","COMPRESSION"],dataTypes:["BPCHAR","TEXT"]}),Be=CT(["SELECT [ALL | DISTINCT]"]),fe=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","UPDATE","SET","DELETE [FROM]","TRUNCATE [TABLE]","CREATE [OR REPLACE | MATERIALIZED] VIEW","CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ALTER TABLE APPEND","ADD [COLUMN]","DROP [COLUMN]","RENAME TO","RENAME COLUMN","ALTER COLUMN","TYPE","ENCODE","ABORT","ALTER DATABASE","ALTER DATASHARE","ALTER DEFAULT PRIVILEGES","ALTER GROUP","ALTER MATERIALIZED VIEW","ALTER PROCEDURE","ALTER SCHEMA","ALTER USER","ANALYSE","ANALYZE","ANALYSE COMPRESSION","ANALYZE COMPRESSION","BEGIN","CALL","CANCEL","CLOSE","COMMENT","COMMIT","COPY","CREATE DATABASE","CREATE DATASHARE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL SCHEMA","CREATE EXTERNAL TABLE","CREATE FUNCTION","CREATE GROUP","CREATE LIBRARY","CREATE MODEL","CREATE PROCEDURE","CREATE SCHEMA","CREATE USER","DEALLOCATE","DECLARE","DESC DATASHARE","DROP DATABASE","DROP DATASHARE","DROP FUNCTION","DROP GROUP","DROP LIBRARY","DROP MODEL","DROP MATERIALIZED VIEW","DROP PROCEDURE","DROP SCHEMA","DROP USER","DROP VIEW","DROP","EXECUTE","EXPLAIN","FETCH","GRANT","LOCK","PREPARE","REFRESH MATERIALIZED VIEW","RESET","REVOKE","ROLLBACK","SELECT INTO","SET SESSION AUTHORIZATION","SET SESSION CHARACTERISTICS","SHOW","SHOW EXTERNAL TABLE","SHOW MODEL","SHOW DATASHARES","SHOW PROCEDURE","SHOW TABLE","SHOW VIEW","START TRANSACTION","UNLOAD","VACUUM","ALTER COLUMN"]),Ye=CT(["UNION [ALL]","EXCEPT","INTERSECT","MINUS"]),Fe=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),ye=CT(["NULL AS","DATA CATALOG","HIVE METASTORE","{ROWS | RANGE} BETWEEN"]);const Ve=fE({all:["ADD","AFTER","ALL","ALTER","ANALYZE","AND","ANTI","ANY","ARCHIVE","ARRAY","AS","ASC","AT","AUTHORIZATION","BETWEEN","BOTH","BUCKET","BUCKETS","BY","CACHE","CASCADE","CAST","CHANGE","CHECK","CLEAR","CLUSTER","CLUSTERED","CODEGEN","COLLATE","COLLECTION","COLUMN","COLUMNS","COMMENT","COMMIT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONSTRAINT","COST","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATA","DATABASE","DATABASES","DAY","DBPROPERTIES","DEFINED","DELETE","DELIMITED","DESC","DESCRIBE","DFS","DIRECTORIES","DIRECTORY","DISTINCT","DISTRIBUTE","DIV","DROP","ESCAPE","ESCAPED","EXCEPT","EXCHANGE","EXISTS","EXPORT","EXTENDED","EXTERNAL","EXTRACT","FALSE","FETCH","FIELDS","FILTER","FILEFORMAT","FIRST","FIRST_VALUE","FOLLOWING","FOR","FOREIGN","FORMAT","FORMATTED","FULL","FUNCTION","FUNCTIONS","GLOBAL","GRANT","GROUP","GROUPING","HOUR","IF","IGNORE","IMPORT","IN","INDEX","INDEXES","INNER","INPATH","INPUTFORMAT","INTERSECT","INTERVAL","INTO","IS","ITEMS","KEYS","LAST","LAST_VALUE","LATERAL","LAZY","LEADING","LEFT","LIKE","LINES","LIST","LOCAL","LOCATION","LOCK","LOCKS","LOGICAL","MACRO","MAP","MATCHED","MERGE","MINUTE","MONTH","MSCK","NAMESPACE","NAMESPACES","NATURAL","NO","NOT","NULL","NULLS","OF","ONLY","OPTION","OPTIONS","OR","ORDER","OUT","OUTER","OUTPUTFORMAT","OVER","OVERLAPS","OVERLAY","OVERWRITE","OWNER","PARTITION","PARTITIONED","PARTITIONS","PERCENT","PLACING","POSITION","PRECEDING","PRIMARY","PRINCIPALS","PROPERTIES","PURGE","QUERY","RANGE","RECORDREADER","RECORDWRITER","RECOVER","REDUCE","REFERENCES","RENAME","REPAIR","REPLACE","RESPECT","RESTRICT","REVOKE","RIGHT","RLIKE","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","SCHEMA","SECOND","SELECT","SEMI","SEPARATED","SERDE","SERDEPROPERTIES","SESSION_USER","SETS","SHOW","SKEWED","SOME","SORT","SORTED","START","STATISTICS","STORED","STRATIFY","STRUCT","SUBSTR","SUBSTRING","TABLE","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","THEN","TO","TOUCH","TRAILING","TRANSACTION","TRANSACTIONS","TRIM","TRUE","TRUNCATE","UNARCHIVE","UNBOUNDED","UNCACHE","UNIQUE","UNKNOWN","UNLOCK","UNSET","USE","USER","USING","VIEW","WINDOW","YEAR","ANALYSE","ARRAY_ZIP","COALESCE","CONTAINS","CONVERT","DAYS","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DECODE","DEFAULT","DISTINCTROW","ENCODE","EXPLODE","EXPLODE_OUTER","FIXED","GREATEST","GROUP_CONCAT","HOURS","HOUR_MINUTE","HOUR_SECOND","IFNULL","LEAST","LEVEL","MINUTE_SECOND","NULLIF","OFFSET","ON","OPTIMIZE","REGEXP","SEPARATOR","SIZE","STRING","TYPE","TYPES","UNSIGNED","VARIABLES","YEAR_MONTH"]}),We=fE({aggregate:["APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COUNT","COUNT","COUNT_IF","COUNT_MIN_SKETCH","COVAR_POP","COVAR_SAMP","EVERY","FIRST","FIRST_VALUE","GROUPING","GROUPING_ID","KURTOSIS","LAST","LAST_VALUE","MAX","MAX_BY","MEAN","MIN","MIN_BY","PERCENTILE","PERCENTILE","PERCENTILE_APPROX","SKEWNESS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["CUME_DIST","DENSE_RANK","LAG","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],array:["ARRAY","ARRAY_CONTAINS","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_UNION","ARRAYS_OVERLAP","ARRAYS_ZIP","FLATTEN","SEQUENCE","SHUFFLE","SLICE","SORT_ARRAY"],map:["ELEMENT_AT","ELEMENT_AT","MAP","MAP_CONCAT","MAP_ENTRIES","MAP_FROM_ARRAYS","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","STR_TO_MAP"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_DATE","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","DATE_ADD","DATE_FORMAT","DATE_FROM_UNIX_DATE","DATE_PART","DATE_SUB","DATE_TRUNC","DATEDIFF","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MAKE_DATE","MAKE_DT_INTERVAL","MAKE_INTERVAL","MAKE_TIMESTAMP","MAKE_YM_INTERVAL","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","NOW","QUARTER","SECOND","SESSION_WINDOW","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_SECONDS","TO_DATE","TO_TIMESTAMP","TO_UNIX_TIMESTAMP","TO_UTC_TIMESTAMP","TRUNC","UNIX_DATE","UNIX_MICROS","UNIX_MILLIS","UNIX_SECONDS","UNIX_TIMESTAMP","WEEKDAY","WEEKOFYEAR","WINDOW","YEAR"],json:["FROM_JSON","GET_JSON_OBJECT","JSON_ARRAY_LENGTH","JSON_OBJECT_KEYS","JSON_TUPLE","SCHEMA_OF_JSON","TO_JSON"],misc:["ABS","ACOS","ACOSH","AGGREGATE","ARRAY_SORT","ASCII","ASIN","ASINH","ASSERT_TRUE","ATAN","ATAN2","ATANH","BASE64","BIGINT","BIN","BINARY","BIT_COUNT","BIT_GET","BIT_LENGTH","BOOLEAN","BROUND","BTRIM","CARDINALITY","CBRT","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONV","COS","COSH","COT","CRC32","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_USER","DATE","DECIMAL","DEGREES","DOUBLE","ELT","EXP","EXPM1","FACTORIAL","FIND_IN_SET","FLOAT","FLOOR","FORALL","FORMAT_NUMBER","FORMAT_STRING","FROM_CSV","GETBIT","HASH","HEX","HYPOT","INITCAP","INLINE","INLINE_OUTER","INPUT_FILE_BLOCK_LENGTH","INPUT_FILE_BLOCK_START","INPUT_FILE_NAME","INSTR","INT","ISNAN","ISNOTNULL","ISNULL","JAVA_METHOD","LCASE","LEFT","LENGTH","LEVENSHTEIN","LN","LOCATE","LOG","LOG10","LOG1P","LOG2","LOWER","LPAD","LTRIM","MAP_FILTER","MAP_ZIP_WITH","MD5","MOD","MONOTONICALLY_INCREASING_ID","NAMED_STRUCT","NANVL","NEGATIVE","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARSE_URL","PI","PMOD","POSEXPLODE","POSEXPLODE_OUTER","POSITION","POSITIVE","POW","POWER","PRINTF","RADIANS","RAISE_ERROR","RAND","RANDN","RANDOM","REFLECT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_REPLACE","REPEAT","REPLACE","REVERSE","RIGHT","RINT","ROUND","RPAD","RTRIM","SCHEMA_OF_CSV","SENTENCES","SHA","SHA1","SHA2","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIGNUM","SIN","SINH","SMALLINT","SOUNDEX","SPACE","SPARK_PARTITION_ID","SPLIT","SQRT","STACK","SUBSTR","SUBSTRING","SUBSTRING_INDEX","TAN","TANH","TIMESTAMP","TINYINT","TO_CSV","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRY_ADD","TRY_DIVIDE","TYPEOF","UCASE","UNBASE64","UNHEX","UPPER","UUID","VERSION","WIDTH_BUCKET","XPATH","XPATH_BOOLEAN","XPATH_DOUBLE","XPATH_FLOAT","XPATH_INT","XPATH_LONG","XPATH_NUMBER","XPATH_SHORT","XPATH_STRING","XXHASH64","ZIP_WITH"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","DEC","NUMERIC","VARCHAR"]}),ge=CT(["SELECT [ALL | DISTINCT]"]),Xe=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT [INTO | OVERWRITE] [TABLE]","VALUES","TRUNCATE TABLE","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]","CREATE [EXTERNAL] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD COLUMNS","DROP {COLUMN | COLUMNS}","RENAME TO","RENAME COLUMN","ALTER COLUMN","ALTER DATABASE","ALTER VIEW","CREATE DATABASE","CREATE FUNCTION","DROP DATABASE","DROP FUNCTION","DROP VIEW","REPAIR TABLE","USE DATABASE","TABLESAMPLE","PIVOT","TRANSFORM","EXPLAIN","ADD FILE","ADD JAR","ANALYZE TABLE","CACHE TABLE","CLEAR CACHE","DESCRIBE DATABASE","DESCRIBE FUNCTION","DESCRIBE QUERY","DESCRIBE TABLE","LIST FILE","LIST JAR","REFRESH","REFRESH TABLE","REFRESH FUNCTION","RESET","SHOW COLUMNS","SHOW CREATE TABLE","SHOW DATABASES","SHOW FUNCTIONS","SHOW PARTITIONS","SHOW TABLE EXTENDED","SHOW TABLES","SHOW TBLPROPERTIES","SHOW VIEWS","UNCACHE TABLE","LATERAL VIEW"]),ve=CT(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),be=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT] {ANTI | SEMI} JOIN","NATURAL [LEFT] {ANTI | SEMI} JOIN"]),Ke=CT(["ON DELETE","ON UPDATE","CURRENT ROW","{ROWS | RANGE} BETWEEN"]);function xe(E){return E.map(((T,e)=>{const R=E[e-1]||AE,A=E[e+1]||AE;return tE.WINDOW(T)&&A.type===eE.OPEN_PAREN?{...T,type:eE.RESERVED_FUNCTION_NAME}:"ITEMS"!==T.text||T.type!==eE.RESERVED_KEYWORD||"COLLECTION"===R.text&&"TERMINATED"===A.text?T:{...T,type:eE.IDENTIFIER,text:T.raw}}))}const $e=fE({scalar:["ABS","CHANGES","CHAR","COALESCE","FORMAT","GLOB","HEX","IFNULL","IIF","INSTR","LAST_INSERT_ROWID","LENGTH","LIKE","LIKELIHOOD","LIKELY","LOAD_EXTENSION","LOWER","LTRIM","NULLIF","PRINTF","QUOTE","RANDOM","RANDOMBLOB","REPLACE","ROUND","RTRIM","SIGN","SOUNDEX","SQLITE_COMPILEOPTION_GET","SQLITE_COMPILEOPTION_USED","SQLITE_OFFSET","SQLITE_SOURCE_ID","SQLITE_VERSION","SUBSTR","SUBSTRING","TOTAL_CHANGES","TRIM","TYPEOF","UNICODE","UNLIKELY","UPPER","ZEROBLOB"],aggregate:["AVG","COUNT","GROUP_CONCAT","MAX","MIN","SUM","TOTAL"],datetime:["DATE","TIME","DATETIME","JULIANDAY","UNIXEPOCH","STRFTIME"],window:["row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value"],math:["ACOS","ACOSH","ASIN","ASINH","ATAN","ATAN2","ATANH","CEIL","CEILING","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG","LOG10","LOG2","MOD","PI","POW","POWER","RADIANS","SIN","SINH","SQRT","TAN","TANH","TRUNC"],json:["JSON","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_ARRAY_LENGTH","JSON_EXTRACT","JSON_INSERT","JSON_OBJECT","JSON_PATCH","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_TYPE","JSON_TYPE","JSON_VALID","JSON_QUOTE","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_EACH","JSON_TREE"],cast:["CAST"],dataTypes:["CHARACTER","VARCHAR","VARYING CHARACTER","NCHAR","NATIVE CHARACTER","NVARCHAR","NUMERIC","DECIMAL"]}),we=fE({all:["ABORT","ACTION","ADD","AFTER","ALL","ALTER","AND","ANY","ARE","ARRAY","ALWAYS","ANALYZE","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DO","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUDE","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","ONLY","OPEN","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"]}),ke=CT(["SELECT [ALL | DISTINCT]"]),Je=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO","REPLACE INTO","VALUES","UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]","SET","DELETE FROM","CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","RENAME TO","SET SCHEMA"]),Ze=CT(["UNION [ALL]","EXCEPT","INTERSECT"]),Qe=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),qe=CT(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN"]);const je=fE({set:["GROUPING"],window:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","ROW_NUMBER"],numeric:["POSITION","OCCURRENCES_REGEX","POSITION_REGEX","EXTRACT","CHAR_LENGTH","CHARACTER_LENGTH","OCTET_LENGTH","CARDINALITY","ABS","MOD","LN","EXP","POWER","SQRT","FLOOR","CEIL","CEILING","WIDTH_BUCKET"],string:["SUBSTRING","SUBSTRING_REGEX","UPPER","LOWER","CONVERT","TRANSLATE","TRANSLATE_REGEX","TRIM","OVERLAY","NORMALIZE","SPECIFICTYPE"],datetime:["CURRENT_DATE","CURRENT_TIME","LOCALTIME","CURRENT_TIMESTAMP","LOCALTIMESTAMP"],aggregate:["COUNT","AVG","MAX","MIN","SUM","STDDEV_POP","STDDEV_SAMP","VAR_SAMP","VAR_POP","COLLECT","FUSION","INTERSECTION","COVAR_POP","COVAR_SAMP","CORR","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","PERCENTILE_CONT","PERCENTILE_DISC"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],nonStandard:["ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN"],dataTypes:["CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","VARCHAR","CHARACTER LARGE OBJECT","CHAR LARGE OBJECT","CLOB","NATIONAL CHARACTER","NATIONAL CHAR","NCHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NATIONAL CHARACTER LARGE OBJECT","NCHAR LARGE OBJECT","NCLOB","BINARY","BINARY VARYING","VARBINARY","BINARY LARGE OBJECT","BLOB","NUMERIC","DECIMAL","DEC","TIME","TIMESTAMP"]}),ze=fE({all:["ALL","ALLOCATE","ALTER","ANY","ARE","ARRAY","AS","ASENSITIVE","ASYMMETRIC","AT","ATOMIC","AUTHORIZATION","BEGIN","BETWEEN","BIGINT","BINARY","BLOB","BOOLEAN","BOTH","BY","CALL","CALLED","CASCADED","CAST","CHAR","CHARACTER","CHECK","CLOB","CLOSE","COALESCE","COLLATE","COLUMN","COMMIT","CONDITION","CONNECT","CONSTRAINT","CORRESPONDING","CREATE","CROSS","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURSOR","CYCLE","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DELETE","DEREF","DESCRIBE","DETERMINISTIC","DISCONNECT","DISTINCT","DOUBLE","DROP","DYNAMIC","EACH","ELEMENT","END-EXEC","ESCAPE","EVERY","EXCEPT","EXEC","EXECUTE","EXISTS","EXTERNAL","FALSE","FETCH","FILTER","FLOAT","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GET","GLOBAL","GRANT","GROUP","HAVING","HOLD","HOUR","IDENTITY","IN","INDICATOR","INNER","INOUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","LANGUAGE","LARGE","LATERAL","LEADING","LEFT","LIKE","LIKE_REGEX","LOCAL","MATCH","MEMBER","MERGE","METHOD","MINUTE","MODIFIES","MODULE","MONTH","MULTISET","NATIONAL","NATURAL","NCHAR","NCLOB","NEW","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OF","OLD","ON","ONLY","OPEN","ORDER","OUT","OUTER","OVER","OVERLAPS","PARAMETER","PARTITION","PRECISION","PREPARE","PRIMARY","PROCEDURE","RANGE","READS","REAL","RECURSIVE","REF","REFERENCES","REFERENCING","RELEASE","RESULT","RETURN","RETURNS","REVOKE","RIGHT","ROLLBACK","ROLLUP","ROW","ROWS","SAVEPOINT","SCOPE","SCROLL","SEARCH","SECOND","SELECT","SENSITIVE","SESSION_USER","SET","SIMILAR","SMALLINT","SOME","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","START","STATIC","SUBMULTISET","SYMMETRIC","SYSTEM","SYSTEM_USER","TABLE","TABLESAMPLE","THEN","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSLATION","TREAT","TRIGGER","TRUE","UESCAPE","UNION","UNIQUE","UNKNOWN","UNNEST","UPDATE","USER","USING","VALUE","VALUES","VARBINARY","VARCHAR","VARYING","WHENEVER","WINDOW","WITHIN","WITHOUT","YEAR"]}),ER=CT(["SELECT [ALL | DISTINCT]"]),TR=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","UPDATE","SET","WHERE CURRENT OF","DELETE FROM","TRUNCATE TABLE","CREATE [RECURSIVE] VIEW","CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE","DROP TABLE","ALTER TABLE","ADD COLUMN","DROP [COLUMN]","RENAME COLUMN","RENAME TO","ALTER [COLUMN]","{SET | DROP} DEFAULT","ADD SCOPE","DROP SCOPE {CASCADE | RESTRICT}","RESTART WITH","SET SCHEMA"]),eR=CT(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),RR=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),AR=CT(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]);const SR=fE({all:["ABS","ACOS","ALL_MATCH","ANY_MATCH","APPROX_DISTINCT","APPROX_MOST_FREQUENT","APPROX_PERCENTILE","APPROX_SET","ARBITRARY","ARRAYS_OVERLAP","ARRAY_AGG","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_SORT","ARRAY_UNION","ASIN","ATAN","ATAN2","AT_TIMEZONE","AVG","BAR","BETA_CDF","BING_TILE","BING_TILES_AROUND","BING_TILE_AT","BING_TILE_COORDINATES","BING_TILE_POLYGON","BING_TILE_QUADKEY","BING_TILE_ZOOM_LEVEL","BITWISE_AND","BITWISE_AND_AGG","BITWISE_LEFT_SHIFT","BITWISE_NOT","BITWISE_OR","BITWISE_OR_AGG","BITWISE_RIGHT_SHIFT","BITWISE_RIGHT_SHIFT_ARITHMETIC","BITWISE_XOR","BIT_COUNT","BOOL_AND","BOOL_OR","CARDINALITY","CAST","CBRT","CEIL","CEILING","CHAR2HEXINT","CHECKSUM","CHR","CLASSIFY","COALESCE","CODEPOINT","COLOR","COMBINATIONS","CONCAT","CONCAT_WS","CONTAINS","CONTAINS_SEQUENCE","CONVEX_HULL_AGG","CORR","COS","COSH","COSINE_SIMILARITY","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CRC32","CUME_DIST","CURRENT_CATALOG","CURRENT_DATE","CURRENT_GROUPS","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","DATE","DATE_ADD","DATE_DIFF","DATE_FORMAT","DATE_PARSE","DATE_TRUNC","DAY","DAY_OF_MONTH","DAY_OF_WEEK","DAY_OF_YEAR","DEGREES","DENSE_RANK","DOW","DOY","E","ELEMENT_AT","EMPTY_APPROX_SET","EVALUATE_CLASSIFIER_PREDICTIONS","EVERY","EXP","EXTRACT","FEATURES","FILTER","FIRST_VALUE","FLATTEN","FLOOR","FORMAT","FORMAT_DATETIME","FORMAT_NUMBER","FROM_BASE","FROM_BASE32","FROM_BASE64","FROM_BASE64URL","FROM_BIG_ENDIAN_32","FROM_BIG_ENDIAN_64","FROM_ENCODED_POLYLINE","FROM_GEOJSON_GEOMETRY","FROM_HEX","FROM_IEEE754_32","FROM_IEEE754_64","FROM_ISO8601_DATE","FROM_ISO8601_TIMESTAMP","FROM_ISO8601_TIMESTAMP_NANOS","FROM_UNIXTIME","FROM_UNIXTIME_NANOS","FROM_UTF8","GEOMETRIC_MEAN","GEOMETRY_FROM_HADOOP_SHAPE","GEOMETRY_INVALID_REASON","GEOMETRY_NEAREST_POINTS","GEOMETRY_TO_BING_TILES","GEOMETRY_UNION","GEOMETRY_UNION_AGG","GREATEST","GREAT_CIRCLE_DISTANCE","HAMMING_DISTANCE","HASH_COUNTS","HISTOGRAM","HMAC_MD5","HMAC_SHA1","HMAC_SHA256","HMAC_SHA512","HOUR","HUMAN_READABLE_SECONDS","IF","INDEX","INFINITY","INTERSECTION_CARDINALITY","INVERSE_BETA_CDF","INVERSE_NORMAL_CDF","IS_FINITE","IS_INFINITE","IS_JSON_SCALAR","IS_NAN","JACCARD_INDEX","JSON_ARRAY_CONTAINS","JSON_ARRAY_GET","JSON_ARRAY_LENGTH","JSON_EXISTS","JSON_EXTRACT","JSON_EXTRACT_SCALAR","JSON_FORMAT","JSON_PARSE","JSON_QUERY","JSON_SIZE","JSON_VALUE","KURTOSIS","LAG","LAST_DAY_OF_MONTH","LAST_VALUE","LEAD","LEARN_CLASSIFIER","LEARN_LIBSVM_CLASSIFIER","LEARN_LIBSVM_REGRESSOR","LEARN_REGRESSOR","LEAST","LENGTH","LEVENSHTEIN_DISTANCE","LINE_INTERPOLATE_POINT","LINE_INTERPOLATE_POINTS","LINE_LOCATE_POINT","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","LUHN_CHECK","MAKE_SET_DIGEST","MAP","MAP_AGG","MAP_CONCAT","MAP_ENTRIES","MAP_FILTER","MAP_FROM_ENTRIES","MAP_KEYS","MAP_UNION","MAP_VALUES","MAP_ZIP_WITH","MAX","MAX_BY","MD5","MERGE","MERGE_SET_DIGEST","MILLISECOND","MIN","MINUTE","MIN_BY","MOD","MONTH","MULTIMAP_AGG","MULTIMAP_FROM_ENTRIES","MURMUR3","NAN","NGRAMS","NONE_MATCH","NORMALIZE","NORMAL_CDF","NOW","NTH_VALUE","NTILE","NULLIF","NUMERIC_HISTOGRAM","OBJECTID","OBJECTID_TIMESTAMP","PARSE_DATA_SIZE","PARSE_DATETIME","PARSE_DURATION","PERCENT_RANK","PI","POSITION","POW","POWER","QDIGEST_AGG","QUARTER","RADIANS","RAND","RANDOM","RANK","REDUCE","REDUCE_AGG","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGRESS","REGR_INTERCEPT","REGR_SLOPE","RENDER","REPEAT","REPLACE","REVERSE","RGB","ROUND","ROW_NUMBER","RPAD","RTRIM","SECOND","SEQUENCE","SHA1","SHA256","SHA512","SHUFFLE","SIGN","SIMPLIFY_GEOMETRY","SIN","SKEWNESS","SLICE","SOUNDEX","SPATIAL_PARTITIONING","SPATIAL_PARTITIONS","SPLIT","SPLIT_PART","SPLIT_TO_MAP","SPLIT_TO_MULTIMAP","SPOOKY_HASH_V2_32","SPOOKY_HASH_V2_64","SQRT","STARTS_WITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRPOS","ST_AREA","ST_ASBINARY","ST_ASTEXT","ST_BOUNDARY","ST_BUFFER","ST_CENTROID","ST_CONTAINS","ST_CONVEXHULL","ST_COORDDIM","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_ENDPOINT","ST_ENVELOPE","ST_ENVELOPEASPTS","ST_EQUALS","ST_EXTERIORRING","ST_GEOMETRIES","ST_GEOMETRYFROMTEXT","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMBINARY","ST_INTERIORRINGN","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISRING","ST_ISSIMPLE","ST_ISVALID","ST_LENGTH","ST_LINEFROMTEXT","ST_LINESTRING","ST_MULTIPOINT","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINT","ST_POINTN","ST_POINTS","ST_POLYGON","ST_RELATE","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_TOUCHES","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","SUBSTR","SUBSTRING","SUM","TAN","TANH","TDIGEST_AGG","TIMESTAMP_OBJECTID","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO_BASE","TO_BASE32","TO_BASE64","TO_BASE64URL","TO_BIG_ENDIAN_32","TO_BIG_ENDIAN_64","TO_CHAR","TO_DATE","TO_ENCODED_POLYLINE","TO_GEOJSON_GEOMETRY","TO_GEOMETRY","TO_HEX","TO_IEEE754_32","TO_IEEE754_64","TO_ISO8601","TO_MILLISECONDS","TO_SPHERICAL_GEOGRAPHY","TO_TIMESTAMP","TO_UNIXTIME","TO_UTF8","TRANSFORM","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRY","TRY_CAST","TYPEOF","UPPER","URL_DECODE","URL_ENCODE","URL_EXTRACT_FRAGMENT","URL_EXTRACT_HOST","URL_EXTRACT_PARAMETER","URL_EXTRACT_PATH","URL_EXTRACT_PORT","URL_EXTRACT_PROTOCOL","URL_EXTRACT_QUERY","UUID","VALUES_AT_QUANTILES","VALUE_AT_QUANTILE","VARIANCE","VAR_POP","VAR_SAMP","VERSION","WEEK","WEEK_OF_YEAR","WIDTH_BUCKET","WILSON_INTERVAL_LOWER","WILSON_INTERVAL_UPPER","WITH_TIMEZONE","WORD_STEM","XXHASH64","YEAR","YEAR_OF_WEEK","YOW","ZIP","ZIP_WITH"],rowPattern:["CLASSIFIER","FIRST","LAST","MATCH_NUMBER","NEXT","PERMUTE","PREV"]}),tR=fE({all:["ABSENT","ADD","ADMIN","AFTER","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","AUTHORIZATION","BERNOULLI","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CATALOGS","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","CONDITIONAL","CONSTRAINT","COPARTITION","CREATE","CROSS","CUBE","CURRENT","CURRENT_PATH","CURRENT_ROLE","DATA","DEALLOCATE","DEFAULT","DEFINE","DEFINER","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DISTINCT","DISTRIBUTED","DOUBLE","DROP","ELSE","EMPTY","ENCODING","END","ERROR","ESCAPE","EXCEPT","EXCLUDING","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FINAL","FIRST","FOLLOWING","FOR","FROM","FULL","FUNCTIONS","GRANT","GRANTED","GRANTS","GRAPHVIZ","GROUP","GROUPING","GROUPS","HAVING","IGNORE","IN","INCLUDING","INITIAL","INNER","INPUT","INSERT","INTERSECT","INTERVAL","INTO","INVOKER","IO","IS","ISOLATION","JOIN","JSON","JSON_ARRAY","JSON_OBJECT","KEEP","KEY","KEYS","LAST","LATERAL","LEADING","LEFT","LEVEL","LIKE","LIMIT","LOCAL","LOGICAL","MATCH","MATCHED","MATCHES","MATCH_RECOGNIZE","MATERIALIZED","MEASURES","NATURAL","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NOT","NULL","NULLS","OBJECT","OF","OFFSET","OMIT","ON","ONE","ONLY","OPTION","OR","ORDER","ORDINALITY","OUTER","OUTPUT","OVER","OVERFLOW","PARTITION","PARTITIONS","PASSING","PAST","PATH","PATTERN","PER","PERMUTE","PRECEDING","PRECISION","PREPARE","PRIVILEGES","PROPERTIES","PRUNE","QUOTES","RANGE","READ","RECURSIVE","REFRESH","RENAME","REPEATABLE","RESET","RESPECT","RESTRICT","RETURNING","REVOKE","RIGHT","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","RUNNING","SCALAR","SCHEMA","SCHEMAS","SECURITY","SEEK","SELECT","SERIALIZABLE","SESSION","SET","SETS","SHOW","SKIP","SOME","START","STATS","STRING","SUBSET","SYSTEM","TABLE","TABLES","TABLESAMPLE","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRUE","TYPE","UESCAPE","UNBOUNDED","UNCOMMITTED","UNCONDITIONAL","UNION","UNIQUE","UNKNOWN","UNMATCHED","UNNEST","UPDATE","USE","USER","USING","UTF16","UTF32","UTF8","VALIDATE","VALUE","VALUES","VERBOSE","VIEW","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","ZONE"],types:["BIGINT","INT","INTEGER","SMALLINT","TINYINT","BOOLEAN","DATE","DECIMAL","REAL","DOUBLE","HYPERLOGLOG","QDIGEST","TDIGEST","P4HYPERLOGLOG","INTERVAL","TIMESTAMP","TIME","VARBINARY","VARCHAR","CHAR","ROW","ARRAY","MAP","JSON","JSON2016","IPADDRESS","GEOMETRY","UUID","SETDIGEST","JONIREGEXP","RE2JREGEXP","LIKEPATTERN","COLOR","CODEPOINTS","FUNCTION","JSONPATH"]}),IR=CT(["SELECT [ALL | DISTINCT]"]),NR=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","UPDATE","SET","DELETE FROM","TRUNCATE TABLE","CREATE [OR REPLACE] [MATERIALIZED] VIEW","CREATE TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME COLUMN [IF EXISTS]","RENAME TO","SET AUTHORIZATION [USER | ROLE]","SET PROPERTIES","EXECUTE","ALTER SCHEMA","ALTER MATERIALIZED VIEW","ALTER VIEW","CREATE SCHEMA","CREATE ROLE","DROP SCHEMA","DROP COLUMN","DROP MATERIALIZED VIEW","DROP VIEW","DROP ROLE","EXPLAIN","ANALYZE","EXPLAIN ANALYZE","EXPLAIN ANALYZE VERBOSE","USE","COMMENT ON TABLE","COMMENT ON COLUMN","DESCRIBE INPUT","DESCRIBE OUTPUT","REFRESH MATERIALIZED VIEW","RESET SESSION","SET SESSION","SET PATH","SET TIME ZONE","SHOW GRANTS","SHOW CREATE TABLE","SHOW CREATE SCHEMA","SHOW CREATE VIEW","SHOW CREATE MATERIALIZED VIEW","SHOW TABLES","SHOW SCHEMAS","SHOW CATALOGS","SHOW COLUMNS","SHOW STATS FOR","SHOW ROLES","SHOW CURRENT ROLES","SHOW ROLE GRANTS","SHOW FUNCTIONS","SHOW SESSION","MATCH_RECOGNIZE","MEASURES","ONE ROW PER MATCH","ALL ROWS PER MATCH","AFTER MATCH","PATTERN","SUBSET","DEFINE"]),sR=CT(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),rR=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),_R=CT(["{ROWS | RANGE | GROUPS} BETWEEN"]);const nR=fE({aggregate:["APPROX_COUNT_DISTINCT","AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","STDEV","STDEVP","SUM","VAR","VARP"],analytic:["CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","Collation - COLLATIONPROPERTY","Collation - TERTIARY_WEIGHTS"],configuration:["@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION"],conversion:["CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE"],cryptographic:["ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY"],cursor:["@@CURSOR_ROWS","@@FETCH_STATUS","CURSOR_STATUS"],dataType:["DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY"],datetime:["@@DATEFIRST","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_TIMEZONE_ID","DATEADD","DATEDIFF","DATEDIFF_BIG","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","JSON","ISJSON","JSON_VALUE","JSON_QUERY","JSON_MODIFY"],mathematical:["ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","CHOOSE","GREATEST","IIF","LEAST"],metadata:["@@PROCID","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FILEPROPERTYEX","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","NEXT VALUE FOR","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY"],ranking:["DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME"],security:["CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","DATABASE_PRINCIPAL_ID","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME"],string:["ASCII","CHAR","CHARINDEX","CONCAT","CONCAT_WS","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","NCHAR","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STRING_AGG","STRING_ESCAPE","STUFF","SUBSTRING","TRANSLATE","TRIM","UNICODE","UPPER"],system:["$PARTITION","@@ERROR","@@IDENTITY","@@PACK_RECEIVED","@@ROWCOUNT","@@TRANCOUNT","BINARY_CHECKSUM","CHECKSUM","COMPRESS","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","CURRENT_TRANSACTION_ID","DECOMPRESS","ERROR_LINE","ERROR_MESSAGE","ERROR_NUMBER","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GET_FILESTREAM_TRANSACTION_CONTEXT","GETANSINULL","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","SESSION_CONTEXT","XACT_STATE"],statistical:["@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACK_SENT","@@PACKET_ERRORS","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE","TEXTPTR","TEXTVALID"],trigger:["COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","NUMERIC","FLOAT","REAL","DATETIME2","DATETIMEOFFSET","TIME","CHAR","VARCHAR","NCHAR","NVARCHAR","BINARY","VARBINARY"]}),LR=fE({standard:["ADD","ALL","ALTER","AND","ANY","AS","ASC","AUTHORIZATION","BACKUP","BEGIN","BETWEEN","BREAK","BROWSE","BULK","BY","CASCADE","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLUMN","COMMIT","COMPUTE","CONSTRAINT","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DBCC","DEALLOCATE","DECLARE","DEFAULT","DELETE","DENY","DESC","DISK","DISTINCT","DISTRIBUTED","DOUBLE","DROP","DUMP","ERRLVL","ESCAPE","EXEC","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FILE","FILLFACTOR","FOR","FOREIGN","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GOTO","GRANT","GROUP","HAVING","HOLDLOCK","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IN","INDEX","INNER","INSERT","INTERSECT","INTO","IS","JOIN","KEY","KILL","LEFT","LIKE","LINENO","LOAD","MERGE","NATIONAL","NOCHECK","NONCLUSTERED","NOT","NULL","NULLIF","OF","OFF","OFFSETS","ON","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OUTER","OVER","PERCENT","PIVOT","PLAN","PRECISION","PRIMARY","PRINT","PROC","PROCEDURE","PUBLIC","RAISERROR","READ","READTEXT","RECONFIGURE","REFERENCES","REPLICATION","RESTORE","RESTRICT","RETURN","REVERT","REVOKE","RIGHT","ROLLBACK","ROWCOUNT","ROWGUIDCOL","RULE","SAVE","SCHEMA","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION_USER","SET","SETUSER","SHUTDOWN","SOME","STATISTICS","SYSTEM_USER","TABLE","TABLESAMPLE","TEXTSIZE","THEN","TO","TOP","TRAN","TRANSACTION","TRIGGER","TRUNCATE","TRY_CONVERT","TSEQUAL","UNION","UNIQUE","UNPIVOT","UPDATE","UPDATETEXT","USE","USER","VALUES","VARYING","VIEW","WAITFOR","WHERE","WHILE","WITH","WITHIN GROUP","WRITETEXT"],odbc:["ABSOLUTE","ACTION","ADA","ADD","ALL","ALLOCATE","ALTER","AND","ANY","ARE","AS","ASC","ASSERTION","AT","AUTHORIZATION","AVG","BEGIN","BETWEEN","BIT","BIT_LENGTH","BOTH","BY","CASCADE","CASCADED","CAST","CATALOG","CHAR","CHARACTER","CHARACTER_LENGTH","CHAR_LENGTH","CHECK","CLOSE","COALESCE","COLLATE","COLLATION","COLUMN","COMMIT","CONNECT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTINUE","CONVERT","CORRESPONDING","COUNT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DESCRIBE","DESCRIPTOR","DIAGNOSTICS","DISCONNECT","DISTINCT","DOMAIN","DOUBLE","DROP","END-EXEC","ESCAPE","EXCEPTION","EXEC","EXECUTE","EXISTS","EXTERNAL","EXTRACT","FALSE","FETCH","FIRST","FLOAT","FOR","FOREIGN","FORTRAN","FOUND","FROM","FULL","GET","GLOBAL","GO","GOTO","GRANT","GROUP","HAVING","HOUR","IDENTITY","IMMEDIATE","IN","INCLUDE","INDEX","INDICATOR","INITIALLY","INNER","INPUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","ISOLATION","JOIN","KEY","LANGUAGE","LAST","LEADING","LEFT","LEVEL","LIKE","LOCAL","LOWER","MATCH","MAX","MIN","MINUTE","MODULE","MONTH","NAMES","NATIONAL","NATURAL","NCHAR","NEXT","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OCTET_LENGTH","OF","ONLY","OPEN","OPTION","OR","ORDER","OUTER","OUTPUT","OVERLAPS","PAD","PARTIAL","PASCAL","POSITION","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURE","PUBLIC","READ","REAL","REFERENCES","RELATIVE","RESTRICT","REVOKE","RIGHT","ROLLBACK","ROWS","SCHEMA","SCROLL","SECOND","SECTION","SELECT","SESSION","SESSION_USER","SET","SIZE","SMALLINT","SOME","SPACE","SQL","SQLCA","SQLCODE","SQLERROR","SQLSTATE","SQLWARNING","SUBSTRING","SUM","SYSTEM_USER","TABLE","TEMPORARY","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSACTION","TRANSLATE","TRANSLATION","TRIM","TRUE","UNION","UNIQUE","UNKNOWN","UPDATE","UPPER","USAGE","USER","VALUE","VALUES","VARCHAR","VARYING","VIEW","WHENEVER","WHERE","WITH","WORK","WRITE","YEAR","ZONE"]}),CR=CT(["SELECT [ALL | DISTINCT]"]),aR=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","OFFSET","FETCH {FIRST | NEXT}","INSERT [INTO]","VALUES","UPDATE","SET","WHERE CURRENT OF","DELETE [FROM]","TRUNCATE TABLE","MERGE [INTO]","WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]","UPDATE SET","CREATE [OR ALTER] [MATERIALIZED] VIEW","CREATE TABLE","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD","DROP COLUMN [IF EXISTS]","ALTER COLUMN","ADD SENSITIVITY CLASSIFICATION","ADD SIGNATURE","AGGREGATE","ANSI_DEFAULTS","ANSI_NULLS","ANSI_NULL_DFLT_OFF","ANSI_NULL_DFLT_ON","ANSI_PADDING","ANSI_WARNINGS","APPLICATION ROLE","ARITHABORT","ARITHIGNORE","ASSEMBLY","ASYMMETRIC KEY","AUTHORIZATION","AVAILABILITY GROUP","BACKUP","BACKUP CERTIFICATE","BACKUP MASTER KEY","BACKUP SERVICE MASTER KEY","BEGIN CONVERSATION TIMER","BEGIN DIALOG CONVERSATION","BROKER PRIORITY","BULK INSERT","CERTIFICATE","CLOSE MASTER KEY","CLOSE SYMMETRIC KEY","COLLATE","COLUMN ENCRYPTION KEY","COLUMN MASTER KEY","COLUMNSTORE INDEX","CONCAT_NULL_YIELDS_NULL","CONTEXT_INFO","CONTRACT","CREDENTIAL","CRYPTOGRAPHIC PROVIDER","CURSOR_CLOSE_ON_COMMIT","DATABASE","DATABASE AUDIT SPECIFICATION","DATABASE ENCRYPTION KEY","DATABASE HADR","DATABASE SCOPED CONFIGURATION","DATABASE SCOPED CREDENTIAL","DATABASE SET","DATEFIRST","DATEFORMAT","DEADLOCK_PRIORITY","DENY","DENY XML","DISABLE TRIGGER","ENABLE TRIGGER","END CONVERSATION","ENDPOINT","EVENT NOTIFICATION","EVENT SESSION","EXECUTE AS","EXTERNAL DATA SOURCE","EXTERNAL FILE FORMAT","EXTERNAL LANGUAGE","EXTERNAL LIBRARY","EXTERNAL RESOURCE POOL","EXTERNAL TABLE","FIPS_FLAGGER","FMTONLY","FORCEPLAN","FULLTEXT CATALOG","FULLTEXT INDEX","FULLTEXT STOPLIST","FUNCTION","GET CONVERSATION GROUP","GET_TRANSMISSION_STATUS","GRANT","GRANT XML","IDENTITY_INSERT","IMPLICIT_TRANSACTIONS","INDEX","LANGUAGE","LOCK_TIMEOUT","LOGIN","MASTER KEY","MESSAGE TYPE","MOVE CONVERSATION","NOCOUNT","NOEXEC","NUMERIC_ROUNDABORT","OFFSETS","OPEN MASTER KEY","OPEN SYMMETRIC KEY","PARSEONLY","PARTITION FUNCTION","PARTITION SCHEME","PROCEDURE","QUERY_GOVERNOR_COST_LIMIT","QUEUE","QUOTED_IDENTIFIER","RECEIVE","REMOTE SERVICE BINDING","REMOTE_PROC_TRANSACTIONS","RESOURCE GOVERNOR","RESOURCE POOL","RESTORE","RESTORE FILELISTONLY","RESTORE HEADERONLY","RESTORE LABELONLY","RESTORE MASTER KEY","RESTORE REWINDONLY","RESTORE SERVICE MASTER KEY","RESTORE VERIFYONLY","REVERT","REVOKE","REVOKE XML","ROLE","ROUTE","ROWCOUNT","RULE","SCHEMA","SEARCH PROPERTY LIST","SECURITY POLICY","SELECTIVE XML INDEX","SEND","SENSITIVITY CLASSIFICATION","SEQUENCE","SERVER AUDIT","SERVER AUDIT SPECIFICATION","SERVER CONFIGURATION","SERVER ROLE","SERVICE","SERVICE MASTER KEY","SETUSER","SHOWPLAN_ALL","SHOWPLAN_TEXT","SHOWPLAN_XML","SIGNATURE","SPATIAL INDEX","STATISTICS","STATISTICS IO","STATISTICS PROFILE","STATISTICS TIME","STATISTICS XML","SYMMETRIC KEY","SYNONYM","TABLE","TABLE IDENTITY","TEXTSIZE","TRANSACTION ISOLATION LEVEL","TRIGGER","TYPE","UPDATE STATISTICS","USER","WORKLOAD GROUP","XACT_ABORT","XML INDEX","XML SCHEMA COLLECTION"]),iR=CT(["UNION [ALL]","EXCEPT","INTERSECT"]),oR=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{CROSS | OUTER} APPLY"]),PR=CT(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]);class DR extends JE{tokenizer(){return new nT({reservedClauses:aR,reservedSelect:CR,reservedSetOperations:iR,reservedJoins:oR,reservedPhrases:PR,reservedKeywords:LR,reservedFunctionNames:nR,nestedBlockComments:!0,stringTypes:[{quote:"''-qq",prefixes:["N"]}],identTypes:['""-qq',"[]"],identChars:{first:"#@",rest:"#@$"},paramTypes:{named:["@"],quoted:["@"]},operators:["%","&","|","^","~","!<","!>","+=","-=","*=","/=","%=","|=","&=","^=","::"]})}formatOptions(){return{alwaysDenseOperators:["::"]}}}const MR=fE({all:["ABORT","ABSOLUTE","ACCESS","ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","AGGREGATES","AGGREGATOR","AGGREGATOR_ID","AGGREGATOR_PLAN_HASH","AGGREGATORS","ALGORITHM","ALL","ALSO","ALTER","ALWAYS","ANALYZE","AND","ANY","ARGHISTORY","ARRANGE","ARRANGEMENT","ARRAY","AS","ASC","ASCII","ASENSITIVE","ASM","ASSERTION","ASSIGNMENT","AST","ASYMMETRIC","ASYNC","AT","ATTACH","ATTRIBUTE","AUTHORIZATION","AUTO","AUTO_INCREMENT","AUTO_REPROVISION","AUTOSTATS","AUTOSTATS_CARDINALITY_MODE","AUTOSTATS_ENABLED","AUTOSTATS_HISTOGRAM_MODE","AUTOSTATS_SAMPLING","AVAILABILITY","AVG","AVG_ROW_LENGTH","AVRO","AZURE","BACKGROUND","_BACKGROUND_THREADS_FOR_CLEANUP","BACKUP","BACKUP_HISTORY","BACKUP_ID","BACKWARD","BATCH","BATCHES","BATCH_INTERVAL","_BATCH_SIZE_LIMIT","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","_BINARY","BIT","BLOB","BOOL","BOOLEAN","BOOTSTRAP","BOTH","_BT","BTREE","BUCKET_COUNT","BUCKETS","BY","BYTE","BYTE_LENGTH","CACHE","CALL","CALL_FOR_PIPELINE","CALLED","CAPTURE","CASCADE","CASCADED","CASE","CATALOG","CHAIN","CHANGE","CHAR","CHARACTER","CHARACTERISTICS","CHARSET","CHECK","CHECKPOINT","_CHECK_CAN_CONNECT","_CHECK_CONSISTENCY","CHECKSUM","_CHECKSUM","CLASS","CLEAR","CLIENT","CLIENT_FOUND_ROWS","CLOSE","CLUSTER","CLUSTERED","CNF","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNAR","COLUMNS","COLUMNSTORE","COLUMNSTORE_SEGMENT_ROWS","COMMENT","COMMENTS","COMMIT","COMMITTED","_COMMIT_LOG_TAIL","COMPACT","COMPILE","COMPRESSED","COMPRESSION","CONCURRENT","CONCURRENTLY","CONDITION","CONFIGURATION","CONNECTION","CONNECTIONS","CONFIG","CONSTRAINT","CONTAINS","CONTENT","CONTINUE","_CONTINUE_REPLAY","CONVERSION","CONVERT","COPY","_CORE","COST","CREATE","CREDENTIALS","CROSS","CUBE","CSV","CUME_DIST","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_SCHEMA","CURRENT_SECURITY_GROUPS","CURRENT_SECURITY_ROLES","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DATABASES","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINED","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELIMITER","DELIMITERS","DENSE_RANK","DESC","DESCRIBE","DETACH","DETERMINISTIC","DICTIONARY","DIFFERENTIAL","DIRECTORY","DISABLE","DISCARD","_DISCONNECT","DISK","DISTINCT","DISTINCTROW","DISTRIBUTED_JOINS","DIV","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","_DROP_PROFILE","DUAL","DUMP","DUPLICATE","DURABILITY","DYNAMIC","EARLIEST","EACH","ECHO","ELECTION","ELSE","ELSEIF","ENABLE","ENCLOSED","ENCODING","ENCRYPTED","END","ENGINE","ENGINES","ENUM","ERRORS","ESCAPE","ESCAPED","ESTIMATE","EVENT","EVENTS","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTENDED","EXTENSION","EXTERNAL","EXTERNAL_HOST","EXTERNAL_PORT","EXTRACTOR","EXTRACTORS","EXTRA_JOIN","_FAILOVER","FAILED_LOGIN_ATTEMPTS","FAILURE","FALSE","FAMILY","FAULT","FETCH","FIELDS","FILE","FILES","FILL","FIX_ALTER","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOR","FORCE","FORCE_COMPILED_MODE","FORCE_INTERPRETER_MODE","FOREGROUND","FOREIGN","FORMAT","FORWARD","FREEZE","FROM","FS","_FSYNC","FULL","FULLTEXT","FUNCTION","FUNCTIONS","GC","GCS","GET_FORMAT","_GC","_GCX","GENERATE","GEOGRAPHY","GEOGRAPHYPOINT","GEOMETRY","GEOMETRYPOINT","GLOBAL","_GLOBAL_VERSION_TIMESTAMP","GRANT","GRANTED","GRANTS","GROUP","GROUPING","GROUPS","GZIP","HANDLE","HANDLER","HARD_CPU_LIMIT_PERCENTAGE","HASH","HAS_TEMP_TABLES","HAVING","HDFS","HEADER","HEARTBEAT_NO_LOGGING","HIGH_PRIORITY","HISTOGRAM","HOLD","HOLDING","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IDENTITY","IF","IGNORE","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDING","INCREMENT","INCREMENTAL","INDEX","INDEXES","INFILE","INHERIT","INHERITS","_INIT_PROFILE","INIT","INITIALIZE","INITIALLY","INJECT","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTANCE","INSTEAD","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","_INTERNAL_DYNAMIC_TYPECAST","INTERPRETER_MODE","INTERSECT","INTERVAL","INTO","INVOKER","ISOLATION","ITERATE","JOIN","JSON","KAFKA","KEY","KEY_BLOCK_SIZE","KEYS","KILL","KILLALL","LABEL","LAG","LANGUAGE","LARGE","LAST","LAST_VALUE","LATERAL","LATEST","LC_COLLATE","LC_CTYPE","LEAD","LEADING","LEAF","LEAKPROOF","LEAVE","LEAVES","LEFT","LEVEL","LICENSE","LIKE","LIMIT","LINES","LISTEN","LLVM","LOADDATA_WHERE","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","_LS","LZ4","MANAGEMENT","_MANAGEMENT_THREAD","MAPPING","MASTER","MATCH","MATERIALIZED","MAXVALUE","MAX_CONCURRENCY","MAX_ERRORS","MAX_PARTITIONS_PER_BATCH","MAX_QUEUE_DEPTH","MAX_RETRIES_PER_BATCH_PARTITION","MAX_ROWS","MBC","MPL","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MEMORY_PERCENTAGE","_MEMSQL_TABLE_ID_LOOKUP","MEMSQL","MEMSQL_DESERIALIZE","MEMSQL_IMITATING_KAFKA","MEMSQL_SERIALIZE","MERGE","METADATA","MICROSECOND","MIDDLEINT","MIN_ROWS","MINUS","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MOD","MODE","MODEL","MODIFIES","MODIFY","MONTH","MOVE","MPL","NAMES","NAMED","NAMESPACE","NATIONAL","NATURAL","NCHAR","NEXT","NO","NODE","NONE","NO_QUERY_REWRITE","NOPARAM","NOT","NOTHING","NOTIFY","NOWAIT","NO_WRITE_TO_BINLOG","NO_QUERY_REWRITE","NORELY","NTH_VALUE","NTILE","NULL","NULLCOLS","NULLS","NUMERIC","NVARCHAR","OBJECT","OF","OFF","OFFLINE","OFFSET","OFFSETS","OIDS","ON","ONLINE","ONLY","OPEN","OPERATOR","OPTIMIZATION","OPTIMIZE","OPTIMIZER","OPTIMIZER_STATE","OPTION","OPTIONS","OPTIONALLY","OR","ORDER","ORDERED_SERIALIZE","ORPHAN","OUT","OUT_OF_ORDER","OUTER","OUTFILE","OVER","OVERLAPS","OVERLAY","OWNED","OWNER","PACK_KEYS","PAIRED","PARSER","PARQUET","PARTIAL","PARTITION","PARTITION_ID","PARTITIONING","PARTITIONS","PASSING","PASSWORD","PASSWORD_LOCK_TIME","PAUSE","_PAUSE_REPLAY","PERIODIC","PERSISTED","PIPELINE","PIPELINES","PLACING","PLAN","PLANS","PLANCACHE","PLUGINS","POOL","POOLS","PORT","PRECEDING","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROGRAM","PROMOTE","PROXY","PURGE","QUARTER","QUERIES","QUERY","QUERY_TIMEOUT","QUEUE","RANGE","RANK","READ","_READ","READS","REAL","REASSIGN","REBALANCE","RECHECK","RECORD","RECURSIVE","REDUNDANCY","REDUNDANT","REF","REFERENCE","REFERENCES","REFRESH","REGEXP","REINDEX","RELATIVE","RELEASE","RELOAD","RELY","REMOTE","REMOVE","RENAME","REPAIR","_REPAIR_TABLE","REPEAT","REPEATABLE","_REPL","_REPROVISIONING","REPLACE","REPLICA","REPLICATE","REPLICATING","REPLICATION","REQUIRE","RESOURCE","RESOURCE_POOL","RESET","RESTART","RESTORE","RESTRICT","RESULT","_RESURRECT","RETRY","RETURN","RETURNING","RETURNS","REVERSE","RG_POOL","REVOKE","RIGHT","RIGHT_ANTI_JOIN","RIGHT_SEMI_JOIN","RIGHT_STRAIGHT_JOIN","RLIKE","ROLES","ROLLBACK","ROLLUP","ROUTINE","ROW","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","ROWS","ROWSTORE","RULE","_RPC","RUNNING","S3","SAFE","SAVE","SAVEPOINT","SCALAR","SCHEMA","SCHEMAS","SCHEMA_BINDING","SCROLL","SEARCH","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SEMI_JOIN","_SEND_THREADS","SENSITIVE","SEPARATOR","SEQUENCE","SEQUENCES","SERIAL","SERIALIZABLE","SERIES","SERVICE_USER","SERVER","SESSION","SESSION_USER","SET","SETOF","SECURITY_LISTS_INTERSECT","SHA","SHARD","SHARDED","SHARDED_ID","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMILAR","SIMPLE","SITE","SKIP","SKIPPED_BATCHES","__SLEEP","SMALLINT","SNAPSHOT","_SNAPSHOT","_SNAPSHOTS","SOFT_CPU_LIMIT_PERCENTAGE","SOME","SONAME","SPARSE","SPATIAL","SPATIAL_CHECK_INDEX","SPECIFIC","SQL","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQLEXCEPTION","SQL_MODE","SQL_NO_CACHE","SQL_NO_LOGGING","SQL_SMALL_RESULT","SQLSTATE","SQLWARNING","STDIN","STDOUT","STOP","STORAGE","STRAIGHT_JOIN","STRICT","STRING","STRIP","SUCCESS","SUPER","SYMMETRIC","SYNC_SNAPSHOT","SYNC","_SYNC","_SYNC2","_SYNC_PARTITIONS","_SYNC_SNAPSHOT","SYNCHRONIZE","SYSID","SYSTEM","TABLE","TABLE_CHECKSUM","TABLES","TABLESPACE","TAGS","TARGET_SIZE","TASK","TEMP","TEMPLATE","TEMPORARY","TEMPTABLE","_TERM_BUMP","TERMINATE","TERMINATED","TEXT","THEN","TIME","TIMEOUT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMEZONE","TINYBLOB","TINYINT","TINYTEXT","TO","TRACELOGS","TRADITIONAL","TRAILING","TRANSFORM","TRANSACTION","_TRANSACTIONS_EXPERIMENTAL","TREAT","TRIGGER","TRIGGERS","TRUE","TRUNC","TRUNCATE","TRUSTED","TWO_PHASE","_TWOPCID","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNENCRYPTED","UNENFORCED","UNHOLD","UNICODE","UNION","UNIQUE","_UNITTEST","UNKNOWN","UNLISTEN","_UNLOAD","UNLOCK","UNLOGGED","UNPIVOT","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USERS","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","_UTF8","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARIADIC","VARYING","VERBOSE","VIEW","VOID","VOLATILE","VOTING","WAIT","_WAKE","WARNINGS","WEEK","WHEN","WHERE","WHILE","WHITESPACE","WINDOW","WITH","WITHOUT","WITHIN","_WM_HEARTBEAT","WORK","WORKLOAD","WRAPPER","WRITE","XACT_ID","XOR","YEAR","YEAR_MONTH","YES","ZEROFILL","ZONE"]}),UR=fE({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_ACCUMULATE","APPROX_COUNT_DISTINCT_COMBINE","APPROX_COUNT_DISTINCT_ESTIMATE","APPROX_GEOGRAPHY_INTERSECTS","APPROX_PERCENTILE","ASCII","ASIN","ATAN","ATAN2","AVG","BIN","BINARY","BIT_AND","BIT_COUNT","BIT_OR","BIT_XOR","CAST","CEIL","CEILING","CHAR","CHARACTER_LENGTH","CHAR_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COLLECT","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATEDIFF","DATE_FORMAT","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT","DEGREES","DENSE_RANK","DIV","DOT_PRODUCT","ELT","EUCLIDEAN_DISTANCE","EXP","EXTRACT","FIELD","FIRST","FIRST_VALUE","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOGRAPHY_AREA","GEOGRAPHY_CONTAINS","GEOGRAPHY_DISTANCE","GEOGRAPHY_INTERSECTS","GEOGRAPHY_LATITUDE","GEOGRAPHY_LENGTH","GEOGRAPHY_LONGITUDE","GEOGRAPHY_POINT","GEOGRAPHY_WITHIN_DISTANCE","GEOMETRY_AREA","GEOMETRY_CONTAINS","GEOMETRY_DISTANCE","GEOMETRY_FILTER","GEOMETRY_INTERSECTS","GEOMETRY_LENGTH","GEOMETRY_POINT","GEOMETRY_WITHIN_DISTANCE","GEOMETRY_X","GEOMETRY_Y","GREATEST","GROUPING","GROUP_CONCAT","HEX","HIGHLIGHT","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INITCAP","INSERT","INSTR","INTERVAL","IS","IS NULL","JSON_AGG","JSON_ARRAY_CONTAINS_DOUBLE","JSON_ARRAY_CONTAINS_JSON","JSON_ARRAY_CONTAINS_STRING","JSON_ARRAY_PUSH_DOUBLE","JSON_ARRAY_PUSH_JSON","JSON_ARRAY_PUSH_STRING","JSON_DELETE_KEY","JSON_EXTRACT_DOUBLE","JSON_EXTRACT_JSON","JSON_EXTRACT_STRING","JSON_EXTRACT_BIGINT","JSON_GET_TYPE","JSON_LENGTH","JSON_SET_DOUBLE","JSON_SET_JSON","JSON_SET_STRING","JSON_SPLICE_DOUBLE","JSON_SPLICE_JSON","JSON_SPLICE_STRING","LAG","LAST_DAY","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LN","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LPAD","LTRIM","MATCH","MAX","MD5","MEDIAN","MICROSECOND","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","NOT","NOW","NTH_VALUE","NTILE","NULLIF","OCTET_LENGTH","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIVOT","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANK","REGEXP","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCALAR","SCHEMA","SEC_TO_TIME","SHA1","SHA2","SIGMOID","SIGN","SIN","SLEEP","SPLIT","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUM","SYS_GUID","TAN","TIME","TIMEDIFF","TIME_BUCKET","TIME_FORMAT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_JSON","TO_NUMBER","TO_SECONDS","TO_TIMESTAMP","TRIM","TRUNC","TRUNCATE","UCASE","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","VALUES","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_SUB","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","YEAR","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]}),lR=CT(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),cR=CT(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [IGNORE] [INTO]","VALUES","REPLACE [INTO]","UPDATE","SET","DELETE [FROM]","TRUNCATE [TABLE]","CREATE VIEW","CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] [EXTERNAL] FUNCTION","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] TABLE","ADD [COLUMN]","ADD [UNIQUE] {INDEX | KEY}","DROP [COLUMN]","MODIFY [COLUMN]","CHANGE","RENAME [TO | AS]","ADD AGGREGATOR","ADD LEAF","AGGREGATOR SET AS MASTER","ALTER DATABASE","ALTER PIPELINE","ALTER RESOURCE POOL","ALTER USER","ALTER VIEW","ANALYZE TABLE","ATTACH DATABASE","ATTACH LEAF","ATTACH LEAF ALL","BACKUP DATABASE","BINLOG","BOOTSTRAP AGGREGATOR","CACHE INDEX","CALL","CHANGE","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK BLOB CHECKSUM","CHECK TABLE","CHECKSUM TABLE","CLEAR ORPHAN DATABASES","CLONE","COMMIT","CREATE DATABASE","CREATE GROUP","CREATE INDEX","CREATE LINK","CREATE MILESTONE","CREATE PIPELINE","CREATE RESOURCE POOL","CREATE ROLE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DETACH DATABASE","DETACH PIPELINE","DO","DROP DATABASE","DROP FUNCTION","DROP INDEX","DROP LINK","DROP PIPELINE","DROP PROCEDURE","DROP RESOURCE POOL","DROP ROLE","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","FORCE","GRANT","HANDLER","HELP","KILL CONNECTION","KILLALL QUERIES","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","REBALANCE PARTITIONS","RELEASE SAVEPOINT","REMOVE AGGREGATOR","REMOVE LEAF","REPAIR TABLE","REPLACE","REPLICATE DATABASE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","RESTORE DATABASE","RESTORE REDUNDANCY","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE FUNCTION","SHOW CREATE PIPELINE","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SNAPSHOT DATABASE","SOURCE_POS_WAIT","START GROUP_REPLICATION","START PIPELINE","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP PIPELINE","STOP REPLICA","STOP REPLICATING","STOP SLAVE","TEST PIPELINE","TRUNCATE TABLE","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),uR=CT(["UNION [ALL | DISTINCT]","EXCEPT","INTERSECT","MINUS"]),dR=CT(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),GR=CT(["ON DELETE","ON UPDATE","CHARACTER SET","{ROWS | RANGE} BETWEEN"]);function pR(E){return E.map(((T,e)=>{const R=E[e+1]||AE;return tE.SET(T)&&"("===R.text?{...T,type:eE.RESERVED_FUNCTION_NAME}:T}))}const hR=fE({all:["ABS","ACOS","ACOSH","ADD_MONTHS","ALL_USER_NAMES","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","APPROX_PERCENTILE_ACCUMULATE","APPROX_PERCENTILE_COMBINE","APPROX_PERCENTILE_ESTIMATE","APPROX_TOP_K","APPROX_TOP_K_ACCUMULATE","APPROX_TOP_K_COMBINE","APPROX_TOP_K_ESTIMATE","APPROXIMATE_JACCARD_INDEX","APPROXIMATE_SIMILARITY","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_COMPACT","ARRAY_CONSTRUCT","ARRAY_CONSTRUCT_COMPACT","ARRAY_CONTAINS","ARRAY_INSERT","ARRAY_INTERSECTION","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_SIZE","ARRAY_SLICE","ARRAY_TO_STRING","ARRAY_UNION_AGG","ARRAY_UNIQUE_AGG","ARRAYS_OVERLAP","AS_ARRAY","AS_BINARY","AS_BOOLEAN","AS_CHAR","AS_VARCHAR","AS_DATE","AS_DECIMAL","AS_NUMBER","AS_DOUBLE","AS_REAL","AS_INTEGER","AS_OBJECT","AS_TIME","AS_TIMESTAMP_LTZ","AS_TIMESTAMP_NTZ","AS_TIMESTAMP_TZ","ASCII","ASIN","ASINH","ATAN","ATAN2","ATANH","AUTO_REFRESH_REGISTRATION_HISTORY","AUTOMATIC_CLUSTERING_HISTORY","AVG","BASE64_DECODE_BINARY","BASE64_DECODE_STRING","BASE64_ENCODE","BIT_LENGTH","BITAND","BITAND_AGG","BITMAP_BIT_POSITION","BITMAP_BUCKET_NUMBER","BITMAP_CONSTRUCT_AGG","BITMAP_COUNT","BITMAP_OR_AGG","BITNOT","BITOR","BITOR_AGG","BITSHIFTLEFT","BITSHIFTRIGHT","BITXOR","BITXOR_AGG","BOOLAND","BOOLAND_AGG","BOOLNOT","BOOLOR","BOOLOR_AGG","BOOLXOR","BOOLXOR_AGG","BUILD_SCOPED_FILE_URL","BUILD_STAGE_FILE_URL","CASE","CAST","CBRT","CEIL","CHARINDEX","CHECK_JSON","CHECK_XML","CHR","CHAR","COALESCE","COLLATE","COLLATION","COMPLETE_TASK_GRAPHS","COMPRESS","CONCAT","CONCAT_WS","CONDITIONAL_CHANGE_EVENT","CONDITIONAL_TRUE_EVENT","CONTAINS","CONVERT_TIMEZONE","COPY_HISTORY","CORR","COS","COSH","COT","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CUME_DIST","CURRENT_ACCOUNT","CURRENT_AVAILABLE_ROLES","CURRENT_CLIENT","CURRENT_DATABASE","CURRENT_DATE","CURRENT_IP_ADDRESS","CURRENT_REGION","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SECONDARY_ROLES","CURRENT_SESSION","CURRENT_STATEMENT","CURRENT_TASK_GRAPHS","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TRANSACTION","CURRENT_USER","CURRENT_VERSION","CURRENT_WAREHOUSE","DATA_TRANSFER_HISTORY","DATABASE_REFRESH_HISTORY","DATABASE_REFRESH_PROGRESS","DATABASE_REFRESH_PROGRESS_BY_JOB","DATABASE_STORAGE_USAGE_HISTORY","DATE_FROM_PARTS","DATE_PART","DATE_TRUNC","DATEADD","DATEDIFF","DAYNAME","DECODE","DECOMPRESS_BINARY","DECOMPRESS_STRING","DECRYPT","DECRYPT_RAW","DEGREES","DENSE_RANK","DIV0","EDITDISTANCE","ENCRYPT","ENCRYPT_RAW","ENDSWITH","EQUAL_NULL","EXP","EXPLAIN_JSON","EXTERNAL_FUNCTIONS_HISTORY","EXTERNAL_TABLE_FILES","EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY","EXTRACT","EXTRACT_SEMANTIC_CATEGORIES","FACTORIAL","FIRST_VALUE","FLATTEN","FLOOR","GENERATE_COLUMN_DESCRIPTION","GENERATOR","GET","GET_ABSOLUTE_PATH","GET_DDL","GET_IGNORE_CASE","GET_OBJECT_REFERENCES","GET_PATH","GET_PRESIGNED_URL","GET_RELATIVE_PATH","GET_STAGE_LOCATION","GETBIT","GREATEST","GROUPING","GROUPING_ID","HASH","HASH_AGG","HAVERSINE","HEX_DECODE_BINARY","HEX_DECODE_STRING","HEX_ENCODE","HLL","HLL_ACCUMULATE","HLL_COMBINE","HLL_ESTIMATE","HLL_EXPORT","HLL_IMPORT","HOUR","MINUTE","SECOND","IFF","IFNULL","ILIKE","ILIKE ANY","INFER_SCHEMA","INITCAP","INSERT","INVOKER_ROLE","INVOKER_SHARE","IS_ARRAY","IS_BINARY","IS_BOOLEAN","IS_CHAR","IS_VARCHAR","IS_DATE","IS_DATE_VALUE","IS_DECIMAL","IS_DOUBLE","IS_REAL","IS_GRANTED_TO_INVOKER_ROLE","IS_INTEGER","IS_NULL_VALUE","IS_OBJECT","IS_ROLE_IN_SESSION","IS_TIME","IS_TIMESTAMP_LTZ","IS_TIMESTAMP_NTZ","IS_TIMESTAMP_TZ","JAROWINKLER_SIMILARITY","JSON_EXTRACT_PATH_TEXT","KURTOSIS","LAG","LAST_DAY","LAST_QUERY_ID","LAST_TRANSACTION","LAST_VALUE","LEAD","LEAST","LEFT","LENGTH","LEN","LIKE","LIKE ALL","LIKE ANY","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOGIN_HISTORY","LOGIN_HISTORY_BY_USER","LOWER","LPAD","LTRIM","MATERIALIZED_VIEW_REFRESH_HISTORY","MD5","MD5_HEX","MD5_BINARY","MD5_NUMBER — Obsoleted","MD5_NUMBER_LOWER64","MD5_NUMBER_UPPER64","MEDIAN","MIN","MAX","MINHASH","MINHASH_COMBINE","MOD","MODE","MONTHNAME","MONTHS_BETWEEN","NEXT_DAY","NORMAL","NTH_VALUE","NTILE","NULLIF","NULLIFZERO","NVL","NVL2","OBJECT_AGG","OBJECT_CONSTRUCT","OBJECT_CONSTRUCT_KEEP_NULL","OBJECT_DELETE","OBJECT_INSERT","OBJECT_KEYS","OBJECT_PICK","OCTET_LENGTH","PARSE_IP","PARSE_JSON","PARSE_URL","PARSE_XML","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIPE_USAGE_HISTORY","POLICY_CONTEXT","POLICY_REFERENCES","POSITION","POW","POWER","PREVIOUS_DAY","QUERY_ACCELERATION_HISTORY","QUERY_HISTORY","QUERY_HISTORY_BY_SESSION","QUERY_HISTORY_BY_USER","QUERY_HISTORY_BY_WAREHOUSE","RADIANS","RANDOM","RANDSTR","RANK","RATIO_TO_REPORT","REGEXP","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REGEXP_SUBSTR_ALL","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REGR_VALX","REGR_VALY","REPEAT","REPLACE","REPLICATION_GROUP_REFRESH_HISTORY","REPLICATION_GROUP_REFRESH_PROGRESS","REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB","REPLICATION_GROUP_USAGE_HISTORY","REPLICATION_USAGE_HISTORY","REST_EVENT_HISTORY","RESULT_SCAN","REVERSE","RIGHT","RLIKE","ROUND","ROW_NUMBER","RPAD","RTRIM","RTRIMMED_LENGTH","SEARCH_OPTIMIZATION_HISTORY","SEQ1","SEQ2","SEQ4","SEQ8","SERVERLESS_TASK_HISTORY","SHA1","SHA1_HEX","SHA1_BINARY","SHA2","SHA2_HEX","SHA2_BINARY","SIGN","SIN","SINH","SKEW","SOUNDEX","SPACE","SPLIT","SPLIT_PART","SPLIT_TO_TABLE","SQRT","SQUARE","ST_AREA","ST_ASEWKB","ST_ASEWKT","ST_ASGEOJSON","ST_ASWKB","ST_ASBINARY","ST_ASWKT","ST_ASTEXT","ST_AZIMUTH","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DWITHIN","ST_ENDPOINT","ST_ENVELOPE","ST_GEOGFROMGEOHASH","ST_GEOGPOINTFROMGEOHASH","ST_GEOGRAPHYFROMWKB","ST_GEOGRAPHYFROMWKT","ST_GEOHASH","ST_GEOMETRYFROMWKB","ST_GEOMETRYFROMWKT","ST_HAUSDORFFDISTANCE","ST_INTERSECTION","ST_INTERSECTS","ST_LENGTH","ST_MAKEGEOMPOINT","ST_GEOM_POINT","ST_MAKELINE","ST_MAKEPOINT","ST_POINT","ST_MAKEPOLYGON","ST_POLYGON","ST_NPOINTS","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SETSRID","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY","STAGE_STORAGE_USAGE_HISTORY","STARTSWITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRIP_NULL_VALUE","STRTOK","STRTOK_SPLIT_TO_TABLE","STRTOK_TO_ARRAY","SUBSTR","SUBSTRING","SUM","SYSDATE","SYSTEM$ABORT_SESSION","SYSTEM$ABORT_TRANSACTION","SYSTEM$AUTHORIZE_PRIVATELINK","SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS","SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS","SYSTEM$CANCEL_ALL_QUERIES","SYSTEM$CANCEL_QUERY","SYSTEM$CLUSTERING_DEPTH","SYSTEM$CLUSTERING_INFORMATION","SYSTEM$CLUSTERING_RATIO ","SYSTEM$CURRENT_USER_TASK_NAME","SYSTEM$DATABASE_REFRESH_HISTORY ","SYSTEM$DATABASE_REFRESH_PROGRESS","SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ","SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$DISABLE_DATABASE_REPLICATION","SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$ESTIMATE_QUERY_ACCELERATION","SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS","SYSTEM$EXPLAIN_JSON_TO_TEXT","SYSTEM$EXPLAIN_PLAN_JSON","SYSTEM$EXTERNAL_TABLE_PIPE_STATUS","SYSTEM$GENERATE_SAML_CSR","SYSTEM$GENERATE_SCIM_ACCESS_TOKEN","SYSTEM$GET_AWS_SNS_IAM_POLICY","SYSTEM$GET_PREDECESSOR_RETURN_VALUE","SYSTEM$GET_PRIVATELINK","SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS","SYSTEM$GET_PRIVATELINK_CONFIG","SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO","SYSTEM$GET_TAG","SYSTEM$GET_TAG_ALLOWED_VALUES","SYSTEM$GET_TAG_ON_CURRENT_COLUMN","SYSTEM$GET_TAG_ON_CURRENT_TABLE","SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER","SYSTEM$LAST_CHANGE_COMMIT_TIME","SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME","SYSTEM$MIGRATE_SAML_IDP_REGISTRATION","SYSTEM$PIPE_FORCE_RESUME","SYSTEM$PIPE_STATUS","SYSTEM$REVOKE_PRIVATELINK","SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS","SYSTEM$SET_RETURN_VALUE","SYSTEM$SHOW_OAUTH_CLIENT_SECRETS","SYSTEM$STREAM_GET_TABLE_TIMESTAMP","SYSTEM$STREAM_HAS_DATA","SYSTEM$TASK_DEPENDENTS_ENABLE","SYSTEM$TYPEOF","SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS","SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN","SYSTEM$WAIT","SYSTEM$WHITELIST","SYSTEM$WHITELIST_PRIVATELINK","TAG_REFERENCES","TAG_REFERENCES_ALL_COLUMNS","TAG_REFERENCES_WITH_LINEAGE","TAN","TANH","TASK_DEPENDENTS","TASK_HISTORY","TIME_FROM_PARTS","TIME_SLICE","TIMEADD","TIMEDIFF","TIMESTAMP_FROM_PARTS","TIMESTAMPADD","TIMESTAMPDIFF","TO_ARRAY","TO_BINARY","TO_BOOLEAN","TO_CHAR","TO_VARCHAR","TO_DATE","DATE","TO_DECIMAL","TO_NUMBER","TO_NUMERIC","TO_DOUBLE","TO_GEOGRAPHY","TO_GEOMETRY","TO_JSON","TO_OBJECT","TO_TIME","TIME","TO_TIMESTAMP","TO_TIMESTAMP_LTZ","TO_TIMESTAMP_NTZ","TO_TIMESTAMP_TZ","TO_VARIANT","TO_XML","TRANSLATE","TRIM","TRUNCATE","TRUNC","TRUNC","TRY_BASE64_DECODE_BINARY","TRY_BASE64_DECODE_STRING","TRY_CAST","TRY_HEX_DECODE_BINARY","TRY_HEX_DECODE_STRING","TRY_PARSE_JSON","TRY_TO_BINARY","TRY_TO_BOOLEAN","TRY_TO_DATE","TRY_TO_DECIMAL","TRY_TO_NUMBER","TRY_TO_NUMERIC","TRY_TO_DOUBLE","TRY_TO_GEOGRAPHY","TRY_TO_GEOMETRY","TRY_TO_TIME","TRY_TO_TIMESTAMP","TRY_TO_TIMESTAMP_LTZ","TRY_TO_TIMESTAMP_NTZ","TRY_TO_TIMESTAMP_TZ","TYPEOF","UNICODE","UNIFORM","UPPER","UUID_STRING","VALIDATE","VALIDATE_PIPE_LOAD","VAR_POP","VAR_SAMP","VARIANCE","VARIANCE_SAMP","VARIANCE_POP","WAREHOUSE_LOAD_HISTORY","WAREHOUSE_METERING_HISTORY","WIDTH_BUCKET","XMLGET","YEAR","YEAROFWEEK","YEAROFWEEKISO","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEKISO","DAYOFYEAR","WEEK","WEEK","WEEKOFYEAR","WEEKISO","MONTH","QUARTER","ZEROIFNULL","ZIPF"]}),HR=fE({all:["ACCOUNT","ALL","ALTER","AND","ANY","AS","BETWEEN","BY","CASE","CAST","CHECK","COLUMN","CONNECT","CONNECTION","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATABASE","DELETE","DISTINCT","DROP","ELSE","EXISTS","FALSE","FOLLOWING","FOR","FROM","FULL","GRANT","GROUP","GSCLUSTER","HAVING","ILIKE","IN","INCREMENT","INNER","INSERT","INTERSECT","INTO","IS","ISSUE","JOIN","LATERAL","LEFT","LIKE","LOCALTIME","LOCALTIMESTAMP","MINUS","NATURAL","NOT","NULL","OF","ON","OR","ORDER","ORGANIZATION","QUALIFY","REGEXP","REVOKE","RIGHT","RLIKE","ROW","ROWS","SAMPLE","SCHEMA","SELECT","SET","SOME","START","TABLE","TABLESAMPLE","THEN","TO","TRIGGER","TRUE","TRY_CAST","UNION","UNIQUE","UPDATE","USING","VALUES","VIEW","WHEN","WHENEVER","WHERE","WITH"]}),mR=CT(["SELECT [ALL | DISTINCT]"]),BR=CT(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH [FIRST | NEXT]","INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]","{THEN | ELSE} INTO","VALUES","UPDATE","SET","DELETE FROM","TRUNCATE [TABLE] [IF EXISTS]","CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]","CLUSTER BY","[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}","COPY GRANTS","USING TEMPLATE","MERGE INTO","WHEN MATCHED [AND]","THEN {UPDATE SET | DELETE}","WHEN NOT MATCHED THEN INSERT","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","RENAME TO","SWAP WITH","[SUSPEND | RESUME] RECLUSTER","DROP CLUSTERING KEY","ADD [COLUMN]","RENAME COLUMN","{ALTER | MODIFY} [COLUMN]","DROP [COLUMN]","{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]","RENAME CONSTRAINT","{ADD | DROP} SEARCH OPTIMIZATION","{SET | UNSET} [TAG]","{ADD | DROP} ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","[SET DATA] TYPE","[UNSET] COMMENT","{SET | UNSET} MASKING POLICY","ALTER ACCOUNT","ALTER API INTEGRATION","ALTER CONNECTION","ALTER DATABASE","ALTER EXTERNAL TABLE","ALTER FAILOVER GROUP","ALTER FILE FORMAT","ALTER FUNCTION","ALTER INTEGRATION","ALTER MASKING POLICY","ALTER MATERIALIZED VIEW","ALTER NETWORK POLICY","ALTER NOTIFICATION INTEGRATION","ALTER PIPE","ALTER PROCEDURE","ALTER REPLICATION GROUP","ALTER RESOURCE MONITOR","ALTER ROLE","ALTER ROW ACCESS POLICY","ALTER SCHEMA","ALTER SECURITY INTEGRATION","ALTER SEQUENCE","ALTER SESSION","ALTER SESSION POLICY","ALTER SHARE","ALTER STAGE","ALTER STORAGE INTEGRATION","ALTER STREAM","ALTER TAG","ALTER TASK","ALTER USER","ALTER VIEW","ALTER WAREHOUSE","BEGIN","CALL","COMMIT","COPY INTO","CREATE ACCOUNT","CREATE API INTEGRATION","CREATE CONNECTION","CREATE DATABASE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL TABLE","CREATE FAILOVER GROUP","CREATE FILE FORMAT","CREATE FUNCTION","CREATE INTEGRATION","CREATE MANAGED ACCOUNT","CREATE MASKING POLICY","CREATE MATERIALIZED VIEW","CREATE NETWORK POLICY","CREATE NOTIFICATION INTEGRATION","CREATE PIPE","CREATE PROCEDURE","CREATE REPLICATION GROUP","CREATE RESOURCE MONITOR","CREATE ROLE","CREATE ROW ACCESS POLICY","CREATE SCHEMA","CREATE SECURITY INTEGRATION","CREATE SEQUENCE","CREATE SESSION POLICY","CREATE SHARE","CREATE STAGE","CREATE STORAGE INTEGRATION","CREATE STREAM","CREATE TAG","CREATE TASK","CREATE USER","CREATE WAREHOUSE","DELETE","DESCRIBE DATABASE","DESCRIBE EXTERNAL TABLE","DESCRIBE FILE FORMAT","DESCRIBE FUNCTION","DESCRIBE INTEGRATION","DESCRIBE MASKING POLICY","DESCRIBE MATERIALIZED VIEW","DESCRIBE NETWORK POLICY","DESCRIBE PIPE","DESCRIBE PROCEDURE","DESCRIBE RESULT","DESCRIBE ROW ACCESS POLICY","DESCRIBE SCHEMA","DESCRIBE SEQUENCE","DESCRIBE SESSION POLICY","DESCRIBE SHARE","DESCRIBE STAGE","DESCRIBE STREAM","DESCRIBE TABLE","DESCRIBE TASK","DESCRIBE TRANSACTION","DESCRIBE USER","DESCRIBE VIEW","DESCRIBE WAREHOUSE","DROP CONNECTION","DROP DATABASE","DROP EXTERNAL TABLE","DROP FAILOVER GROUP","DROP FILE FORMAT","DROP FUNCTION","DROP INTEGRATION","DROP MANAGED ACCOUNT","DROP MASKING POLICY","DROP MATERIALIZED VIEW","DROP NETWORK POLICY","DROP PIPE","DROP PROCEDURE","DROP REPLICATION GROUP","DROP RESOURCE MONITOR","DROP ROLE","DROP ROW ACCESS POLICY","DROP SCHEMA","DROP SEQUENCE","DROP SESSION POLICY","DROP SHARE","DROP STAGE","DROP STREAM","DROP TAG","DROP TASK","DROP USER","DROP VIEW","DROP WAREHOUSE","EXECUTE IMMEDIATE","EXECUTE TASK","EXPLAIN","GET","GRANT OWNERSHIP","GRANT ROLE","INSERT","LIST","MERGE","PUT","REMOVE","REVOKE ROLE","ROLLBACK","SHOW COLUMNS","SHOW CONNECTIONS","SHOW DATABASES","SHOW DATABASES IN FAILOVER GROUP","SHOW DATABASES IN REPLICATION GROUP","SHOW DELEGATED AUTHORIZATIONS","SHOW EXTERNAL FUNCTIONS","SHOW EXTERNAL TABLES","SHOW FAILOVER GROUPS","SHOW FILE FORMATS","SHOW FUNCTIONS","SHOW GLOBAL ACCOUNTS","SHOW GRANTS","SHOW INTEGRATIONS","SHOW LOCKS","SHOW MANAGED ACCOUNTS","SHOW MASKING POLICIES","SHOW MATERIALIZED VIEWS","SHOW NETWORK POLICIES","SHOW OBJECTS","SHOW ORGANIZATION ACCOUNTS","SHOW PARAMETERS","SHOW PIPES","SHOW PRIMARY KEYS","SHOW PROCEDURES","SHOW REGIONS","SHOW REPLICATION ACCOUNTS","SHOW REPLICATION DATABASES","SHOW REPLICATION GROUPS","SHOW RESOURCE MONITORS","SHOW ROLES","SHOW ROW ACCESS POLICIES","SHOW SCHEMAS","SHOW SEQUENCES","SHOW SESSION POLICIES","SHOW SHARES","SHOW SHARES IN FAILOVER GROUP","SHOW SHARES IN REPLICATION GROUP","SHOW STAGES","SHOW STREAMS","SHOW TABLES","SHOW TAGS","SHOW TASKS","SHOW TRANSACTIONS","SHOW USER FUNCTIONS","SHOW USERS","SHOW VARIABLES","SHOW VIEWS","SHOW WAREHOUSES","TRUNCATE MATERIALIZED VIEW","UNDROP DATABASE","UNDROP SCHEMA","UNDROP TABLE","UNDROP TAG","UNSET","USE DATABASE","USE ROLE","USE SCHEMA","USE SECONDARY ROLES","USE WAREHOUSE"]),fR=CT(["UNION [ALL]","MINUS","EXCEPT","INTERSECT"]),YR=CT(["[INNER] JOIN","[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | NATURAL} JOIN"]),FR=CT(["{ROWS | RANGE} BETWEEN","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]"]);const yR={bigquery:class extends JE{tokenizer(){return new nT({reservedClauses:uT,reservedSelect:cT,reservedSetOperations:dT,reservedJoins:GT,reservedPhrases:pT,reservedKeywords:UT,reservedFunctionNames:lT,extraParens:["[]"],stringTypes:[{quote:'""".."""',prefixes:["R","B","RB","BR"]},{quote:"'''..'''",prefixes:["R","B","RB","BR"]},'""-bs',"''-bs",{quote:'""-raw',prefixes:["R","B","RB","BR"],requirePrefix:!0},{quote:"''-raw",prefixes:["R","B","RB","BR"],requirePrefix:!0}],identTypes:["``"],identChars:{dashes:!0},paramTypes:{positional:!0,named:["@"],quoted:["@"]},lineCommentTypes:["--","#"],operators:["&","|","^","~",">>","<<","||"],postProcess:hT})}},db2:class extends JE{tokenizer(){return new nT({reservedClauses:FT,reservedSelect:YT,reservedSetOperations:yT,reservedJoins:VT,reservedPhrases:WT,reservedKeywords:fT,reservedFunctionNames:BT,stringTypes:[{quote:"''-qq",prefixes:["G","N","U&"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","¬=","¬>","¬<","!>","!<","||"]})}},hive:class extends JE{tokenizer(){return new nT({reservedClauses:bT,reservedSelect:vT,reservedSetOperations:KT,reservedJoins:xT,reservedPhrases:$T,reservedKeywords:XT,reservedFunctionNames:gT,extraParens:["[]"],stringTypes:['""-bs',"''-bs"],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||"]})}},mariadb:class extends JE{tokenizer(){return new nT({reservedClauses:ZT,reservedSelect:JT,reservedSetOperations:QT,reservedJoins:qT,reservedPhrases:jT,supportsXor:!0,reservedKeywords:wT,reservedFunctionNames:kT,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","&&","||","!"],postProcess:zT})}},mysql:class extends JE{tokenizer(){return new nT({reservedClauses:Re,reservedSelect:ee,reservedSetOperations:Ae,reservedJoins:Se,reservedPhrases:te,supportsXor:!0,reservedKeywords:Ee,reservedFunctionNames:Te,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!"],postProcess:Ie})}},n1ql:class extends JE{tokenizer(){return new nT({reservedClauses:re,reservedSelect:se,reservedSetOperations:_e,reservedJoins:ne,reservedPhrases:Le,supportsXor:!0,reservedKeywords:Ne,reservedFunctionNames:Oe,stringTypes:['""-bs',"''-bs"],identTypes:["``"],extraParens:["[]","{}"],paramTypes:{positional:!0,numbered:["$"],named:["$"]},lineCommentTypes:["#","--"],operators:["%","==",":","||"]})}},plsql:class extends JE{tokenizer(){return new nT({reservedClauses:oe,reservedSelect:ie,reservedSetOperations:Pe,reservedJoins:De,reservedPhrases:Me,supportsXor:!0,reservedKeywords:Ce,reservedFunctionNames:ae,stringTypes:[{quote:"''-qq",prefixes:["N"]},{quote:"q''",prefixes:["N"]}],identTypes:['""-qq'],identChars:{rest:"$#"},variableTypes:[{regex:"&{1,2}[A-Za-z][A-Za-z0-9_$#]*"}],paramTypes:{numbered:[":"],named:[":"]},paramChars:{},operators:["**",":=","%","~=","^=",">>","<<","=>","@","||"],postProcess:Ue})}formatOptions(){return{alwaysDenseOperators:["@"]}}},postgresql:class extends JE{tokenizer(){return new nT({reservedClauses:de,reservedSelect:ue,reservedSetOperations:Ge,reservedJoins:pe,reservedPhrases:he,reservedKeywords:ce,reservedFunctionNames:le,nestedBlockComments:!0,extraParens:["[]"],stringTypes:["$$",{quote:"''-qq",prefixes:["U&"]},{quote:"''-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:[{quote:'""-qq',prefixes:["U&"]}],identChars:{rest:"$"},paramTypes:{numbered:["$"]},operators:["%","^","|/","||/","@",":=","&","|","#","~","<<",">>","~>~","~<~","~>=~","~<=~","@-@","@@","##","<->","&&","&<","&>","<<|","&<|","|>>","|&>","<^","^>","?#","?-","?|","?-|","?||","@>","<@","~=","?","@?","?&","->","->>","#>","#>>","#-","=>",">>=","<<=","~~","~~*","!~~","!~~*","~","~*","!~","!~*","-|-","||","@@@","!!","<%","%>","<<%","%>>","<<->","<->>","<<<->","<->>>","::"]})}formatOptions(){return{alwaysDenseOperators:["::"]}}},redshift:class extends JE{tokenizer(){return new nT({reservedClauses:fe,reservedSelect:Be,reservedSetOperations:Ye,reservedJoins:Fe,reservedPhrases:ye,reservedKeywords:me,reservedFunctionNames:He,stringTypes:["''-qq"],identTypes:['""-qq'],identChars:{first:"#"},paramTypes:{numbered:["$"]},operators:["^","%","@","|/","||/","&","|","~","<<",">>","||","::"]})}formatOptions(){return{alwaysDenseOperators:["::"]}}},singlestoredb:class extends JE{tokenizer(){return new nT({reservedClauses:cR,reservedSelect:lR,reservedSetOperations:uR,reservedJoins:dR,reservedPhrases:GR,reservedKeywords:MR,reservedFunctionNames:UR,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_$]+"},{quote:"``",prefixes:["@"],requirePrefix:!0}],lineCommentTypes:["--","#"],operators:[":=","&","|","^","~","<<",">>","<=>","&&","||"],postProcess:pR})}},snowflake:class extends JE{tokenizer(){return new nT({reservedClauses:BR,reservedSelect:mR,reservedSetOperations:fR,reservedJoins:YR,reservedPhrases:FR,reservedKeywords:HR,reservedFunctionNames:hR,stringTypes:["$$","''-qq-bs"],identTypes:['""-qq'],variableTypes:[{regex:"[$][1-9]\\d*"},{regex:"[$][_a-zA-Z][_a-zA-Z0-9$]*"}],extraParens:["[]"],identChars:{rest:"$"},lineCommentTypes:["--","//"],operators:["%","::","||",":","=>"]})}formatOptions(){return{alwaysDenseOperators:[":","::"]}}},spark:class extends JE{tokenizer(){return new nT({reservedClauses:Xe,reservedSelect:ge,reservedSetOperations:ve,reservedJoins:be,reservedPhrases:Ke,supportsXor:!0,reservedKeywords:Ve,reservedFunctionNames:We,extraParens:["[]"],stringTypes:["''-bs",'""-bs',{quote:"''-raw",prefixes:["R","X"],requirePrefix:!0},{quote:'""-raw',prefixes:["R","X"],requirePrefix:!0}],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||","->"],postProcess:xe})}},sql:class extends JE{tokenizer(){return new nT({reservedClauses:TR,reservedSelect:ER,reservedSetOperations:eR,reservedJoins:RR,reservedPhrases:AR,reservedKeywords:ze,reservedFunctionNames:je,stringTypes:[{quote:"''-qq-bs",prefixes:["N","U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``"],paramTypes:{positional:!0},operators:["||"]})}},sqlite:class extends JE{tokenizer(){return new nT({reservedClauses:Je,reservedSelect:ke,reservedSetOperations:Ze,reservedJoins:Qe,reservedPhrases:qe,reservedKeywords:we,reservedFunctionNames:$e,stringTypes:["''-qq",{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``","[]"],paramTypes:{positional:!0,numbered:["?"],named:[":","@","$"]},operators:["%","~","&","|","<<",">>","==","->","->>","||"]})}},transactsql:DR,trino:class extends JE{tokenizer(){return new nT({reservedClauses:NR,reservedSelect:IR,reservedSetOperations:sR,reservedJoins:rR,reservedPhrases:_R,reservedKeywords:tR,reservedFunctionNames:SR,extraParens:["[]","{}"],stringTypes:[{quote:"''-qq",prefixes:["U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0},operators:["%","->",":","||","|","^","$"]})}},tsql:DR},VR=Object.keys(yR),WR={language:"sql",tabWidth:2,useTabs:!1,keywordCase:"preserve",indentStyle:"standard",logicalOperatorNewline:"before",tabulateAlias:!1,commaPosition:"after",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},gR=(E,T={})=>{if("string"!=typeof E)throw new Error("Invalid query argument. Expected string, instead got "+typeof E);const e=function(E){if("string"==typeof E.language&&!VR.includes(E.language))throw new XR(`Unsupported SQL dialect: ${E.language}`);if("multilineLists"in E)throw new XR("multilineLists config is no more supported.");if("newlineBeforeOpenParen"in E)throw new XR("newlineBeforeOpenParen config is no more supported.");if("newlineBeforeCloseParen"in E)throw new XR("newlineBeforeCloseParen config is no more supported.");if("aliasAs"in E)throw new XR("aliasAs config is no more supported.");if(E.expressionWidth<=0)throw new XR(`expressionWidth config must be positive number. Received ${E.expressionWidth} instead.`);if("before"===E.commaPosition&&E.useTabs)throw new XR("commaPosition: before does not work when tabs are used for indentation.");E.params&&(T=E.params,!(T instanceof Array?T:Object.values(T)).every((E=>"string"==typeof E)))&&console.warn('WARNING: All "params" option values should be strings.');var T;return E}({...WR,...T});return new("string"==typeof e.language?yR[e.language]:e.language)(e).format(E)};class XR extends Error{}function vR(E,T,e){const R=E.slice();return R[1]=T[e],R[3]=e,R}function bR(E,T,e){const R=E.slice();return R[4]=T[e],R[6]=e,R}function KR(E,T,e){const R=E.slice();return R[7]=T[e],R}function xR(E){let T,e,R=E[7]+"";return{c(){T=s("th"),e=r(R),C(T,"class","th svelte-lzq57u")},m(E,R){I(E,T,R),t(T,e)},p(E,T){1&T&&R!==(R=E[7]+"")&&a(e,R)},d(E){E&&O(T)}}}function $R(E){let T,e,R,A=E[4]+"";return{c(){T=s("td"),e=r(A),C(T,"title",R=`Row ${E[3]+1}, ${E[0].columns[E[6]]}`),C(T,"class","svelte-lzq57u")},m(E,R){I(E,T,R),t(T,e)},p(E,S){1&S&&A!==(A=E[4]+"")&&a(e,A),1&S&&R!==(R=`Row ${E[3]+1}, ${E[0].columns[E[6]]}`)&&C(T,"title",R)},d(E){E&&O(T)}}}function wR(E){let T,e,R=E[1],A=[];for(let T=0;T<R.length;T+=1)A[T]=$R(bR(E,R,T));return{c(){T=s("tr");for(let E=0;E<A.length;E+=1)A[E].c();e=_(),C(T,"class","svelte-lzq57u")},m(E,R){I(E,T,R);for(let E=0;E<A.length;E+=1)A[E]&&A[E].m(T,null);t(T,e)},p(E,S){if(1&S){let t;for(R=E[1],t=0;t<R.length;t+=1){const I=bR(E,R,t);A[t]?A[t].p(I,S):(A[t]=$R(I),A[t].c(),A[t].m(T,e))}for(;t<A.length;t+=1)A[t].d(1);A.length=R.length}},d(E){E&&O(T),N(A,E)}}}function kR(T){let e,R,A,S,r,n,L=T[0].columns,a=[];for(let E=0;E<L.length;E+=1)a[E]=xR(KR(T,L,E));let i=T[0].values,o=[];for(let E=0;E<i.length;E+=1)o[E]=wR(vR(T,i,E));return{c(){e=s("div"),R=s("table"),A=s("thead"),S=s("tr");for(let E=0;E<a.length;E+=1)a[E].c();r=_(),n=s("tbody");for(let E=0;E<o.length;E+=1)o[E].c();C(S,"class","svelte-lzq57u"),C(R,"class","table is-fullwidth is-striped is-hoverable"),C(e,"class","table-container svelte-lzq57u")},m(E,T){I(E,e,T),t(e,R),t(R,A),t(A,S);for(let E=0;E<a.length;E+=1)a[E]&&a[E].m(S,null);t(R,r),t(R,n);for(let E=0;E<o.length;E+=1)o[E]&&o[E].m(n,null)},p(E,[T]){if(1&T){let e;for(L=E[0].columns,e=0;e<L.length;e+=1){const R=KR(E,L,e);a[e]?a[e].p(R,T):(a[e]=xR(R),a[e].c(),a[e].m(S,null))}for(;e<a.length;e+=1)a[e].d(1);a.length=L.length}if(1&T){let e;for(i=E[0].values,e=0;e<i.length;e+=1){const R=vR(E,i,e);o[e]?o[e].p(R,T):(o[e]=wR(R),o[e].c(),o[e].m(n,null))}for(;e<o.length;e+=1)o[e].d(1);o.length=i.length}},i:E,o:E,d(E){E&&O(e),N(a,E),N(o,E)}}}function JR(E,T,e){let{result:R}=T;return E.$$set=E=>{"result"in E&&e(0,R=E.result)},[R]}class ZR extends J{constructor(E){super(),k(this,E,JR,kR,S,{result:0})}}function QR(E,T,e){return T in E?Object.defineProperty(E,T,{value:e,enumerable:!0,configurable:!0,writable:!0}):E[T]=e,E}function qR(E,T){var e=Object.keys(E);if(Object.getOwnPropertySymbols){var R=Object.getOwnPropertySymbols(E);T&&(R=R.filter((function(T){return Object.getOwnPropertyDescriptor(E,T).enumerable}))),e.push.apply(e,R)}return e}function jR(E){for(var T=1;T<arguments.length;T++){var e=null!=arguments[T]?arguments[T]:{};T%2?qR(Object(e),!0).forEach((function(T){QR(E,T,e[T])})):Object.getOwnPropertyDescriptors?Object.defineProperties(E,Object.getOwnPropertyDescriptors(e)):qR(Object(e)).forEach((function(T){Object.defineProperty(E,T,Object.getOwnPropertyDescriptor(e,T))}))}return E}function zR(E,T){if(null==E)return{};var e,R,A=function(E,T){if(null==E)return{};var e,R,A={},S=Object.keys(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||(A[e]=E[e]);return A}(E,T);if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(E);for(R=0;R<S.length;R++)e=S[R],T.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(E,e)&&(A[e]=E[e])}return A}function EA(E,T){(null==T||T>E.length)&&(T=E.length);for(var e=0,R=new Array(T);e<T;e++)R[e]=E[e];return R}function TA(E,T,e){return T in E?Object.defineProperty(E,T,{value:e,enumerable:!0,configurable:!0,writable:!0}):E[T]=e,E}function eA(E,T){var e=Object.keys(E);if(Object.getOwnPropertySymbols){var R=Object.getOwnPropertySymbols(E);T&&(R=R.filter((function(T){return Object.getOwnPropertyDescriptor(E,T).enumerable}))),e.push.apply(e,R)}return e}function RA(E){for(var T=1;T<arguments.length;T++){var e=null!=arguments[T]?arguments[T]:{};T%2?eA(Object(e),!0).forEach((function(T){TA(E,T,e[T])})):Object.getOwnPropertyDescriptors?Object.defineProperties(E,Object.getOwnPropertyDescriptors(e)):eA(Object(e)).forEach((function(T){Object.defineProperty(E,T,Object.getOwnPropertyDescriptor(e,T))}))}return E}function AA(E){return function T(){for(var e=this,R=arguments.length,A=new Array(R),S=0;S<R;S++)A[S]=arguments[S];return A.length>=E.length?E.apply(this,A):function(){for(var E=arguments.length,R=new Array(E),S=0;S<E;S++)R[S]=arguments[S];return T.apply(e,[].concat(A,R))}}}function SA(E){return{}.toString.call(E).includes("Object")}function tA(E){return"function"==typeof E}var IA=AA((function(E,T){throw new Error(E[T]||E.default)}))({initialIsRequired:"initial state is required",initialType:"initial state should be an object",initialContent:"initial state shouldn't be an empty object",handlerType:"handler should be an object or a function",handlersType:"all handlers should be a functions",selectorType:"selector should be a function",changeType:"provided value of changes should be an object",changeField:'it seams you want to change a field in the state which is not specified in the "initial" state',default:"an unknown error accured in `state-local` package"}),OA={changes:function(E,T){return SA(T)||IA("changeType"),Object.keys(T).some((function(T){return e=E,R=T,!Object.prototype.hasOwnProperty.call(e,R);var e,R}))&&IA("changeField"),T},selector:function(E){tA(E)||IA("selectorType")},handler:function(E){tA(E)||SA(E)||IA("handlerType"),SA(E)&&Object.values(E).some((function(E){return!tA(E)}))&&IA("handlersType")},initial:function(E){var T;E||IA("initialIsRequired"),SA(E)||IA("initialType"),T=E,Object.keys(T).length||IA("initialContent")}};function NA(E,T){return tA(T)?T(E.current):T}function sA(E,T){return E.current=RA(RA({},E.current),T),T}function rA(E,T,e){return tA(T)?T(E.current):Object.keys(e).forEach((function(e){var R;return null===(R=T[e])||void 0===R?void 0:R.call(T,E.current[e])})),e}var _A={create:function(E){var T=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};OA.initial(E),OA.handler(T);var e={current:E},R=AA(rA)(e,T),A=AA(sA)(e),S=AA(OA.changes)(E),t=AA(NA)(e);return[function(){var E=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(E){return E};return OA.selector(E),E(e.current)},function(E){!function(){for(var E=arguments.length,T=new Array(E),e=0;e<E;e++)T[e]=arguments[e];return function(E){return T.reduceRight((function(E,T){return T(E)}),E)}}(R,A,S,t)(E)}]}};var nA={configIsRequired:"the configuration object is required",configType:"the configuration object should be an object",default:"an unknown error accured in `@monaco-editor/loader` package",deprecation:"Deprecation warning!\n    You are using deprecated way of configuration.\n\n    Instead of using\n      monaco.config({ urls: { monacoBase: '...' } })\n    use\n      monaco.config({ paths: { vs: '...' } })\n\n    For more please check the link https://github.com/suren-atoyan/monaco-loader#config\n  "},LA=function(E){return function T(){for(var e=this,R=arguments.length,A=new Array(R),S=0;S<R;S++)A[S]=arguments[S];return A.length>=E.length?E.apply(this,A):function(){for(var E=arguments.length,R=new Array(E),S=0;S<E;S++)R[S]=arguments[S];return T.apply(e,[].concat(A,R))}}}((function(E,T){throw new Error(E[T]||E.default)}))(nA),CA={config:function(E){var T;return E||LA("configIsRequired"),T=E,{}.toString.call(T).includes("Object")||LA("configType"),E.urls?(console.warn(nA.deprecation),{paths:{vs:E.urls.monacoBase}}):E}};function aA(E,T){return Object.keys(T).forEach((function(e){T[e]instanceof Object&&E[e]&&Object.assign(T[e],aA(E[e],T[e]))})),jR(jR({},E),T)}var iA={type:"cancelation",msg:"operation is manually canceled"};function oA(E){var T=!1,e=new Promise((function(e,R){E.then((function(E){return T?R(iA):e(E)})),E.catch(R)}));return e.cancel=function(){return T=!0},e}var PA,DA,MA=_A.create({config:{paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs"}},isInitialized:!1,resolve:null,reject:null,monaco:null}),UA=(DA=2,function(E){if(Array.isArray(E))return E}(PA=MA)||function(E,T){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(E)){var e=[],R=!0,A=!1,S=void 0;try{for(var t,I=E[Symbol.iterator]();!(R=(t=I.next()).done)&&(e.push(t.value),!T||e.length!==T);R=!0);}catch(E){A=!0,S=E}finally{try{R||null==I.return||I.return()}finally{if(A)throw S}}return e}}(PA,DA)||function(E,T){if(E){if("string"==typeof E)return EA(E,T);var e=Object.prototype.toString.call(E).slice(8,-1);return"Object"===e&&E.constructor&&(e=E.constructor.name),"Map"===e||"Set"===e?Array.from(E):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?EA(E,T):void 0}}(PA,DA)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),lA=UA[0],cA=UA[1];function uA(E){return document.body.appendChild(E)}function dA(E){var T,e,R=lA((function(E){return{config:E.config,reject:E.reject}})),A=(T="".concat(R.config.paths.vs,"/loader.js"),e=document.createElement("script"),T&&(e.src=T),e);return A.onload=function(){return E()},A.onerror=R.reject,A}function GA(){var E=lA((function(E){return{config:E.config,resolve:E.resolve,reject:E.reject}})),T=window.require;T.config(E.config),T(["vs/editor/editor.main"],(function(T){pA(T),E.resolve(T)}),(function(T){E.reject(T)}))}function pA(E){lA().monaco||cA({monaco:E})}var hA,HA,mA=new Promise((function(E,T){return cA({resolve:E,reject:T})})),BA={config:function(E){var T=CA.config(E),e=T.monaco,R=zR(T,["monaco"]);cA((function(E){return{config:aA(E.config,R),monaco:e}}))},init:function(){var E=lA((function(E){return{monaco:E.monaco,isInitialized:E.isInitialized,resolve:E.resolve}}));if(!E.isInitialized){if(cA({isInitialized:!0}),E.monaco)return E.resolve(E.monaco),oA(mA);if(window.monaco&&window.monaco.editor)return pA(window.monaco),E.resolve(window.monaco),oA(mA);!function(){for(var E=arguments.length,T=new Array(E),e=0;e<E;e++)T[e]=arguments[e];return function(E){return T.reduceRight((function(E,T){return T(E)}),E)}}(uA,dA)(GA)}return oA(mA)},__getMonacoInstance:function(){return lA((function(E){return E.monaco}))}};function fA(T){let e;return{c(){e=s("div"),C(e,"class","custom-editor svelte-qhwgh8")},m(E,R){I(E,e,R),T[5](e)},p:E,i:E,o:E,d(E){E&&O(e),T[5](null)}}}function YA(E,T,e){let R,A,S,{style:t}=T,{value:I=""}=T,O="vs-dark";return E.$$set=E=>{"style"in E&&e(2,t=E.style),"value"in E&&e(1,I=E.value)},E.$$.update=()=>{4&E.$$.dirty&&null!=A&&(O="vs"==O?"vs-dark":"vs",A.editor.setTheme(O))},[R,I,t,function(E){null!=S?S.setValue(E):console.warn("sql editor not ready, can't set value",{value:E})},async function(){return null==R?"editor element not found":(A=await BA.init(),null==A?"failed to initialize SQL editor":(S=A.editor.create(R,{value:I,language:"sql",theme:"vs-dark"}),S.onDidChangeModelContent((()=>{e(1,I=null==S?(console.warn("sql editor not ready, can't get value"),""):S.getValue({lineEnding:"\n",preserveBOM:!1}))})),""))},function(E){l[E?"unshift":"push"]((()=>{R=E,e(0,R)}))}]}class FA extends J{constructor(E){super(),k(this,E,YA,fA,S,{style:2,value:1,setValue:3,init:4})}get setValue(){return this.$$.ctx[3]}get init(){return this.$$.ctx[4]}}!function(E){E.assertEqual=E=>E,E.assertIs=function(E){},E.assertNever=function(E){throw new Error},E.arrayToEnum=E=>{const T={};for(const e of E)T[e]=e;return T},E.getValidEnumValues=T=>{const e=E.objectKeys(T).filter((E=>"number"!=typeof T[T[E]])),R={};for(const E of e)R[E]=T[E];return E.objectValues(R)},E.objectValues=T=>E.objectKeys(T).map((function(E){return T[E]})),E.objectKeys="function"==typeof Object.keys?E=>Object.keys(E):E=>{const T=[];for(const e in E)Object.prototype.hasOwnProperty.call(E,e)&&T.push(e);return T},E.find=(E,T)=>{for(const e of E)if(T(e))return e},E.isInteger="function"==typeof Number.isInteger?E=>Number.isInteger(E):E=>"number"==typeof E&&isFinite(E)&&Math.floor(E)===E,E.joinValues=function(E,T=" | "){return E.map((E=>"string"==typeof E?`'${E}'`:E)).join(T)},E.jsonStringifyReplacer=(E,T)=>"bigint"==typeof T?T.toString():T}(hA||(hA={})),function(E){E.mergeShapes=(E,T)=>({...E,...T})}(HA||(HA={}));const yA=hA.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),VA=E=>{switch(typeof E){case"undefined":return yA.undefined;case"string":return yA.string;case"number":return isNaN(E)?yA.nan:yA.number;case"boolean":return yA.boolean;case"function":return yA.function;case"bigint":return yA.bigint;case"symbol":return yA.symbol;case"object":return Array.isArray(E)?yA.array:null===E?yA.null:E.then&&"function"==typeof E.then&&E.catch&&"function"==typeof E.catch?yA.promise:"undefined"!=typeof Map&&E instanceof Map?yA.map:"undefined"!=typeof Set&&E instanceof Set?yA.set:"undefined"!=typeof Date&&E instanceof Date?yA.date:yA.object;default:return yA.unknown}},WA=hA.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class gA extends Error{constructor(E){super(),this.issues=[],this.addIssue=E=>{this.issues=[...this.issues,E]},this.addIssues=(E=[])=>{this.issues=[...this.issues,...E]};const T=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,T):this.__proto__=T,this.name="ZodError",this.issues=E}get errors(){return this.issues}format(E){const T=E||function(E){return E.message},e={_errors:[]},R=E=>{for(const A of E.issues)if("invalid_union"===A.code)A.unionErrors.map(R);else if("invalid_return_type"===A.code)R(A.returnTypeError);else if("invalid_arguments"===A.code)R(A.argumentsError);else if(0===A.path.length)e._errors.push(T(A));else{let E=e,R=0;for(;R<A.path.length;){const e=A.path[R];R===A.path.length-1?(E[e]=E[e]||{_errors:[]},E[e]._errors.push(T(A))):E[e]=E[e]||{_errors:[]},E=E[e],R++}}};return R(this),e}static assert(E){if(!(E instanceof gA))throw new Error(`Not a ZodError: ${E}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,hA.jsonStringifyReplacer,2)}get isEmpty(){return 0===this.issues.length}flatten(E=(E=>E.message)){const T={},e=[];for(const R of this.issues)R.path.length>0?(T[R.path[0]]=T[R.path[0]]||[],T[R.path[0]].push(E(R))):e.push(E(R));return{formErrors:e,fieldErrors:T}}get formErrors(){return this.flatten()}}gA.create=E=>new gA(E);const XA=(E,T)=>{let e;switch(E.code){case WA.invalid_type:e=E.received===yA.undefined?"Required":`Expected ${E.expected}, received ${E.received}`;break;case WA.invalid_literal:e=`Invalid literal value, expected ${JSON.stringify(E.expected,hA.jsonStringifyReplacer)}`;break;case WA.unrecognized_keys:e=`Unrecognized key(s) in object: ${hA.joinValues(E.keys,", ")}`;break;case WA.invalid_union:e="Invalid input";break;case WA.invalid_union_discriminator:e=`Invalid discriminator value. Expected ${hA.joinValues(E.options)}`;break;case WA.invalid_enum_value:e=`Invalid enum value. Expected ${hA.joinValues(E.options)}, received '${E.received}'`;break;case WA.invalid_arguments:e="Invalid function arguments";break;case WA.invalid_return_type:e="Invalid function return type";break;case WA.invalid_date:e="Invalid date";break;case WA.invalid_string:"object"==typeof E.validation?"includes"in E.validation?(e=`Invalid input: must include "${E.validation.includes}"`,"number"==typeof E.validation.position&&(e=`${e} at one or more positions greater than or equal to ${E.validation.position}`)):"startsWith"in E.validation?e=`Invalid input: must start with "${E.validation.startsWith}"`:"endsWith"in E.validation?e=`Invalid input: must end with "${E.validation.endsWith}"`:hA.assertNever(E.validation):e="regex"!==E.validation?`Invalid ${E.validation}`:"Invalid";break;case WA.too_small:e="array"===E.type?`Array must contain ${E.exact?"exactly":E.inclusive?"at least":"more than"} ${E.minimum} element(s)`:"string"===E.type?`String must contain ${E.exact?"exactly":E.inclusive?"at least":"over"} ${E.minimum} character(s)`:"number"===E.type?`Number must be ${E.exact?"exactly equal to ":E.inclusive?"greater than or equal to ":"greater than "}${E.minimum}`:"date"===E.type?`Date must be ${E.exact?"exactly equal to ":E.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(E.minimum))}`:"Invalid input";break;case WA.too_big:e="array"===E.type?`Array must contain ${E.exact?"exactly":E.inclusive?"at most":"less than"} ${E.maximum} element(s)`:"string"===E.type?`String must contain ${E.exact?"exactly":E.inclusive?"at most":"under"} ${E.maximum} character(s)`:"number"===E.type?`Number must be ${E.exact?"exactly":E.inclusive?"less than or equal to":"less than"} ${E.maximum}`:"bigint"===E.type?`BigInt must be ${E.exact?"exactly":E.inclusive?"less than or equal to":"less than"} ${E.maximum}`:"date"===E.type?`Date must be ${E.exact?"exactly":E.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(E.maximum))}`:"Invalid input";break;case WA.custom:e="Invalid input";break;case WA.invalid_intersection_types:e="Intersection results could not be merged";break;case WA.not_multiple_of:e=`Number must be a multiple of ${E.multipleOf}`;break;case WA.not_finite:e="Number must be finite";break;default:e=T.defaultError,hA.assertNever(E)}return{message:e}};let vA=XA;function bA(){return vA}const KA=E=>{const{data:T,path:e,errorMaps:R,issueData:A}=E,S=[...e,...A.path||[]],t={...A,path:S};if(void 0!==A.message)return{...A,path:S,message:A.message};let I="";const O=R.filter((E=>!!E)).slice().reverse();for(const E of O)I=E(t,{data:T,defaultError:I}).message;return{...A,path:S,message:I}};function xA(E,T){const e=bA(),R=KA({issueData:T,data:E.data,path:E.path,errorMaps:[E.common.contextualErrorMap,E.schemaErrorMap,e,e===XA?void 0:XA].filter((E=>!!E))});E.common.issues.push(R)}class $A{constructor(){this.value="valid"}dirty(){"valid"===this.value&&(this.value="dirty")}abort(){"aborted"!==this.value&&(this.value="aborted")}static mergeArray(E,T){const e=[];for(const R of T){if("aborted"===R.status)return wA;"dirty"===R.status&&E.dirty(),e.push(R.value)}return{status:E.value,value:e}}static async mergeObjectAsync(E,T){const e=[];for(const E of T){const T=await E.key,R=await E.value;e.push({key:T,value:R})}return $A.mergeObjectSync(E,e)}static mergeObjectSync(E,T){const e={};for(const R of T){const{key:T,value:A}=R;if("aborted"===T.status)return wA;if("aborted"===A.status)return wA;"dirty"===T.status&&E.dirty(),"dirty"===A.status&&E.dirty(),"__proto__"===T.value||void 0===A.value&&!R.alwaysSet||(e[T.value]=A.value)}return{status:E.value,value:e}}}const wA=Object.freeze({status:"aborted"}),kA=E=>({status:"dirty",value:E}),JA=E=>({status:"valid",value:E}),ZA=E=>"aborted"===E.status,QA=E=>"dirty"===E.status,qA=E=>"valid"===E.status,jA=E=>"undefined"!=typeof Promise&&E instanceof Promise;function zA(E,T,e,R){if("a"===e&&!R)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof T?E!==T||!R:!T.has(E))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===e?R:"a"===e?R.call(E):R?R.value:T.get(E)}function ES(E,T,e,R,A){if("m"===R)throw new TypeError("Private method is not writable");if("a"===R&&!A)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof T?E!==T||!A:!T.has(E))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===R?A.call(E,e):A?A.value=e:T.set(E,e),e}var TS,eS,RS;"function"==typeof SuppressedError&&SuppressedError,function(E){E.errToObj=E=>"string"==typeof E?{message:E}:E||{},E.toString=E=>"string"==typeof E?E:null==E?void 0:E.message}(TS||(TS={}));class AS{constructor(E,T,e,R){this._cachedPath=[],this.parent=E,this.data=T,this._path=e,this._key=R}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const SS=(E,T)=>{if(qA(T))return{success:!0,data:T.value};if(!E.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const T=new gA(E.common.issues);return this._error=T,this._error}}};function tS(E){if(!E)return{};const{errorMap:T,invalid_type_error:e,required_error:R,description:A}=E;if(T&&(e||R))throw new Error('Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.');if(T)return{errorMap:T,description:A};return{errorMap:(T,A)=>{var S,t;const{message:I}=E;return"invalid_enum_value"===T.code?{message:null!=I?I:A.defaultError}:void 0===A.data?{message:null!==(S=null!=I?I:R)&&void 0!==S?S:A.defaultError}:"invalid_type"!==T.code?{message:A.defaultError}:{message:null!==(t=null!=I?I:e)&&void 0!==t?t:A.defaultError}},description:A}}class IS{constructor(E){this.spa=this.safeParseAsync,this._def=E,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(E){return VA(E.data)}_getOrReturnCtx(E,T){return T||{common:E.parent.common,data:E.data,parsedType:VA(E.data),schemaErrorMap:this._def.errorMap,path:E.path,parent:E.parent}}_processInputParams(E){return{status:new $A,ctx:{common:E.parent.common,data:E.data,parsedType:VA(E.data),schemaErrorMap:this._def.errorMap,path:E.path,parent:E.parent}}}_parseSync(E){const T=this._parse(E);if(jA(T))throw new Error("Synchronous parse encountered promise.");return T}_parseAsync(E){const T=this._parse(E);return Promise.resolve(T)}parse(E,T){const e=this.safeParse(E,T);if(e.success)return e.data;throw e.error}safeParse(E,T){var e;const R={common:{issues:[],async:null!==(e=null==T?void 0:T.async)&&void 0!==e&&e,contextualErrorMap:null==T?void 0:T.errorMap},path:(null==T?void 0:T.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:E,parsedType:VA(E)},A=this._parseSync({data:E,path:R.path,parent:R});return SS(R,A)}async parseAsync(E,T){const e=await this.safeParseAsync(E,T);if(e.success)return e.data;throw e.error}async safeParseAsync(E,T){const e={common:{issues:[],contextualErrorMap:null==T?void 0:T.errorMap,async:!0},path:(null==T?void 0:T.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:E,parsedType:VA(E)},R=this._parse({data:E,path:e.path,parent:e}),A=await(jA(R)?R:Promise.resolve(R));return SS(e,A)}refine(E,T){const e=E=>"string"==typeof T||void 0===T?{message:T}:"function"==typeof T?T(E):T;return this._refinement(((T,R)=>{const A=E(T),S=()=>R.addIssue({code:WA.custom,...e(T)});return"undefined"!=typeof Promise&&A instanceof Promise?A.then((E=>!!E||(S(),!1))):!!A||(S(),!1)}))}refinement(E,T){return this._refinement(((e,R)=>!!E(e)||(R.addIssue("function"==typeof T?T(e,R):T),!1)))}_refinement(E){return new Tt({schema:this,typeName:nt.ZodEffects,effect:{type:"refinement",refinement:E}})}superRefine(E){return this._refinement(E)}optional(){return et.create(this,this._def)}nullable(){return Rt.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return yS.create(this,this._def)}promise(){return Et.create(this,this._def)}or(E){return gS.create([this,E],this._def)}and(E){return KS.create(this,E,this._def)}transform(E){return new Tt({...tS(this._def),schema:this,typeName:nt.ZodEffects,effect:{type:"transform",transform:E}})}default(E){const T="function"==typeof E?E:()=>E;return new At({...tS(this._def),innerType:this,defaultValue:T,typeName:nt.ZodDefault})}brand(){return new Ot({typeName:nt.ZodBranded,type:this,...tS(this._def)})}catch(E){const T="function"==typeof E?E:()=>E;return new St({...tS(this._def),innerType:this,catchValue:T,typeName:nt.ZodCatch})}describe(E){return new(0,this.constructor)({...this._def,description:E})}pipe(E){return Nt.create(this,E)}readonly(){return st.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const OS=/^c[^\s-]{8,}$/i,NS=/^[0-9a-z]+$/,sS=/^[0-9A-HJKMNP-TV-Z]{26}$/,rS=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,_S=/^[a-z0-9_-]{21}$/i,nS=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,LS=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;let CS;const aS=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,iS=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,oS=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,PS="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",DS=new RegExp(`^${PS}$`);function MS(E){let T="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return E.precision?T=`${T}\\.\\d{${E.precision}}`:null==E.precision&&(T=`${T}(\\.\\d+)?`),T}function US(E){let T=`${PS}T${MS(E)}`;const e=[];return e.push(E.local?"Z?":"Z"),E.offset&&e.push("([+-]\\d{2}:?\\d{2})"),T=`${T}(${e.join("|")})`,new RegExp(`^${T}$`)}class lS extends IS{_parse(E){this._def.coerce&&(E.data=String(E.data));if(this._getType(E)!==yA.string){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.string,received:T.parsedType}),wA}const T=new $A;let e;for(const S of this._def.checks)if("min"===S.kind)E.data.length<S.value&&(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.too_small,minimum:S.value,type:"string",inclusive:!0,exact:!1,message:S.message}),T.dirty());else if("max"===S.kind)E.data.length>S.value&&(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.too_big,maximum:S.value,type:"string",inclusive:!0,exact:!1,message:S.message}),T.dirty());else if("length"===S.kind){const R=E.data.length>S.value,A=E.data.length<S.value;(R||A)&&(e=this._getOrReturnCtx(E,e),R?xA(e,{code:WA.too_big,maximum:S.value,type:"string",inclusive:!0,exact:!0,message:S.message}):A&&xA(e,{code:WA.too_small,minimum:S.value,type:"string",inclusive:!0,exact:!0,message:S.message}),T.dirty())}else if("email"===S.kind)LS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"email",code:WA.invalid_string,message:S.message}),T.dirty());else if("emoji"===S.kind)CS||(CS=new RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),CS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"emoji",code:WA.invalid_string,message:S.message}),T.dirty());else if("uuid"===S.kind)rS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"uuid",code:WA.invalid_string,message:S.message}),T.dirty());else if("nanoid"===S.kind)_S.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"nanoid",code:WA.invalid_string,message:S.message}),T.dirty());else if("cuid"===S.kind)OS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"cuid",code:WA.invalid_string,message:S.message}),T.dirty());else if("cuid2"===S.kind)NS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"cuid2",code:WA.invalid_string,message:S.message}),T.dirty());else if("ulid"===S.kind)sS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"ulid",code:WA.invalid_string,message:S.message}),T.dirty());else if("url"===S.kind)try{new URL(E.data)}catch(R){e=this._getOrReturnCtx(E,e),xA(e,{validation:"url",code:WA.invalid_string,message:S.message}),T.dirty()}else if("regex"===S.kind){S.regex.lastIndex=0;S.regex.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"regex",code:WA.invalid_string,message:S.message}),T.dirty())}else if("trim"===S.kind)E.data=E.data.trim();else if("includes"===S.kind)E.data.includes(S.value,S.position)||(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.invalid_string,validation:{includes:S.value,position:S.position},message:S.message}),T.dirty());else if("toLowerCase"===S.kind)E.data=E.data.toLowerCase();else if("toUpperCase"===S.kind)E.data=E.data.toUpperCase();else if("startsWith"===S.kind)E.data.startsWith(S.value)||(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.invalid_string,validation:{startsWith:S.value},message:S.message}),T.dirty());else if("endsWith"===S.kind)E.data.endsWith(S.value)||(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.invalid_string,validation:{endsWith:S.value},message:S.message}),T.dirty());else if("datetime"===S.kind){US(S).test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.invalid_string,validation:"datetime",message:S.message}),T.dirty())}else if("date"===S.kind){DS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.invalid_string,validation:"date",message:S.message}),T.dirty())}else if("time"===S.kind){new RegExp(`^${MS(S)}$`).test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.invalid_string,validation:"time",message:S.message}),T.dirty())}else"duration"===S.kind?nS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"duration",code:WA.invalid_string,message:S.message}),T.dirty()):"ip"===S.kind?(R=E.data,("v4"!==(A=S.version)&&A||!aS.test(R))&&("v6"!==A&&A||!iS.test(R))&&(e=this._getOrReturnCtx(E,e),xA(e,{validation:"ip",code:WA.invalid_string,message:S.message}),T.dirty())):"base64"===S.kind?oS.test(E.data)||(e=this._getOrReturnCtx(E,e),xA(e,{validation:"base64",code:WA.invalid_string,message:S.message}),T.dirty()):hA.assertNever(S);var R,A;return{status:T.value,value:E.data}}_regex(E,T,e){return this.refinement((T=>E.test(T)),{validation:T,code:WA.invalid_string,...TS.errToObj(e)})}_addCheck(E){return new lS({...this._def,checks:[...this._def.checks,E]})}email(E){return this._addCheck({kind:"email",...TS.errToObj(E)})}url(E){return this._addCheck({kind:"url",...TS.errToObj(E)})}emoji(E){return this._addCheck({kind:"emoji",...TS.errToObj(E)})}uuid(E){return this._addCheck({kind:"uuid",...TS.errToObj(E)})}nanoid(E){return this._addCheck({kind:"nanoid",...TS.errToObj(E)})}cuid(E){return this._addCheck({kind:"cuid",...TS.errToObj(E)})}cuid2(E){return this._addCheck({kind:"cuid2",...TS.errToObj(E)})}ulid(E){return this._addCheck({kind:"ulid",...TS.errToObj(E)})}base64(E){return this._addCheck({kind:"base64",...TS.errToObj(E)})}ip(E){return this._addCheck({kind:"ip",...TS.errToObj(E)})}datetime(E){var T,e;return"string"==typeof E?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:E}):this._addCheck({kind:"datetime",precision:void 0===(null==E?void 0:E.precision)?null:null==E?void 0:E.precision,offset:null!==(T=null==E?void 0:E.offset)&&void 0!==T&&T,local:null!==(e=null==E?void 0:E.local)&&void 0!==e&&e,...TS.errToObj(null==E?void 0:E.message)})}date(E){return this._addCheck({kind:"date",message:E})}time(E){return"string"==typeof E?this._addCheck({kind:"time",precision:null,message:E}):this._addCheck({kind:"time",precision:void 0===(null==E?void 0:E.precision)?null:null==E?void 0:E.precision,...TS.errToObj(null==E?void 0:E.message)})}duration(E){return this._addCheck({kind:"duration",...TS.errToObj(E)})}regex(E,T){return this._addCheck({kind:"regex",regex:E,...TS.errToObj(T)})}includes(E,T){return this._addCheck({kind:"includes",value:E,position:null==T?void 0:T.position,...TS.errToObj(null==T?void 0:T.message)})}startsWith(E,T){return this._addCheck({kind:"startsWith",value:E,...TS.errToObj(T)})}endsWith(E,T){return this._addCheck({kind:"endsWith",value:E,...TS.errToObj(T)})}min(E,T){return this._addCheck({kind:"min",value:E,...TS.errToObj(T)})}max(E,T){return this._addCheck({kind:"max",value:E,...TS.errToObj(T)})}length(E,T){return this._addCheck({kind:"length",value:E,...TS.errToObj(T)})}nonempty(E){return this.min(1,TS.errToObj(E))}trim(){return new lS({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new lS({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new lS({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find((E=>"datetime"===E.kind))}get isDate(){return!!this._def.checks.find((E=>"date"===E.kind))}get isTime(){return!!this._def.checks.find((E=>"time"===E.kind))}get isDuration(){return!!this._def.checks.find((E=>"duration"===E.kind))}get isEmail(){return!!this._def.checks.find((E=>"email"===E.kind))}get isURL(){return!!this._def.checks.find((E=>"url"===E.kind))}get isEmoji(){return!!this._def.checks.find((E=>"emoji"===E.kind))}get isUUID(){return!!this._def.checks.find((E=>"uuid"===E.kind))}get isNANOID(){return!!this._def.checks.find((E=>"nanoid"===E.kind))}get isCUID(){return!!this._def.checks.find((E=>"cuid"===E.kind))}get isCUID2(){return!!this._def.checks.find((E=>"cuid2"===E.kind))}get isULID(){return!!this._def.checks.find((E=>"ulid"===E.kind))}get isIP(){return!!this._def.checks.find((E=>"ip"===E.kind))}get isBase64(){return!!this._def.checks.find((E=>"base64"===E.kind))}get minLength(){let E=null;for(const T of this._def.checks)"min"===T.kind&&(null===E||T.value>E)&&(E=T.value);return E}get maxLength(){let E=null;for(const T of this._def.checks)"max"===T.kind&&(null===E||T.value<E)&&(E=T.value);return E}}function cS(E,T){const e=(E.toString().split(".")[1]||"").length,R=(T.toString().split(".")[1]||"").length,A=e>R?e:R;return parseInt(E.toFixed(A).replace(".",""))%parseInt(T.toFixed(A).replace(".",""))/Math.pow(10,A)}lS.create=E=>{var T;return new lS({checks:[],typeName:nt.ZodString,coerce:null!==(T=null==E?void 0:E.coerce)&&void 0!==T&&T,...tS(E)})};class uS extends IS{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(E){this._def.coerce&&(E.data=Number(E.data));if(this._getType(E)!==yA.number){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.number,received:T.parsedType}),wA}let T;const e=new $A;for(const R of this._def.checks)if("int"===R.kind)hA.isInteger(E.data)||(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.invalid_type,expected:"integer",received:"float",message:R.message}),e.dirty());else if("min"===R.kind){(R.inclusive?E.data<R.value:E.data<=R.value)&&(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.too_small,minimum:R.value,type:"number",inclusive:R.inclusive,exact:!1,message:R.message}),e.dirty())}else if("max"===R.kind){(R.inclusive?E.data>R.value:E.data>=R.value)&&(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.too_big,maximum:R.value,type:"number",inclusive:R.inclusive,exact:!1,message:R.message}),e.dirty())}else"multipleOf"===R.kind?0!==cS(E.data,R.value)&&(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.not_multiple_of,multipleOf:R.value,message:R.message}),e.dirty()):"finite"===R.kind?Number.isFinite(E.data)||(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.not_finite,message:R.message}),e.dirty()):hA.assertNever(R);return{status:e.value,value:E.data}}gte(E,T){return this.setLimit("min",E,!0,TS.toString(T))}gt(E,T){return this.setLimit("min",E,!1,TS.toString(T))}lte(E,T){return this.setLimit("max",E,!0,TS.toString(T))}lt(E,T){return this.setLimit("max",E,!1,TS.toString(T))}setLimit(E,T,e,R){return new uS({...this._def,checks:[...this._def.checks,{kind:E,value:T,inclusive:e,message:TS.toString(R)}]})}_addCheck(E){return new uS({...this._def,checks:[...this._def.checks,E]})}int(E){return this._addCheck({kind:"int",message:TS.toString(E)})}positive(E){return this._addCheck({kind:"min",value:0,inclusive:!1,message:TS.toString(E)})}negative(E){return this._addCheck({kind:"max",value:0,inclusive:!1,message:TS.toString(E)})}nonpositive(E){return this._addCheck({kind:"max",value:0,inclusive:!0,message:TS.toString(E)})}nonnegative(E){return this._addCheck({kind:"min",value:0,inclusive:!0,message:TS.toString(E)})}multipleOf(E,T){return this._addCheck({kind:"multipleOf",value:E,message:TS.toString(T)})}finite(E){return this._addCheck({kind:"finite",message:TS.toString(E)})}safe(E){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:TS.toString(E)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:TS.toString(E)})}get minValue(){let E=null;for(const T of this._def.checks)"min"===T.kind&&(null===E||T.value>E)&&(E=T.value);return E}get maxValue(){let E=null;for(const T of this._def.checks)"max"===T.kind&&(null===E||T.value<E)&&(E=T.value);return E}get isInt(){return!!this._def.checks.find((E=>"int"===E.kind||"multipleOf"===E.kind&&hA.isInteger(E.value)))}get isFinite(){let E=null,T=null;for(const e of this._def.checks){if("finite"===e.kind||"int"===e.kind||"multipleOf"===e.kind)return!0;"min"===e.kind?(null===T||e.value>T)&&(T=e.value):"max"===e.kind&&(null===E||e.value<E)&&(E=e.value)}return Number.isFinite(T)&&Number.isFinite(E)}}uS.create=E=>new uS({checks:[],typeName:nt.ZodNumber,coerce:(null==E?void 0:E.coerce)||!1,...tS(E)});class dS extends IS{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(E){this._def.coerce&&(E.data=BigInt(E.data));if(this._getType(E)!==yA.bigint){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.bigint,received:T.parsedType}),wA}let T;const e=new $A;for(const R of this._def.checks)if("min"===R.kind){(R.inclusive?E.data<R.value:E.data<=R.value)&&(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.too_small,type:"bigint",minimum:R.value,inclusive:R.inclusive,message:R.message}),e.dirty())}else if("max"===R.kind){(R.inclusive?E.data>R.value:E.data>=R.value)&&(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.too_big,type:"bigint",maximum:R.value,inclusive:R.inclusive,message:R.message}),e.dirty())}else"multipleOf"===R.kind?E.data%R.value!==BigInt(0)&&(T=this._getOrReturnCtx(E,T),xA(T,{code:WA.not_multiple_of,multipleOf:R.value,message:R.message}),e.dirty()):hA.assertNever(R);return{status:e.value,value:E.data}}gte(E,T){return this.setLimit("min",E,!0,TS.toString(T))}gt(E,T){return this.setLimit("min",E,!1,TS.toString(T))}lte(E,T){return this.setLimit("max",E,!0,TS.toString(T))}lt(E,T){return this.setLimit("max",E,!1,TS.toString(T))}setLimit(E,T,e,R){return new dS({...this._def,checks:[...this._def.checks,{kind:E,value:T,inclusive:e,message:TS.toString(R)}]})}_addCheck(E){return new dS({...this._def,checks:[...this._def.checks,E]})}positive(E){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:TS.toString(E)})}negative(E){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:TS.toString(E)})}nonpositive(E){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:TS.toString(E)})}nonnegative(E){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:TS.toString(E)})}multipleOf(E,T){return this._addCheck({kind:"multipleOf",value:E,message:TS.toString(T)})}get minValue(){let E=null;for(const T of this._def.checks)"min"===T.kind&&(null===E||T.value>E)&&(E=T.value);return E}get maxValue(){let E=null;for(const T of this._def.checks)"max"===T.kind&&(null===E||T.value<E)&&(E=T.value);return E}}dS.create=E=>{var T;return new dS({checks:[],typeName:nt.ZodBigInt,coerce:null!==(T=null==E?void 0:E.coerce)&&void 0!==T&&T,...tS(E)})};class GS extends IS{_parse(E){this._def.coerce&&(E.data=Boolean(E.data));if(this._getType(E)!==yA.boolean){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.boolean,received:T.parsedType}),wA}return JA(E.data)}}GS.create=E=>new GS({typeName:nt.ZodBoolean,coerce:(null==E?void 0:E.coerce)||!1,...tS(E)});class pS extends IS{_parse(E){this._def.coerce&&(E.data=new Date(E.data));if(this._getType(E)!==yA.date){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.date,received:T.parsedType}),wA}if(isNaN(E.data.getTime())){return xA(this._getOrReturnCtx(E),{code:WA.invalid_date}),wA}const T=new $A;let e;for(const R of this._def.checks)"min"===R.kind?E.data.getTime()<R.value&&(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.too_small,message:R.message,inclusive:!0,exact:!1,minimum:R.value,type:"date"}),T.dirty()):"max"===R.kind?E.data.getTime()>R.value&&(e=this._getOrReturnCtx(E,e),xA(e,{code:WA.too_big,message:R.message,inclusive:!0,exact:!1,maximum:R.value,type:"date"}),T.dirty()):hA.assertNever(R);return{status:T.value,value:new Date(E.data.getTime())}}_addCheck(E){return new pS({...this._def,checks:[...this._def.checks,E]})}min(E,T){return this._addCheck({kind:"min",value:E.getTime(),message:TS.toString(T)})}max(E,T){return this._addCheck({kind:"max",value:E.getTime(),message:TS.toString(T)})}get minDate(){let E=null;for(const T of this._def.checks)"min"===T.kind&&(null===E||T.value>E)&&(E=T.value);return null!=E?new Date(E):null}get maxDate(){let E=null;for(const T of this._def.checks)"max"===T.kind&&(null===E||T.value<E)&&(E=T.value);return null!=E?new Date(E):null}}pS.create=E=>new pS({checks:[],coerce:(null==E?void 0:E.coerce)||!1,typeName:nt.ZodDate,...tS(E)});class hS extends IS{_parse(E){if(this._getType(E)!==yA.symbol){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.symbol,received:T.parsedType}),wA}return JA(E.data)}}hS.create=E=>new hS({typeName:nt.ZodSymbol,...tS(E)});class HS extends IS{_parse(E){if(this._getType(E)!==yA.undefined){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.undefined,received:T.parsedType}),wA}return JA(E.data)}}HS.create=E=>new HS({typeName:nt.ZodUndefined,...tS(E)});class mS extends IS{_parse(E){if(this._getType(E)!==yA.null){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.null,received:T.parsedType}),wA}return JA(E.data)}}mS.create=E=>new mS({typeName:nt.ZodNull,...tS(E)});class BS extends IS{constructor(){super(...arguments),this._any=!0}_parse(E){return JA(E.data)}}BS.create=E=>new BS({typeName:nt.ZodAny,...tS(E)});class fS extends IS{constructor(){super(...arguments),this._unknown=!0}_parse(E){return JA(E.data)}}fS.create=E=>new fS({typeName:nt.ZodUnknown,...tS(E)});class YS extends IS{_parse(E){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.never,received:T.parsedType}),wA}}YS.create=E=>new YS({typeName:nt.ZodNever,...tS(E)});class FS extends IS{_parse(E){if(this._getType(E)!==yA.undefined){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.void,received:T.parsedType}),wA}return JA(E.data)}}FS.create=E=>new FS({typeName:nt.ZodVoid,...tS(E)});class yS extends IS{_parse(E){const{ctx:T,status:e}=this._processInputParams(E),R=this._def;if(T.parsedType!==yA.array)return xA(T,{code:WA.invalid_type,expected:yA.array,received:T.parsedType}),wA;if(null!==R.exactLength){const E=T.data.length>R.exactLength.value,A=T.data.length<R.exactLength.value;(E||A)&&(xA(T,{code:E?WA.too_big:WA.too_small,minimum:A?R.exactLength.value:void 0,maximum:E?R.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:R.exactLength.message}),e.dirty())}if(null!==R.minLength&&T.data.length<R.minLength.value&&(xA(T,{code:WA.too_small,minimum:R.minLength.value,type:"array",inclusive:!0,exact:!1,message:R.minLength.message}),e.dirty()),null!==R.maxLength&&T.data.length>R.maxLength.value&&(xA(T,{code:WA.too_big,maximum:R.maxLength.value,type:"array",inclusive:!0,exact:!1,message:R.maxLength.message}),e.dirty()),T.common.async)return Promise.all([...T.data].map(((E,e)=>R.type._parseAsync(new AS(T,E,T.path,e))))).then((E=>$A.mergeArray(e,E)));const A=[...T.data].map(((E,e)=>R.type._parseSync(new AS(T,E,T.path,e))));return $A.mergeArray(e,A)}get element(){return this._def.type}min(E,T){return new yS({...this._def,minLength:{value:E,message:TS.toString(T)}})}max(E,T){return new yS({...this._def,maxLength:{value:E,message:TS.toString(T)}})}length(E,T){return new yS({...this._def,exactLength:{value:E,message:TS.toString(T)}})}nonempty(E){return this.min(1,E)}}function VS(E){if(E instanceof WS){const T={};for(const e in E.shape){const R=E.shape[e];T[e]=et.create(VS(R))}return new WS({...E._def,shape:()=>T})}return E instanceof yS?new yS({...E._def,type:VS(E.element)}):E instanceof et?et.create(VS(E.unwrap())):E instanceof Rt?Rt.create(VS(E.unwrap())):E instanceof xS?xS.create(E.items.map((E=>VS(E)))):E}yS.create=(E,T)=>new yS({type:E,minLength:null,maxLength:null,exactLength:null,typeName:nt.ZodArray,...tS(T)});class WS extends IS{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(null!==this._cached)return this._cached;const E=this._def.shape(),T=hA.objectKeys(E);return this._cached={shape:E,keys:T}}_parse(E){if(this._getType(E)!==yA.object){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.object,received:T.parsedType}),wA}const{status:T,ctx:e}=this._processInputParams(E),{shape:R,keys:A}=this._getCached(),S=[];if(!(this._def.catchall instanceof YS&&"strip"===this._def.unknownKeys))for(const E in e.data)A.includes(E)||S.push(E);const t=[];for(const E of A){const T=R[E],A=e.data[E];t.push({key:{status:"valid",value:E},value:T._parse(new AS(e,A,e.path,E)),alwaysSet:E in e.data})}if(this._def.catchall instanceof YS){const E=this._def.unknownKeys;if("passthrough"===E)for(const E of S)t.push({key:{status:"valid",value:E},value:{status:"valid",value:e.data[E]}});else if("strict"===E)S.length>0&&(xA(e,{code:WA.unrecognized_keys,keys:S}),T.dirty());else if("strip"!==E)throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const E=this._def.catchall;for(const T of S){const R=e.data[T];t.push({key:{status:"valid",value:T},value:E._parse(new AS(e,R,e.path,T)),alwaysSet:T in e.data})}}return e.common.async?Promise.resolve().then((async()=>{const E=[];for(const T of t){const e=await T.key,R=await T.value;E.push({key:e,value:R,alwaysSet:T.alwaysSet})}return E})).then((E=>$A.mergeObjectSync(T,E))):$A.mergeObjectSync(T,t)}get shape(){return this._def.shape()}strict(E){return TS.errToObj,new WS({...this._def,unknownKeys:"strict",...void 0!==E?{errorMap:(T,e)=>{var R,A,S,t;const I=null!==(S=null===(A=(R=this._def).errorMap)||void 0===A?void 0:A.call(R,T,e).message)&&void 0!==S?S:e.defaultError;return"unrecognized_keys"===T.code?{message:null!==(t=TS.errToObj(E).message)&&void 0!==t?t:I}:{message:I}}}:{}})}strip(){return new WS({...this._def,unknownKeys:"strip"})}passthrough(){return new WS({...this._def,unknownKeys:"passthrough"})}extend(E){return new WS({...this._def,shape:()=>({...this._def.shape(),...E})})}merge(E){return new WS({unknownKeys:E._def.unknownKeys,catchall:E._def.catchall,shape:()=>({...this._def.shape(),...E._def.shape()}),typeName:nt.ZodObject})}setKey(E,T){return this.augment({[E]:T})}catchall(E){return new WS({...this._def,catchall:E})}pick(E){const T={};return hA.objectKeys(E).forEach((e=>{E[e]&&this.shape[e]&&(T[e]=this.shape[e])})),new WS({...this._def,shape:()=>T})}omit(E){const T={};return hA.objectKeys(this.shape).forEach((e=>{E[e]||(T[e]=this.shape[e])})),new WS({...this._def,shape:()=>T})}deepPartial(){return VS(this)}partial(E){const T={};return hA.objectKeys(this.shape).forEach((e=>{const R=this.shape[e];E&&!E[e]?T[e]=R:T[e]=R.optional()})),new WS({...this._def,shape:()=>T})}required(E){const T={};return hA.objectKeys(this.shape).forEach((e=>{if(E&&!E[e])T[e]=this.shape[e];else{let E=this.shape[e];for(;E instanceof et;)E=E._def.innerType;T[e]=E}})),new WS({...this._def,shape:()=>T})}keyof(){return qS(hA.objectKeys(this.shape))}}WS.create=(E,T)=>new WS({shape:()=>E,unknownKeys:"strip",catchall:YS.create(),typeName:nt.ZodObject,...tS(T)}),WS.strictCreate=(E,T)=>new WS({shape:()=>E,unknownKeys:"strict",catchall:YS.create(),typeName:nt.ZodObject,...tS(T)}),WS.lazycreate=(E,T)=>new WS({shape:E,unknownKeys:"strip",catchall:YS.create(),typeName:nt.ZodObject,...tS(T)});class gS extends IS{_parse(E){const{ctx:T}=this._processInputParams(E),e=this._def.options;if(T.common.async)return Promise.all(e.map((async E=>{const e={...T,common:{...T.common,issues:[]},parent:null};return{result:await E._parseAsync({data:T.data,path:T.path,parent:e}),ctx:e}}))).then((function(E){for(const T of E)if("valid"===T.result.status)return T.result;for(const e of E)if("dirty"===e.result.status)return T.common.issues.push(...e.ctx.common.issues),e.result;const e=E.map((E=>new gA(E.ctx.common.issues)));return xA(T,{code:WA.invalid_union,unionErrors:e}),wA}));{let E;const R=[];for(const A of e){const e={...T,common:{...T.common,issues:[]},parent:null},S=A._parseSync({data:T.data,path:T.path,parent:e});if("valid"===S.status)return S;"dirty"!==S.status||E||(E={result:S,ctx:e}),e.common.issues.length&&R.push(e.common.issues)}if(E)return T.common.issues.push(...E.ctx.common.issues),E.result;const A=R.map((E=>new gA(E)));return xA(T,{code:WA.invalid_union,unionErrors:A}),wA}}get options(){return this._def.options}}gS.create=(E,T)=>new gS({options:E,typeName:nt.ZodUnion,...tS(T)});const XS=E=>E instanceof ZS?XS(E.schema):E instanceof Tt?XS(E.innerType()):E instanceof QS?[E.value]:E instanceof jS?E.options:E instanceof zS?hA.objectValues(E.enum):E instanceof At?XS(E._def.innerType):E instanceof HS?[void 0]:E instanceof mS?[null]:E instanceof et?[void 0,...XS(E.unwrap())]:E instanceof Rt?[null,...XS(E.unwrap())]:E instanceof Ot||E instanceof st?XS(E.unwrap()):E instanceof St?XS(E._def.innerType):[];class vS extends IS{_parse(E){const{ctx:T}=this._processInputParams(E);if(T.parsedType!==yA.object)return xA(T,{code:WA.invalid_type,expected:yA.object,received:T.parsedType}),wA;const e=this.discriminator,R=T.data[e],A=this.optionsMap.get(R);return A?T.common.async?A._parseAsync({data:T.data,path:T.path,parent:T}):A._parseSync({data:T.data,path:T.path,parent:T}):(xA(T,{code:WA.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[e]}),wA)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(E,T,e){const R=new Map;for(const e of T){const T=XS(e.shape[E]);if(!T.length)throw new Error(`A discriminator value for key \`${E}\` could not be extracted from all schema options`);for(const A of T){if(R.has(A))throw new Error(`Discriminator property ${String(E)} has duplicate value ${String(A)}`);R.set(A,e)}}return new vS({typeName:nt.ZodDiscriminatedUnion,discriminator:E,options:T,optionsMap:R,...tS(e)})}}function bS(E,T){const e=VA(E),R=VA(T);if(E===T)return{valid:!0,data:E};if(e===yA.object&&R===yA.object){const e=hA.objectKeys(T),R=hA.objectKeys(E).filter((E=>-1!==e.indexOf(E))),A={...E,...T};for(const e of R){const R=bS(E[e],T[e]);if(!R.valid)return{valid:!1};A[e]=R.data}return{valid:!0,data:A}}if(e===yA.array&&R===yA.array){if(E.length!==T.length)return{valid:!1};const e=[];for(let R=0;R<E.length;R++){const A=bS(E[R],T[R]);if(!A.valid)return{valid:!1};e.push(A.data)}return{valid:!0,data:e}}return e===yA.date&&R===yA.date&&+E==+T?{valid:!0,data:E}:{valid:!1}}class KS extends IS{_parse(E){const{status:T,ctx:e}=this._processInputParams(E),R=(E,R)=>{if(ZA(E)||ZA(R))return wA;const A=bS(E.value,R.value);return A.valid?((QA(E)||QA(R))&&T.dirty(),{status:T.value,value:A.data}):(xA(e,{code:WA.invalid_intersection_types}),wA)};return e.common.async?Promise.all([this._def.left._parseAsync({data:e.data,path:e.path,parent:e}),this._def.right._parseAsync({data:e.data,path:e.path,parent:e})]).then((([E,T])=>R(E,T))):R(this._def.left._parseSync({data:e.data,path:e.path,parent:e}),this._def.right._parseSync({data:e.data,path:e.path,parent:e}))}}KS.create=(E,T,e)=>new KS({left:E,right:T,typeName:nt.ZodIntersection,...tS(e)});class xS extends IS{_parse(E){const{status:T,ctx:e}=this._processInputParams(E);if(e.parsedType!==yA.array)return xA(e,{code:WA.invalid_type,expected:yA.array,received:e.parsedType}),wA;if(e.data.length<this._def.items.length)return xA(e,{code:WA.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),wA;!this._def.rest&&e.data.length>this._def.items.length&&(xA(e,{code:WA.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),T.dirty());const R=[...e.data].map(((E,T)=>{const R=this._def.items[T]||this._def.rest;return R?R._parse(new AS(e,E,e.path,T)):null})).filter((E=>!!E));return e.common.async?Promise.all(R).then((E=>$A.mergeArray(T,E))):$A.mergeArray(T,R)}get items(){return this._def.items}rest(E){return new xS({...this._def,rest:E})}}xS.create=(E,T)=>{if(!Array.isArray(E))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new xS({items:E,typeName:nt.ZodTuple,rest:null,...tS(T)})};class $S extends IS{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(E){const{status:T,ctx:e}=this._processInputParams(E);if(e.parsedType!==yA.object)return xA(e,{code:WA.invalid_type,expected:yA.object,received:e.parsedType}),wA;const R=[],A=this._def.keyType,S=this._def.valueType;for(const E in e.data)R.push({key:A._parse(new AS(e,E,e.path,E)),value:S._parse(new AS(e,e.data[E],e.path,E)),alwaysSet:E in e.data});return e.common.async?$A.mergeObjectAsync(T,R):$A.mergeObjectSync(T,R)}get element(){return this._def.valueType}static create(E,T,e){return new $S(T instanceof IS?{keyType:E,valueType:T,typeName:nt.ZodRecord,...tS(e)}:{keyType:lS.create(),valueType:E,typeName:nt.ZodRecord,...tS(T)})}}class wS extends IS{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(E){const{status:T,ctx:e}=this._processInputParams(E);if(e.parsedType!==yA.map)return xA(e,{code:WA.invalid_type,expected:yA.map,received:e.parsedType}),wA;const R=this._def.keyType,A=this._def.valueType,S=[...e.data.entries()].map((([E,T],S)=>({key:R._parse(new AS(e,E,e.path,[S,"key"])),value:A._parse(new AS(e,T,e.path,[S,"value"]))})));if(e.common.async){const E=new Map;return Promise.resolve().then((async()=>{for(const e of S){const R=await e.key,A=await e.value;if("aborted"===R.status||"aborted"===A.status)return wA;"dirty"!==R.status&&"dirty"!==A.status||T.dirty(),E.set(R.value,A.value)}return{status:T.value,value:E}}))}{const E=new Map;for(const e of S){const R=e.key,A=e.value;if("aborted"===R.status||"aborted"===A.status)return wA;"dirty"!==R.status&&"dirty"!==A.status||T.dirty(),E.set(R.value,A.value)}return{status:T.value,value:E}}}}wS.create=(E,T,e)=>new wS({valueType:T,keyType:E,typeName:nt.ZodMap,...tS(e)});class kS extends IS{_parse(E){const{status:T,ctx:e}=this._processInputParams(E);if(e.parsedType!==yA.set)return xA(e,{code:WA.invalid_type,expected:yA.set,received:e.parsedType}),wA;const R=this._def;null!==R.minSize&&e.data.size<R.minSize.value&&(xA(e,{code:WA.too_small,minimum:R.minSize.value,type:"set",inclusive:!0,exact:!1,message:R.minSize.message}),T.dirty()),null!==R.maxSize&&e.data.size>R.maxSize.value&&(xA(e,{code:WA.too_big,maximum:R.maxSize.value,type:"set",inclusive:!0,exact:!1,message:R.maxSize.message}),T.dirty());const A=this._def.valueType;function S(E){const e=new Set;for(const R of E){if("aborted"===R.status)return wA;"dirty"===R.status&&T.dirty(),e.add(R.value)}return{status:T.value,value:e}}const t=[...e.data.values()].map(((E,T)=>A._parse(new AS(e,E,e.path,T))));return e.common.async?Promise.all(t).then((E=>S(E))):S(t)}min(E,T){return new kS({...this._def,minSize:{value:E,message:TS.toString(T)}})}max(E,T){return new kS({...this._def,maxSize:{value:E,message:TS.toString(T)}})}size(E,T){return this.min(E,T).max(E,T)}nonempty(E){return this.min(1,E)}}kS.create=(E,T)=>new kS({valueType:E,minSize:null,maxSize:null,typeName:nt.ZodSet,...tS(T)});class JS extends IS{constructor(){super(...arguments),this.validate=this.implement}_parse(E){const{ctx:T}=this._processInputParams(E);if(T.parsedType!==yA.function)return xA(T,{code:WA.invalid_type,expected:yA.function,received:T.parsedType}),wA;function e(E,e){return KA({data:E,path:T.path,errorMaps:[T.common.contextualErrorMap,T.schemaErrorMap,bA(),XA].filter((E=>!!E)),issueData:{code:WA.invalid_arguments,argumentsError:e}})}function R(E,e){return KA({data:E,path:T.path,errorMaps:[T.common.contextualErrorMap,T.schemaErrorMap,bA(),XA].filter((E=>!!E)),issueData:{code:WA.invalid_return_type,returnTypeError:e}})}const A={errorMap:T.common.contextualErrorMap},S=T.data;if(this._def.returns instanceof Et){const E=this;return JA((async function(...T){const t=new gA([]),I=await E._def.args.parseAsync(T,A).catch((E=>{throw t.addIssue(e(T,E)),t})),O=await Reflect.apply(S,this,I);return await E._def.returns._def.type.parseAsync(O,A).catch((E=>{throw t.addIssue(R(O,E)),t}))}))}{const E=this;return JA((function(...T){const t=E._def.args.safeParse(T,A);if(!t.success)throw new gA([e(T,t.error)]);const I=Reflect.apply(S,this,t.data),O=E._def.returns.safeParse(I,A);if(!O.success)throw new gA([R(I,O.error)]);return O.data}))}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...E){return new JS({...this._def,args:xS.create(E).rest(fS.create())})}returns(E){return new JS({...this._def,returns:E})}implement(E){return this.parse(E)}strictImplement(E){return this.parse(E)}static create(E,T,e){return new JS({args:E||xS.create([]).rest(fS.create()),returns:T||fS.create(),typeName:nt.ZodFunction,...tS(e)})}}class ZS extends IS{get schema(){return this._def.getter()}_parse(E){const{ctx:T}=this._processInputParams(E);return this._def.getter()._parse({data:T.data,path:T.path,parent:T})}}ZS.create=(E,T)=>new ZS({getter:E,typeName:nt.ZodLazy,...tS(T)});class QS extends IS{_parse(E){if(E.data!==this._def.value){const T=this._getOrReturnCtx(E);return xA(T,{received:T.data,code:WA.invalid_literal,expected:this._def.value}),wA}return{status:"valid",value:E.data}}get value(){return this._def.value}}function qS(E,T){return new jS({values:E,typeName:nt.ZodEnum,...tS(T)})}QS.create=(E,T)=>new QS({value:E,typeName:nt.ZodLiteral,...tS(T)});class jS extends IS{constructor(){super(...arguments),eS.set(this,void 0)}_parse(E){if("string"!=typeof E.data){const T=this._getOrReturnCtx(E),e=this._def.values;return xA(T,{expected:hA.joinValues(e),received:T.parsedType,code:WA.invalid_type}),wA}if(zA(this,eS,"f")||ES(this,eS,new Set(this._def.values),"f"),!zA(this,eS,"f").has(E.data)){const T=this._getOrReturnCtx(E),e=this._def.values;return xA(T,{received:T.data,code:WA.invalid_enum_value,options:e}),wA}return JA(E.data)}get options(){return this._def.values}get enum(){const E={};for(const T of this._def.values)E[T]=T;return E}get Values(){const E={};for(const T of this._def.values)E[T]=T;return E}get Enum(){const E={};for(const T of this._def.values)E[T]=T;return E}extract(E,T=this._def){return jS.create(E,{...this._def,...T})}exclude(E,T=this._def){return jS.create(this.options.filter((T=>!E.includes(T))),{...this._def,...T})}}eS=new WeakMap,jS.create=qS;class zS extends IS{constructor(){super(...arguments),RS.set(this,void 0)}_parse(E){const T=hA.getValidEnumValues(this._def.values),e=this._getOrReturnCtx(E);if(e.parsedType!==yA.string&&e.parsedType!==yA.number){const E=hA.objectValues(T);return xA(e,{expected:hA.joinValues(E),received:e.parsedType,code:WA.invalid_type}),wA}if(zA(this,RS,"f")||ES(this,RS,new Set(hA.getValidEnumValues(this._def.values)),"f"),!zA(this,RS,"f").has(E.data)){const E=hA.objectValues(T);return xA(e,{received:e.data,code:WA.invalid_enum_value,options:E}),wA}return JA(E.data)}get enum(){return this._def.values}}RS=new WeakMap,zS.create=(E,T)=>new zS({values:E,typeName:nt.ZodNativeEnum,...tS(T)});class Et extends IS{unwrap(){return this._def.type}_parse(E){const{ctx:T}=this._processInputParams(E);if(T.parsedType!==yA.promise&&!1===T.common.async)return xA(T,{code:WA.invalid_type,expected:yA.promise,received:T.parsedType}),wA;const e=T.parsedType===yA.promise?T.data:Promise.resolve(T.data);return JA(e.then((E=>this._def.type.parseAsync(E,{path:T.path,errorMap:T.common.contextualErrorMap}))))}}Et.create=(E,T)=>new Et({type:E,typeName:nt.ZodPromise,...tS(T)});class Tt extends IS{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===nt.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(E){const{status:T,ctx:e}=this._processInputParams(E),R=this._def.effect||null,A={addIssue:E=>{xA(e,E),E.fatal?T.abort():T.dirty()},get path(){return e.path}};if(A.addIssue=A.addIssue.bind(A),"preprocess"===R.type){const E=R.transform(e.data,A);if(e.common.async)return Promise.resolve(E).then((async E=>{if("aborted"===T.value)return wA;const R=await this._def.schema._parseAsync({data:E,path:e.path,parent:e});return"aborted"===R.status?wA:"dirty"===R.status||"dirty"===T.value?kA(R.value):R}));{if("aborted"===T.value)return wA;const R=this._def.schema._parseSync({data:E,path:e.path,parent:e});return"aborted"===R.status?wA:"dirty"===R.status||"dirty"===T.value?kA(R.value):R}}if("refinement"===R.type){const E=E=>{const T=R.refinement(E,A);if(e.common.async)return Promise.resolve(T);if(T instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return E};if(!1===e.common.async){const R=this._def.schema._parseSync({data:e.data,path:e.path,parent:e});return"aborted"===R.status?wA:("dirty"===R.status&&T.dirty(),E(R.value),{status:T.value,value:R.value})}return this._def.schema._parseAsync({data:e.data,path:e.path,parent:e}).then((e=>"aborted"===e.status?wA:("dirty"===e.status&&T.dirty(),E(e.value).then((()=>({status:T.value,value:e.value}))))))}if("transform"===R.type){if(!1===e.common.async){const E=this._def.schema._parseSync({data:e.data,path:e.path,parent:e});if(!qA(E))return E;const S=R.transform(E.value,A);if(S instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:T.value,value:S}}return this._def.schema._parseAsync({data:e.data,path:e.path,parent:e}).then((E=>qA(E)?Promise.resolve(R.transform(E.value,A)).then((E=>({status:T.value,value:E}))):E))}hA.assertNever(R)}}Tt.create=(E,T,e)=>new Tt({schema:E,typeName:nt.ZodEffects,effect:T,...tS(e)}),Tt.createWithPreprocess=(E,T,e)=>new Tt({schema:T,effect:{type:"preprocess",transform:E},typeName:nt.ZodEffects,...tS(e)});class et extends IS{_parse(E){return this._getType(E)===yA.undefined?JA(void 0):this._def.innerType._parse(E)}unwrap(){return this._def.innerType}}et.create=(E,T)=>new et({innerType:E,typeName:nt.ZodOptional,...tS(T)});class Rt extends IS{_parse(E){return this._getType(E)===yA.null?JA(null):this._def.innerType._parse(E)}unwrap(){return this._def.innerType}}Rt.create=(E,T)=>new Rt({innerType:E,typeName:nt.ZodNullable,...tS(T)});class At extends IS{_parse(E){const{ctx:T}=this._processInputParams(E);let e=T.data;return T.parsedType===yA.undefined&&(e=this._def.defaultValue()),this._def.innerType._parse({data:e,path:T.path,parent:T})}removeDefault(){return this._def.innerType}}At.create=(E,T)=>new At({innerType:E,typeName:nt.ZodDefault,defaultValue:"function"==typeof T.default?T.default:()=>T.default,...tS(T)});class St extends IS{_parse(E){const{ctx:T}=this._processInputParams(E),e={...T,common:{...T.common,issues:[]}},R=this._def.innerType._parse({data:e.data,path:e.path,parent:{...e}});return jA(R)?R.then((E=>({status:"valid",value:"valid"===E.status?E.value:this._def.catchValue({get error(){return new gA(e.common.issues)},input:e.data})}))):{status:"valid",value:"valid"===R.status?R.value:this._def.catchValue({get error(){return new gA(e.common.issues)},input:e.data})}}removeCatch(){return this._def.innerType}}St.create=(E,T)=>new St({innerType:E,typeName:nt.ZodCatch,catchValue:"function"==typeof T.catch?T.catch:()=>T.catch,...tS(T)});class tt extends IS{_parse(E){if(this._getType(E)!==yA.nan){const T=this._getOrReturnCtx(E);return xA(T,{code:WA.invalid_type,expected:yA.nan,received:T.parsedType}),wA}return{status:"valid",value:E.data}}}tt.create=E=>new tt({typeName:nt.ZodNaN,...tS(E)});const It=Symbol("zod_brand");class Ot extends IS{_parse(E){const{ctx:T}=this._processInputParams(E),e=T.data;return this._def.type._parse({data:e,path:T.path,parent:T})}unwrap(){return this._def.type}}class Nt extends IS{_parse(E){const{status:T,ctx:e}=this._processInputParams(E);if(e.common.async){return(async()=>{const E=await this._def.in._parseAsync({data:e.data,path:e.path,parent:e});return"aborted"===E.status?wA:"dirty"===E.status?(T.dirty(),kA(E.value)):this._def.out._parseAsync({data:E.value,path:e.path,parent:e})})()}{const E=this._def.in._parseSync({data:e.data,path:e.path,parent:e});return"aborted"===E.status?wA:"dirty"===E.status?(T.dirty(),{status:"dirty",value:E.value}):this._def.out._parseSync({data:E.value,path:e.path,parent:e})}}static create(E,T){return new Nt({in:E,out:T,typeName:nt.ZodPipeline})}}class st extends IS{_parse(E){const T=this._def.innerType._parse(E),e=E=>(qA(E)&&(E.value=Object.freeze(E.value)),E);return jA(T)?T.then((E=>e(E))):e(T)}unwrap(){return this._def.innerType}}function rt(E,T={},e){return E?BS.create().superRefine(((R,A)=>{var S,t;if(!E(R)){const E="function"==typeof T?T(R):"string"==typeof T?{message:T}:T,I=null===(t=null!==(S=E.fatal)&&void 0!==S?S:e)||void 0===t||t,O="string"==typeof E?{message:E}:E;A.addIssue({code:"custom",...O,fatal:I})}})):BS.create()}st.create=(E,T)=>new st({innerType:E,typeName:nt.ZodReadonly,...tS(T)});const _t={object:WS.lazycreate};var nt;!function(E){E.ZodString="ZodString",E.ZodNumber="ZodNumber",E.ZodNaN="ZodNaN",E.ZodBigInt="ZodBigInt",E.ZodBoolean="ZodBoolean",E.ZodDate="ZodDate",E.ZodSymbol="ZodSymbol",E.ZodUndefined="ZodUndefined",E.ZodNull="ZodNull",E.ZodAny="ZodAny",E.ZodUnknown="ZodUnknown",E.ZodNever="ZodNever",E.ZodVoid="ZodVoid",E.ZodArray="ZodArray",E.ZodObject="ZodObject",E.ZodUnion="ZodUnion",E.ZodDiscriminatedUnion="ZodDiscriminatedUnion",E.ZodIntersection="ZodIntersection",E.ZodTuple="ZodTuple",E.ZodRecord="ZodRecord",E.ZodMap="ZodMap",E.ZodSet="ZodSet",E.ZodFunction="ZodFunction",E.ZodLazy="ZodLazy",E.ZodLiteral="ZodLiteral",E.ZodEnum="ZodEnum",E.ZodEffects="ZodEffects",E.ZodNativeEnum="ZodNativeEnum",E.ZodOptional="ZodOptional",E.ZodNullable="ZodNullable",E.ZodDefault="ZodDefault",E.ZodCatch="ZodCatch",E.ZodPromise="ZodPromise",E.ZodBranded="ZodBranded",E.ZodPipeline="ZodPipeline",E.ZodReadonly="ZodReadonly"}(nt||(nt={}));const Lt=lS.create,Ct=uS.create,at=tt.create,it=dS.create,ot=GS.create,Pt=pS.create,Dt=hS.create,Mt=HS.create,Ut=mS.create,lt=BS.create,ct=fS.create,ut=YS.create,dt=FS.create,Gt=yS.create,pt=WS.create,ht=WS.strictCreate,Ht=gS.create,mt=vS.create,Bt=KS.create,ft=xS.create,Yt=$S.create,Ft=wS.create,yt=kS.create,Vt=JS.create,Wt=ZS.create,gt=QS.create,Xt=jS.create,vt=zS.create,bt=Et.create,Kt=Tt.create,xt=et.create,$t=Rt.create,wt=Tt.createWithPreprocess,kt=Nt.create,Jt={string:E=>lS.create({...E,coerce:!0}),number:E=>uS.create({...E,coerce:!0}),boolean:E=>GS.create({...E,coerce:!0}),bigint:E=>dS.create({...E,coerce:!0}),date:E=>pS.create({...E,coerce:!0})},Zt=wA;var Qt=Object.freeze({__proto__:null,defaultErrorMap:XA,setErrorMap:function(E){vA=E},getErrorMap:bA,makeIssue:KA,EMPTY_PATH:[],addIssueToContext:xA,ParseStatus:$A,INVALID:wA,DIRTY:kA,OK:JA,isAborted:ZA,isDirty:QA,isValid:qA,isAsync:jA,get util(){return hA},get objectUtil(){return HA},ZodParsedType:yA,getParsedType:VA,ZodType:IS,datetimeRegex:US,ZodString:lS,ZodNumber:uS,ZodBigInt:dS,ZodBoolean:GS,ZodDate:pS,ZodSymbol:hS,ZodUndefined:HS,ZodNull:mS,ZodAny:BS,ZodUnknown:fS,ZodNever:YS,ZodVoid:FS,ZodArray:yS,ZodObject:WS,ZodUnion:gS,ZodDiscriminatedUnion:vS,ZodIntersection:KS,ZodTuple:xS,ZodRecord:$S,ZodMap:wS,ZodSet:kS,ZodFunction:JS,ZodLazy:ZS,ZodLiteral:QS,ZodEnum:jS,ZodNativeEnum:zS,ZodPromise:Et,ZodEffects:Tt,ZodTransformer:Tt,ZodOptional:et,ZodNullable:Rt,ZodDefault:At,ZodCatch:St,ZodNaN:tt,BRAND:It,ZodBranded:Ot,ZodPipeline:Nt,ZodReadonly:st,custom:rt,Schema:IS,ZodSchema:IS,late:_t,get ZodFirstPartyTypeKind(){return nt},coerce:Jt,any:lt,array:Gt,bigint:it,boolean:ot,date:Pt,discriminatedUnion:mt,effect:Kt,enum:Xt,function:Vt,instanceof:(E,T={message:`Input not instance of ${E.name}`})=>rt((T=>T instanceof E),T),intersection:Bt,lazy:Wt,literal:gt,map:Ft,nan:at,nativeEnum:vt,never:ut,null:Ut,nullable:$t,number:Ct,object:pt,oboolean:()=>ot().optional(),onumber:()=>Ct().optional(),optional:xt,ostring:()=>Lt().optional(),pipeline:kt,preprocess:wt,promise:bt,record:Yt,set:yt,strictObject:ht,string:Lt,symbol:Dt,transformer:Kt,tuple:ft,undefined:Mt,union:Ht,unknown:ct,void:dt,NEVER:Zt,ZodIssueCode:WA,quotelessJson:E=>JSON.stringify(E,null,2).replace(/"([^"]+)":/g,"$1:"),ZodError:gA});function qt(E){let T,e,A,S,N,r,n,a,i;return{c(){T=s("div"),e=s("button"),e.textContent="Copy",A=_(),S=s("button"),S.textContent="Insert in editor",N=_(),r=s("textarea"),C(e,"class","button is-info"),C(S,"class","button is-info"),C(T,"class","buttons"),r.value=n=E[0].text,r.readOnly=!0,C(r,"class","svelte-xxbnpg")},m(R,O){I(R,T,O),t(T,e),t(T,A),t(T,S),I(R,N,O),I(R,r,O),a||(i=[L(e,"click",E[8]),L(S,"click",E[9])],a=!0)},p(E,T){1&T&&n!==(n=E[0].text)&&(r.value=n)},d(E){E&&O(T),E&&O(N),E&&O(r),a=!1,R(i)}}}function jt(T){let e,A,S,N,n,i,o=(T[0].isOpen?"- ":"+")+T[0].title,P=T[0].isOpen&&qt(T);return{c(){e=s("div"),A=s("p"),S=r(o),N=_(),P&&P.c(),C(A,"class","log-title mb-2 svelte-xxbnpg"),C(e,"class","log svelte-xxbnpg")},m(E,R){I(E,e,R),t(e,A),t(A,S),t(e,N),P&&P.m(e,null),T[10](e),n||(i=[L(A,"keydown",zt),L(A,"click",T[7])],n=!0)},p(E,[T]){1&T&&o!==(o=(E[0].isOpen?"- ":"+")+E[0].title)&&a(S,o),E[0].isOpen?P?P.p(E,T):(P=qt(E),P.c(),P.m(e,null)):P&&(P.d(1),P=null)},i:E,o:E,d(E){E&&O(e),P&&P.d(),T[10](null),n=!1,R(i)}}}const zt=()=>{};function EI(E,T,e){let R,{log:A}=T;const S=M();async function t(){await navigator.clipboard.writeText(A.text),alert("Copied!")}function I(){S("setEditor",A.text)}function O(){R.scrollIntoView({behavior:"smooth"}),e(0,A.isOpen=!0,A),S("open")}function N(){e(0,A.isOpen=!1,A),S("close")}function s(){A.isOpen?N():O()}return E.$$set=E=>{"log"in E&&e(0,A=E.log)},[A,R,t,I,s,O,N,()=>s(),()=>t(),()=>I(),function(E){l[E?"unshift":"push"]((()=>{R=E,e(1,R)}))}]}class TI extends J{constructor(E){super(),k(this,E,EI,jt,S,{log:0,open:5,close:6})}get open(){return this.$$.ctx[5]}get close(){return this.$$.ctx[6]}}function eI(E,T,e){const R=E.slice();return R[10]=T[e],R[12]=e,R}function RI(E){let T,e,A=[],S=new Map,t=E[0];const N=E=>E[10].timestamp;for(let T=0;T<t.length;T+=1){let e=eI(E,t,T),R=N(e);S.set(R,A[T]=AI(R,e))}return{c(){for(let E=0;E<A.length;E+=1)A[E].c();T=n()},m(E,R){for(let T=0;T<A.length;T+=1)A[T]&&A[T].m(E,R);I(E,T,R),e=!0},p(E,e){13&e&&(t=E[0],W(),A=function(E,T,e,A,S,t,I,O,N,s,r,_){let n=E.length,L=t.length,C=n;const a={};for(;C--;)a[E[C].key]=C;const i=[],o=new Map,P=new Map,D=[];for(C=L;C--;){const E=_(S,t,C),R=e(E);let O=I.get(R);O?A&&D.push((()=>O.p(E,T))):(O=s(R,E),O.c()),o.set(R,i[C]=O),R in a&&P.set(R,Math.abs(C-a[R]))}const M=new Set,U=new Set;function l(E){X(E,1),E.m(O,r),I.set(E.key,E),r=E.first,L--}for(;n&&L;){const T=i[L-1],e=E[n-1],R=T.key,A=e.key;T===e?(r=T.first,n--,L--):o.has(A)?!I.has(R)||M.has(R)?l(T):U.has(A)?n--:P.get(R)>P.get(A)?(U.add(R),l(T)):(M.add(A),n--):(N(e,I),n--)}for(;n--;){const T=E[n];o.has(T.key)||N(T,I)}for(;L;)l(i[L-1]);return R(D),i}(A,e,N,1,E,t,S,T.parentNode,b,AI,T,eI),g())},i(E){if(!e){for(let E=0;E<t.length;E+=1)X(A[E]);e=!0}},o(E){for(let E=0;E<A.length;E+=1)v(A[E]);e=!1},d(E){for(let T=0;T<A.length;T+=1)A[T].d(E);E&&O(T)}}}function AI(E,T){let e,R,A;return R=new TI({props:{log:T[10]}}),R.$on("open",(function(){return T[7](T[12])})),R.$on("setEditor",T[8]),{key:E,first:null,c(){e=n(),x(R.$$.fragment),this.first=e},m(E,T){I(E,e,T),$(R,E,T),A=!0},p(E,e){T=E;const A={};1&e&&(A.log=T[10]),R.$set(A)},i(E){A||(X(R.$$.fragment,E),A=!0)},o(E){v(R.$$.fragment,E),A=!1},d(E){E&&O(e),w(R,E)}}}function SI(E){let T,e,A,S,N,n,i,o,P=E[1]?"-":"+",D=E[1]&&RI(E);return{c(){T=s("div"),e=s("label"),A=r(P),S=r("\n        Logs"),N=_(),D&&D.c(),C(e,"class","label svelte-v4uump"),C(e,"for",""),C(T,"class","logger")},m(R,O){I(R,T,O),t(T,e),t(e,A),t(e,S),t(T,N),D&&D.m(T,null),n=!0,i||(o=[L(e,"keydown",tI),L(e,"click",E[6])],i=!0)},p(E,[e]){(!n||2&e)&&P!==(P=E[1]?"-":"+")&&a(A,P),E[1]?D?(D.p(E,e),2&e&&X(D,1)):(D=RI(E),D.c(),X(D,1),D.m(T,null)):D&&(W(),v(D,1,1,(()=>{D=null})),g())},i(E){n||(X(D),n=!0)},o(E){v(D),n=!1},d(E){E&&O(T),D&&D.d(),i=!1,R(o)}}}const tI=()=>{};function II(E,T,e){const R=M();let A=[],S=!0;function t(E){R("setEditor",E)}function I(E){for(let T=0;T<A.length;T++)e(0,A[T].isOpen=E==T,A)}return[A,S,t,I,function(E){e(0,A=[...A,E])},function(){e(0,A=[])},()=>e(1,S=!S),E=>I(E),E=>t(E.detail)]}class OI extends J{constructor(E){super(),k(this,E,II,SI,S,{addLog:4,clear:5})}get addLog(){return this.$$.ctx[4]}get clear(){return this.$$.ctx[5]}}function NI(E,T,e){const R=E.slice();return R[32]=T[e],R[34]=e,R}function sI(E){let T,e,A,S,N,i,o,P,D,M,U,c,u,d,G,p,h=E[10]?"-":"+",H=!E[9]&&_I();function B(T){E[20](T)}let f={style:E[0]};void 0!==E[5]&&(f.value=E[5]),o=new FA({props:f}),E[19](o),l.push((()=>K(o,"value",B)));let Y=E[9]&&nI(E),F=E[8].length>0&&LI(E),y=E[6].length>0&&CI(E);return{c(){T=s("label"),e=r(h),A=r("\n            Editor"),S=_(),N=s("div"),H&&H.c(),i=_(),x(o.$$.fragment),D=_(),Y&&Y.c(),U=_(),F&&F.c(),c=_(),y&&y.c(),u=n(),C(T,"class","label svelte-bpuqfp"),C(T,"for",""),C(N,"class",M=E[10]?"is-block":"is-hidden")},m(R,O){I(R,T,O),t(T,e),t(T,A),E[17](T),I(R,S,O),I(R,N,O),H&&H.m(N,null),t(N,i),$(o,N,null),t(N,D),Y&&Y.m(N,null),I(R,U,O),F&&F.m(R,O),I(R,c,O),y&&y.m(R,O),I(R,u,O),d=!0,G||(p=[L(T,"keydown",MI),L(T,"click",E[18])],G=!0)},p(E,T){(!d||1024&T[0])&&h!==(h=E[10]?"-":"+")&&a(e,h),E[9]?H&&(H.d(1),H=null):H||(H=_I(),H.c(),H.m(N,i));const R={};1&T[0]&&(R.style=E[0]),!P&&32&T[0]&&(P=!0,R.value=E[5],m((()=>P=!1))),o.$set(R),E[9]?Y?Y.p(E,T):(Y=nI(E),Y.c(),Y.m(N,null)):Y&&(Y.d(1),Y=null),(!d||1024&T[0]&&M!==(M=E[10]?"is-block":"is-hidden"))&&C(N,"class",M),E[8].length>0?F?F.p(E,T):(F=LI(E),F.c(),F.m(c.parentNode,c)):F&&(F.d(1),F=null),E[6].length>0?y?(y.p(E,T),64&T[0]&&X(y,1)):(y=CI(E),y.c(),X(y,1),y.m(u.parentNode,u)):y&&(W(),v(y,1,1,(()=>{y=null})),g())},i(E){d||(X(o.$$.fragment,E),X(y),d=!0)},o(E){v(o.$$.fragment,E),v(y),d=!1},d(e){e&&O(T),E[17](null),e&&O(S),e&&O(N),H&&H.d(),E[19](null),w(o),Y&&Y.d(),e&&O(U),F&&F.d(e),e&&O(c),y&&y.d(e),e&&O(u),G=!1,R(p)}}}function rI(T){let e,R,A,S=T[7].length>0&&oI(T);return{c(){e=s("p"),e.textContent="Waiting for database to load...",R=_(),S&&S.c(),A=n()},m(E,T){I(E,e,T),I(E,R,T),S&&S.m(E,T),I(E,A,T)},p(E,T){E[7].length>0?S?S.p(E,T):(S=oI(E),S.c(),S.m(A.parentNode,A)):S&&(S.d(1),S=null)},i:E,o:E,d(E){E&&O(e),E&&O(R),S&&S.d(E),E&&O(A)}}}function _I(E){let T;return{c(){T=s("p"),T.textContent="Waiting for editor to load..."},m(E,e){I(E,T,e)},d(E){E&&O(T)}}}function nI(T){let e,A,S,N,r,n,a,i,o,P;return{c(){e=s("div"),A=s("button"),A.textContent="Execute",S=_(),N=s("button"),N.textContent="Format",r=_(),n=s("button"),n.textContent="Show Tables",a=_(),i=s("button"),i.textContent="Clear Log",C(A,"class","button is-info"),C(N,"class","button is-info"),C(n,"class","button is-info"),C(i,"class","button is-info"),C(e,"class","buttons")},m(E,R){I(E,e,R),t(e,A),t(e,S),t(e,N),t(e,r),t(e,n),t(e,a),t(e,i),o||(P=[L(A,"click",T[21]),L(N,"click",T[22]),L(n,"click",T[23]),L(i,"click",T[24])],o=!0)},p:E,d(E){E&&O(e),o=!1,R(P)}}}function LI(E){let T,e;return{c(){T=s("p"),e=r(E[8]),C(T,"class","editor-error mt-2 svelte-bpuqfp")},m(E,R){I(E,T,R),t(T,e)},p(E,T){256&T[0]&&a(e,E[8])},d(E){E&&O(T)}}}function CI(E){let T,e,A,S,N,i,o,P,D=E[11]?"-":"+",M=E[11]&&aI(E);return{c(){T=s("label"),e=r(D),A=r("\n                Results"),S=_(),M&&M.c(),N=n(),C(T,"class","label svelte-bpuqfp"),C(T,"for","")},m(R,O){I(R,T,O),t(T,e),t(T,A),E[25](T),I(R,S,O),M&&M.m(R,O),I(R,N,O),i=!0,o||(P=[L(T,"keydown",UI),L(T,"click",E[26])],o=!0)},p(E,T){(!i||2048&T[0])&&D!==(D=E[11]?"-":"+")&&a(e,D),E[11]?M?(M.p(E,T),2048&T[0]&&X(M,1)):(M=aI(E),M.c(),X(M,1),M.m(N.parentNode,N)):M&&(W(),v(M,1,1,(()=>{M=null})),g())},i(E){i||(X(M),i=!0)},o(E){v(M),i=!1},d(e){e&&O(T),E[25](null),e&&O(S),M&&M.d(e),e&&O(N),o=!1,R(P)}}}function aI(E){let T,e,R=E[6],A=[];for(let T=0;T<R.length;T+=1)A[T]=iI(NI(E,R,T));const S=E=>v(A[E],1,1,(()=>{A[E]=null}));return{c(){for(let E=0;E<A.length;E+=1)A[E].c();T=n()},m(E,R){for(let T=0;T<A.length;T+=1)A[T]&&A[T].m(E,R);I(E,T,R),e=!0},p(E,e){if(64&e[0]){let t;for(R=E[6],t=0;t<R.length;t+=1){const S=NI(E,R,t);A[t]?(A[t].p(S,e),X(A[t],1)):(A[t]=iI(S),A[t].c(),X(A[t],1),A[t].m(T.parentNode,T))}for(W(),t=R.length;t<A.length;t+=1)S(t);g()}},i(E){if(!e){for(let E=0;E<R.length;E+=1)X(A[E]);e=!0}},o(E){A=A.filter(Boolean);for(let E=0;E<A.length;E+=1)v(A[E]);e=!1},d(E){N(A,E),E&&O(T)}}}function iI(E){let T,e,R,A,S,N=`#${E[34]+1}: ${E[32].columns.length} col${1===E[32].columns.length?"":"s"} x ${E[32].values.length} row${1===E[32].values.length?"":"s"}`;return A=new ZR({props:{result:E[32]}}),{c(){T=s("p"),e=r(N),R=_(),x(A.$$.fragment)},m(E,O){I(E,T,O),t(T,e),I(E,R,O),$(A,E,O),S=!0},p(E,T){(!S||64&T[0])&&N!==(N=`#${E[34]+1}: ${E[32].columns.length} col${1===E[32].columns.length?"":"s"} x ${E[32].values.length} row${1===E[32].values.length?"":"s"}`)&&a(e,N);const R={};64&T[0]&&(R.result=E[32]),A.$set(R)},i(E){S||(X(A.$$.fragment,E),S=!0)},o(E){v(A.$$.fragment,E),S=!1},d(E){E&&O(T),E&&O(R),w(A,E)}}}function oI(E){let T,e;return{c(){T=s("p"),e=r(E[7]),C(T,"class","editor-error mt-2 svelte-bpuqfp")},m(E,R){I(E,T,R),t(T,e)},p(E,T){128&T[0]&&a(e,E[7])},d(E){E&&O(T)}}}function PI(E){let T,e,R,A,S,N;const r=[rI,sI],n=[];function L(E,T){return null==E[4]?0:1}e=L(E),R=n[e]=r[e](E);return S=new OI({props:{}}),E[27](S),S.$on("setEditor",E[28]),{c(){T=s("div"),R.c(),A=_(),x(S.$$.fragment),C(T,"class","editor svelte-bpuqfp"),C(T,"style",E[0])},m(E,R){I(E,T,R),n[e].m(T,null),t(T,A),$(S,T,null),N=!0},p(E,t){let I=e;e=L(E),e===I?n[e].p(E,t):(W(),v(n[I],1,1,(()=>{n[I]=null})),g(),R=n[e],R?R.p(E,t):(R=n[e]=r[e](E),R.c()),X(R,1),R.m(T,A));S.$set({}),(!N||1&t[0])&&C(T,"style",E[0])},i(E){N||(X(R),X(S.$$.fragment,E),N=!0)},o(E){v(R),v(S.$$.fragment,E),N=!1},d(R){R&&O(T),n[e].d(),E[27](null),w(S)}}}const DI="SELECT * FROM sqlite_master WHERE type='table';",MI=()=>{},UI=()=>{};function lI(E,T,e){let R,A,S,t,I,{style:O}=T,N="SELECT * FROM todo ORDER BY userId, completed DESC, title;",s=[],r="",_="",n=!1,L=!0,C=!0;function a(){try{e(5,N=gR(N,{language:"sqlite",newlineBeforeSemicolon:!0,tabWidth:4,linesBetweenQueries:1,keywordCase:"upper"}))}catch(E){const T="ERROR: SQL format";o(T,`${T}:\n${E}`)}null!=I&&I.setValue(N)}function i(E){if(null==E||""==E)return;e(8,_=""),e(6,s=[]);try{console.log(E),o(`Query: ${E.substring(0,40)}`,E),e(6,s=t.exec(E)),s.length>0&&e(11,C=!0)}catch(E){console.error(E),e(8,_=`${E}`);const T="ERROR: execute query";return void o(T,`${T}:\n${E}`)}let T=`Results: ${s.length}`;for(let E=0;E<s.length;E++){const e=s[E];T+=`\n  #${E+1}. cols ${e.columns.length} x rows ${e.values.length}`}o("Query result",JSON.stringify(s,null,2))}function o(E,T){if(""==T)return;const e=(new Date).toLocaleTimeString();S.addLog({timestamp:Date.now()+Math.random(),title:`${e}: ${E}`,text:T,isOpen:!1})}function P(){I.setValue(DI+"\n"),a(),i(DI),A.scrollIntoView({behavior:"smooth"})}function M(){S.clear()}async function U(){i(N),await h(),A.scrollIntoView({behavior:"smooth"})}D((async()=>{o("Waiting for database...","Waiting for database...");if(!await async function(E,T,e){return await new Promise(((R,A)=>{let S=0;const t=setInterval((()=>{S++,e&&S*T>=e&&(R(!1),clearInterval(t)),E()&&(R(!0),clearInterval(t))}),T)}))}((()=>null!=window.db),100,3e3)){const E="ERROR: failed to initialize database";return e(7,r=`${E}. Try reloading the page.`),void o(E,r)}e(4,t=window.db),o("Database found!","Database found!"),await h(),await async function(){i("CREATE TABLE todo (\n            ID INTEGER PRIMARY KEY AUTOINCREMENT,\n            userId INTEGER,\n            title VARCHAR (255),\n            completed INTEGER (1)\n        )");const E=Qt.object({userId:Qt.number(),id:Qt.number(),title:Qt.string(),completed:Qt.boolean()}).array(),T=await fetch("https://jsonplaceholder.typicode.com/todos"),e=await T.text();if(!T.ok){const E=`ERROR: failed to seed database, status ${T.status}`;return void o(E,`${E}:\n${e}`)}const R=JSON.parse(e),A=E.safeParse(R);if(!A.success){const E=A.error.errors[0],T="ERROR: failed to seed database, JSON error";return void o(T,`${T}:\n${E.path.join(".")}: ${E.message}; ${E.code}`)}const S=A.data;let t="";for(let E=0;E<S.length;E++){const T=S[E];t+=`\n                INSERT INTO todo (ID, userId, title, completed)\n                VALUES (${T.id}, ${T.userId}, '${T.title}', ${T.completed?1:0});\n            `}i(t)}();const E=await I.init();if(E.length>0){const T=`ERROR: ${E}`;return e(8,_=`${T}. Try reloading the page.`),o(T,_),void console.log("show log",T)}e(9,n=!0),a()}));return E.$$set=E=>{"style"in E&&e(0,O=E.style)},[O,R,A,S,t,N,s,r,_,n,L,C,I,a,P,M,U,function(E){l[E?"unshift":"push"]((()=>{R=E,e(1,R)}))},()=>e(10,L=!L),function(E){l[E?"unshift":"push"]((()=>{I=E,e(12,I)}))},function(E){N=E,e(5,N)},()=>U(),()=>a(),()=>P(),()=>M(),function(E){l[E?"unshift":"push"]((()=>{A=E,e(2,A)}))},()=>e(11,C=!C),function(E){l[E?"unshift":"push"]((()=>{S=E,e(3,S)}))},E=>{R.scrollIntoView({behavior:"smooth"}),I.setValue(E.detail),a()}]}class cI extends J{constructor(E){super(),k(this,E,lI,PI,S,{style:0},null,[-1,-1])}}const uI=Qt.enum(["Light","Dark"]);function dI(T){let e,R,A,S,N,_,n=T[0]?"Dark":"Light";return{c(){e=s("div"),R=s("button"),A=r(n),S=r(" mode"),C(R,"class","button is-info"),C(e,"class","toggle svelte-4vc3hf")},m(E,O){I(E,e,O),t(e,R),t(R,A),t(R,S),N||(_=L(R,"click",T[3]),N=!0)},p(E,[T]){1&T&&n!==(n=E[0]?"Dark":"Light")&&a(A,n)},i:E,o:E,d(E){E&&O(e),N=!1,_()}}}function GI(E,T,e){let R,{theme:A=uI.Enum.Dark}=T;function S(){e(2,A=R?uI.Enum.Light:uI.Enum.Dark)}return E.$$set=E=>{"theme"in E&&e(2,A=E.theme)},E.$$.update=()=>{4&E.$$.dirty&&e(0,R=A==uI.Enum.Dark)},[R,S,A,()=>S()]}class pI extends J{constructor(E){super(),k(this,E,GI,dI,S,{theme:2})}}function hI(E){let T,e,R,A,S,N,_,n,L,i,o,P,D,M,U=E[0].ref+"",l=E[0].actor+"";return{c(){T=s("p"),e=r("Version "),R=s("a"),A=s("b"),S=r(U),N=r("."),_=s("a"),n=s("b"),L=r(E[6]),o=r(", deployed by\n                    "),P=s("a"),D=s("b"),M=r(l),C(R,"href",E[4]),C(R,"target","_blank"),C(n,"title",i=E[0].sha),C(_,"href",E[5]),C(_,"target","_blank"),C(P,"href",E[3]),C(P,"target","_blank"),C(T,"class","text-muted text-center")},m(E,O){I(E,T,O),t(T,e),t(T,R),t(R,A),t(A,S),t(T,N),t(T,_),t(_,n),t(n,L),t(T,o),t(T,P),t(P,D),t(D,M)},p(E,T){1&T&&U!==(U=E[0].ref+"")&&a(S,U),16&T&&C(R,"href",E[4]),64&T&&a(L,E[6]),1&T&&i!==(i=E[0].sha)&&C(n,"title",i),32&T&&C(_,"href",E[5]),1&T&&l!==(l=E[0].actor+"")&&a(M,l),8&T&&C(P,"href",E[3])},d(E){E&&O(T)}}}function HI(E){let T,e,R,A,S,N,r,n,L,a,i;function o(T){E[11](T)}let P={};void 0!==E[1]&&(P.theme=E[1]),A=new pI({props:P}),l.push((()=>K(A,"theme",o))),r=new cI({props:{style:E[2]}});let D=null!=E[0]&&hI(E);return{c(){T=s("main"),e=s("h1"),e.textContent="SQL Playground",R=_(),x(A.$$.fragment),N=_(),x(r.$$.fragment),n=_(),L=s("div"),a=s("div"),D&&D.c(),C(e,"class","title svelte-33m3d0"),C(a,"class","container"),C(L,"class","footer svelte-33m3d0"),C(T,"style",E[2]),C(T,"class","svelte-33m3d0")},m(E,S){I(E,T,S),t(T,e),t(T,R),$(A,T,null),t(T,N),$(r,T,null),t(T,n),t(T,L),t(L,a),D&&D.m(a,null),i=!0},p(E,[e]){const R={};!S&&2&e&&(S=!0,R.theme=E[1],m((()=>S=!1))),A.$set(R);const t={};4&e&&(t.style=E[2]),r.$set(t),null!=E[0]?D?D.p(E,e):(D=hI(E),D.c(),D.m(a,null)):D&&(D.d(1),D=null),(!i||4&e)&&C(T,"style",E[2])},i(E){i||(X(A.$$.fragment,E),X(r.$$.fragment,E),i=!0)},o(E){v(A.$$.fragment,E),v(r.$$.fragment,E),i=!1},d(E){E&&O(T),w(A),w(r),D&&D.d()}}}function mI(E,T,e){let R,A,S,t,I;var O,N,s,r;let _=null,n=uI.enum.Dark;return D((()=>{!async function(){const E="build-info.json",T=await fetch(E);if(!T.ok)return void console.info(`Could not fectch ${E}`);const R=await T.json();null==R&&console.error("Invalid build info"),e(0,_=R)}()})),E.$$.update=()=>{129&E.$$.dirty&&e(6,R=null!==e(7,O=null==_?void 0:_.sha.substring(0,7))&&void 0!==O?O:""),257&E.$$.dirty&&e(5,A=`https://github.com/FS-Frost/sql-playground/commit/${null!==e(8,N=null==_?void 0:_.sha)&&void 0!==N?N:""}`),513&E.$$.dirty&&e(4,S=`https://github.com/FS-Frost/sql-playground/tree/${null!==e(9,s=null==_?void 0:_.ref)&&void 0!==s?s:""}`),1025&E.$$.dirty&&e(3,t=`https://github.com/${null!==e(10,r=null==_?void 0:_.actor)&&void 0!==r?r:""}`),2&E.$$.dirty&&e(2,I=Object.entries({"background-color":n==uI.Enum.Dark?"#1e1e1e":"white",color:n==uI.Enum.Dark?"white":"black","label-hover-background-color":uI.Enum.Dark?"gray":""}).map((([E,T])=>`--${E}:${T}`)).join(";"))},[_,n,I,t,S,A,R,O,N,s,r,function(E){n=E,e(1,n)}]}return new class extends J{constructor(E){super(),k(this,E,mI,HI,S,{})}}({target:document.body,props:{}})}();
//# sourceMappingURL=bundle.js.map
