var kR=Object.defineProperty;var ZR=(T,E,e)=>E in T?kR(T,E,{enumerable:!0,configurable:!0,writable:!0,value:e}):T[E]=e;var IE=(T,E,e)=>ZR(T,typeof E!="symbol"?E+"":E,e);import{a as w,t as Q,c as De}from"../chunks/disclose-version.CF0Gxr4Q.js";import"../chunks/legacy.AOlMrSt5.js";import{A as oE,J as ze,Q as ER,M as QR,F as qR,x as jR,R as TR,a5 as zR,a6 as de,D as te,C as Ie,I as aT,N as EA,as as XT,a7 as eR,T as RR,a8 as TA,z as Ge,at as fe,au as eA,av as RA,aw as AA,y as SA,an as tA,Z as pe,ax as Me,E as IA,ay as AR,ab as OA,az as le,aA as NA,B as rA,aB as sA,aC as nA,a3 as _A,aD as aA,p as bE,k as b,m as W,t as NE,g as a,o as $,j as KE,$ as x,ar as Z,i as YE,aq as he,f as TT,aE as CA,aF as LA}from"../chunks/runtime.Bd2CgyBA.js";import{p as JE,i as iE,b as AT,a as q}from"../chunks/props.CDM2_9of.js";import{i as iA}from"../chunks/lifecycle.CUiJjBYj.js";import{o as FT}from"../chunks/index-client.ChAZXFH2.js";import{w as SR}from"../chunks/index.CRlYUXoq.js";import{s as nE,d as Ee,a as oA}from"../chunks/render.B3gIhLZT.js";function PA(T){oE&&ze(T)!==null&&ER(T)}function bT(T,E){return E}function DA(T,E,e,R){for(var A=[],S=E.length,t=0;t<S;t++)eA(E[t].e,A,!0);var O=S>0&&A.length===0&&e!==null;if(O){var r=e.parentNode;ER(r),r.append(e),R.clear(),BE(T,E[0].prev,E[S-1].next)}RA(A,()=>{for(var I=0;I<S;I++){var N=E[I];O||(R.delete(N.k),BE(T,N.prev,N.next)),AA(N.e,!O)}})}function DT(T,E,e,R,A,S=null){var t=T,O={flags:E,items:new Map,first:null},r=(E&AR)!==0;if(r){var I=T;t=oE?te(ze(I)):I.appendChild(IA())}oE&&QR();var N=null,n=!1;qR(()=>{var L=e(),i=jR(L)?L:L==null?[]:TR(L),o=i.length;if(n&&o===0)return;n=o===0;let d=!1;if(oE){var B=t.data===zR;B!==(o===0)&&(t=de(),te(t),Ie(!1),d=!0)}if(oE){for(var h=null,u,U=0;U<o;U++){if(aT.nodeType===8&&aT.data===EA){t=aT,d=!0,Ie(!1);break}var K=i[U],p=R(K,U);u=tR(aT,O,h,null,K,p,U,A,E),O.items.set(p,u),h=u}o>0&&te(de())}if(!oE){var y=SA;MA(i,O,t,A,E,(y.f&XT)!==0,R)}S!==null&&(o===0?N?eR(N):N=RR(()=>S(t)):N!==null&&TA(N,()=>{N=null})),d&&Ie(!0),e()}),oE&&(t=aT)}function MA(T,E,e,R,A,S,t,O){var rE,sE,GE,HE;var r=(A&sA)!==0,I=(A&(le|Me))!==0,N=T.length,n=E.items,L=E.first,i=L,o,d=null,B,h=[],u=[],U,K,p,y;if(r)for(y=0;y<N;y+=1)U=T[y],K=t(U,y),p=n.get(K),p!==void 0&&((rE=p.a)==null||rE.measure(),(B??(B=new Set)).add(p));for(y=0;y<N;y+=1){if(U=T[y],K=t(U,y),p=n.get(K),p===void 0){var dE=i?i.e.nodes_start:e;d=tR(dE,E,d,d===null?E.first:d.next,U,K,y,R,A),n.set(K,d),h=[],u=[],i=d.next;continue}if(I&&lA(p,U,y,A),p.e.f&XT&&(eR(p.e),r&&((sE=p.a)==null||sE.unfix(),(B??(B=new Set)).delete(p))),p!==i){if(o!==void 0&&o.has(p)){if(h.length<u.length){var CE=u[0],tE;d=CE.prev;var zE=h[0],Y=h[h.length-1];for(tE=0;tE<h.length;tE+=1)He(h[tE],CE,e);for(tE=0;tE<u.length;tE+=1)o.delete(u[tE]);BE(E,zE.prev,Y.next),BE(E,d,zE),BE(E,Y,CE),i=CE,d=Y,y-=1,h=[],u=[]}else o.delete(p),He(p,i,e),BE(E,p.prev,p.next),BE(E,p,d===null?E.first:d.next),BE(E,d,p),d=p;continue}for(h=[],u=[];i!==null&&i.k!==K;)(S||!(i.e.f&XT))&&(o??(o=new Set)).add(i),u.push(i),i=i.next;if(i===null)continue;p=i}h.push(p),d=p,i=p.next}if(i!==null||o!==void 0){for(var g=o===void 0?[]:TR(o);i!==null;)(S||!(i.e.f&XT))&&g.push(i),i=i.next;var V=g.length;if(V>0){var j=A&AR&&N===0?e:null;if(r){for(y=0;y<V;y+=1)(GE=g[y].a)==null||GE.measure();for(y=0;y<V;y+=1)(HE=g[y].a)==null||HE.fix()}DA(E,g,j,n)}}r&&OA(()=>{var AE;if(B!==void 0)for(p of B)(AE=p.a)==null||AE.apply()}),Ge.first=E.first&&E.first.e,Ge.last=d&&d.e}function lA(T,E,e,R){R&le&&fe(T.v,E),R&Me?fe(T.i,e):T.i=e}function tR(T,E,e,R,A,S,t,O,r,I){var N=(r&le)!==0,n=(r&NA)===0,L=N?n?tA(A):pe(A):A,i=r&Me?pe(t):t,o={i,v:L,k:S,a:null,e:null,prev:e,next:R};try{return o.e=RR(()=>O(T,L,i),oE),o.e.prev=e&&e.e,o.e.next=R&&R.e,e===null?E.first=o:(e.next=o,e.e.next=o.e),R!==null&&(R.prev=o,R.e.prev=o.e),o}finally{}}function He(T,E,e){for(var R=T.next?T.next.e.nodes_start:e,A=E?E.e.nodes_start:e,S=T.e.nodes_start;S!==R;){var t=rA(S);A.before(S),S=t}}function BE(T,E,e){E===null?T.first=e:(E.next=e,E.e.next=e&&e.e),e!==null&&(e.prev=E,e.e.prev=E&&E.e)}function IR(T){var E,e,R="";if(typeof T=="string"||typeof T=="number")R+=T;else if(typeof T=="object")if(Array.isArray(T)){var A=T.length;for(E=0;E<A;E++)T[E]&&(e=IR(T[E]))&&(R&&(R+=" "),R+=e)}else for(e in T)T[e]&&(R&&(R+=" "),R+=e);return R}function UA(){for(var T,E,e=0,R="",A=arguments.length;e<A;e++)(T=arguments[e])&&(E=IR(T))&&(R&&(R+=" "),R+=E);return R}function cA(T){return typeof T=="object"?UA(T):T??""}function uA(T,E){var e=T.__attributes??(T.__attributes={});e.value===(e.value=E??void 0)||T.value===E&&(E!==0||T.nodeName!=="PROGRESS")||(T.value=E)}function $E(T,E,e,R){var A=T.__attributes??(T.__attributes={});oE&&(A[E]=T.getAttribute(E),E==="src"||E==="srcset"||E==="href"&&T.nodeName==="LINK")||A[E]!==(A[E]=e)&&(E==="style"&&"__styles"in T&&(T.__styles={}),E==="loading"&&(T[nA]=e),e==null?T.removeAttribute(E):typeof e!="string"&&dA(T).includes(E)?T[E]=e:T.setAttribute(E,e))}var me=new Map;function dA(T){var E=me.get(T.nodeName);if(E)return E;me.set(T.nodeName,E=[]);for(var e,R=T,A=Element.prototype;A!==R;){e=aA(R);for(var S in e)e[S].set&&E.push(S);R=_A(R)}return E}function GA(T,E,e){var R=T.__className,A=fA(E,e);oE&&T.className===A?T.__className=A:(R!==A||oE&&T.className!==A)&&(T.className=A,T.__className=A)}function fA(T,E){return(T??"")+(" "+E)}const pA=!0,Es=Object.freeze(Object.defineProperty({__proto__:null,prerender:pA},Symbol.toStringTag,{value:"Module"})),hA=["home"],HA=hA.map(T=>T.toString()),Be=SR();function mA(T){return HA.includes(T)}async function BA(T,E,e){return await new Promise((R,A)=>{let S=0;const t=setInterval(()=>{S++,S*E>=e&&(R(!1),clearInterval(t)),T()&&(R(!0),clearInterval(t))},E)})}function Ye(T){return T.indentStyle==="tabularLeft"||T.indentStyle==="tabularRight"?" ".repeat(10):T.useTabs?"	":" ".repeat(T.tabWidth)}function ET(T){return T.indentStyle==="tabularLeft"||T.indentStyle==="tabularRight"}class YA{constructor(E){this.params=E,this.index=0}get({key:E,text:e}){return this.params?E?this.params[E]:this.params[this.index++]:e}getPositionalParameterIndex(){return this.index}setPositionalParameterIndex(E){this.index=E}}var FA=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function VA(T){return T&&T.__esModule&&Object.prototype.hasOwnProperty.call(T,"default")?T.default:T}var NR={exports:{}};(function(T){(function(E,e){T.exports?T.exports=e():E.nearley=e()})(FA,function(){function E(I,N,n){return this.id=++E.highestId,this.name=I,this.symbols=N,this.postprocess=n,this}E.highestId=0,E.prototype.toString=function(I){var N=typeof I>"u"?this.symbols.map(r).join(" "):this.symbols.slice(0,I).map(r).join(" ")+" ● "+this.symbols.slice(I).map(r).join(" ");return this.name+" → "+N};function e(I,N,n,L){this.rule=I,this.dot=N,this.reference=n,this.data=[],this.wantedBy=L,this.isComplete=this.dot===I.symbols.length}e.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},e.prototype.nextState=function(I){var N=new e(this.rule,this.dot+1,this.reference,this.wantedBy);return N.left=this,N.right=I,N.isComplete&&(N.data=N.build(),N.right=void 0),N},e.prototype.build=function(){var I=[],N=this;do I.push(N.right.data),N=N.left;while(N.left);return I.reverse(),I},e.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,t.fail))};function R(I,N){this.grammar=I,this.index=N,this.states=[],this.wants={},this.scannable=[],this.completed={}}R.prototype.process=function(I){for(var N=this.states,n=this.wants,L=this.completed,i=0;i<N.length;i++){var o=N[i];if(o.isComplete){if(o.finish(),o.data!==t.fail){for(var d=o.wantedBy,B=d.length;B--;){var h=d[B];this.complete(h,o)}if(o.reference===this.index){var u=o.rule.name;(this.completed[u]=this.completed[u]||[]).push(o)}}}else{var u=o.rule.symbols[o.dot];if(typeof u!="string"){this.scannable.push(o);continue}if(n[u]){if(n[u].push(o),L.hasOwnProperty(u))for(var U=L[u],B=0;B<U.length;B++){var K=U[B];this.complete(o,K)}}else n[u]=[o],this.predict(u)}}},R.prototype.predict=function(I){for(var N=this.grammar.byName[I]||[],n=0;n<N.length;n++){var L=N[n],i=this.wants[I],o=new e(L,0,this.index,i);this.states.push(o)}},R.prototype.complete=function(I,N){var n=I.nextState(N);this.states.push(n)};function A(I,N){this.rules=I,this.start=N||this.rules[0].name;var n=this.byName={};this.rules.forEach(function(L){n.hasOwnProperty(L.name)||(n[L.name]=[]),n[L.name].push(L)})}A.fromCompiled=function(L,N){var n=L.Lexer;L.ParserStart&&(N=L.ParserStart,L=L.ParserRules);var L=L.map(function(o){return new E(o.name,o.symbols,o.postprocess)}),i=new A(L,N);return i.lexer=n,i};function S(){this.reset("")}S.prototype.reset=function(I,N){this.buffer=I,this.index=0,this.line=N?N.line:1,this.lastLineBreak=N?-N.col:0},S.prototype.next=function(){if(this.index<this.buffer.length){var I=this.buffer[this.index++];return I===`
`&&(this.line+=1,this.lastLineBreak=this.index),{value:I}}},S.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},S.prototype.formatError=function(I,N){var n=this.buffer;if(typeof n=="string"){var L=n.split(`
`).slice(Math.max(0,this.line-5),this.line),i=n.indexOf(`
`,this.index);i===-1&&(i=n.length);var o=this.index-this.lastLineBreak,d=String(this.line).length;return N+=" at line "+this.line+" col "+o+`:

`,N+=L.map(function(h,u){return B(this.line-L.length+u+1,d)+" "+h},this).join(`
`),N+=`
`+B("",d+o)+`^
`,N}else return N+" at index "+(this.index-1);function B(h,u){var U=String(h);return Array(u-U.length+1).join(" ")+U}};function t(I,N,n){if(I instanceof A)var L=I,n=N;else var L=A.fromCompiled(I,N);this.grammar=L,this.options={keepHistory:!1,lexer:L.lexer||new S};for(var i in n||{})this.options[i]=n[i];this.lexer=this.options.lexer,this.lexerState=void 0;var o=new R(L,0);this.table=[o],o.wants[L.start]=[],o.predict(L.start),o.process(),this.current=0}t.fail={},t.prototype.feed=function(I){var N=this.lexer;N.reset(I,this.lexerState);for(var n;;){try{if(n=N.next(),!n)break}catch(dE){var d=new R(this.grammar,this.current+1);this.table.push(d);var L=new Error(this.reportLexerError(dE));throw L.offset=this.current,L.token=dE.token,L}var i=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var o=this.current+1,d=new R(this.grammar,o);this.table.push(d);for(var B=n.text!==void 0?n.text:n.value,h=N.constructor===S?n.value:n,u=i.scannable,U=u.length;U--;){var K=u[U],p=K.rule.symbols[K.dot];if(p.test?p.test(h):p.type?p.type===n.type:p.literal===B){var y=K.nextState({data:h,token:n,isToken:!0,reference:o-1});d.states.push(y)}}if(d.process(),d.states.length===0){var L=new Error(this.reportError(n));throw L.offset=this.current,L.token=n,L}this.options.keepHistory&&(i.lexerState=N.save()),this.current++}return i&&(this.lexerState=N.save()),this.results=this.finish(),this},t.prototype.reportLexerError=function(I){var N,n,L=I.token;return L?(N="input "+JSON.stringify(L.text[0])+" (lexer error)",n=this.lexer.formatError(L,"Syntax error")):(N="input (lexer error)",n=I.message),this.reportErrorCommon(n,N)},t.prototype.reportError=function(I){var N=(I.type?I.type+" token: ":"")+JSON.stringify(I.value!==void 0?I.value:I),n=this.lexer.formatError(I,"Syntax error");return this.reportErrorCommon(n,N)},t.prototype.reportErrorCommon=function(I,N){var n=[];n.push(I);var L=this.table.length-2,i=this.table[L],o=i.states.filter(function(B){var h=B.rule.symbols[B.dot];return h&&typeof h!="string"});if(o.length===0)n.push("Unexpected "+N+`. I did not expect any more input. Here is the state of my parse table:
`),this.displayStateStack(i.states,n);else{n.push("Unexpected "+N+`. Instead, I was expecting to see one of the following:
`);var d=o.map(function(B){return this.buildFirstStateStack(B,[])||[B]},this);d.forEach(function(B){var h=B[0],u=h.rule.symbols[h.dot],U=this.getSymbolDisplay(u);n.push("A "+U+" based on:"),this.displayStateStack(B,n)},this)}return n.push(""),n.join(`
`)},t.prototype.displayStateStack=function(I,N){for(var n,L=0,i=0;i<I.length;i++){var o=I[i],d=o.rule.toString(o.dot);d===n?L++:(L>0&&N.push("    ^ "+L+" more lines identical to this"),L=0,N.push("    "+d)),n=d}},t.prototype.getSymbolDisplay=function(I){return O(I)},t.prototype.buildFirstStateStack=function(I,N){if(N.indexOf(I)!==-1)return null;if(I.wantedBy.length===0)return[I];var n=I.wantedBy[0],L=[I].concat(N),i=this.buildFirstStateStack(n,L);return i===null?null:[I].concat(i)},t.prototype.save=function(){var I=this.table[this.current];return I.lexerState=this.lexerState,I},t.prototype.restore=function(I){var N=I.index;this.current=N,this.table[N]=I,this.table.splice(N+1),this.lexerState=I.lexerState,this.results=this.finish()},t.prototype.rewind=function(I){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[I])},t.prototype.finish=function(){var I=[],N=this.grammar.start,n=this.table[this.table.length-1];return n.states.forEach(function(L){L.rule.name===N&&L.dot===L.rule.symbols.length&&L.reference===0&&L.data!==t.fail&&I.push(L)}),I.map(function(L){return L.data})};function O(I){var N=typeof I;if(N==="string")return I;if(N==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return"character matching "+I;if(I.type)return I.type+" token";if(I.test)return"token matching "+String(I.test);throw new Error("Unknown symbol type: "+I)}}function r(I){var N=typeof I;if(N==="string")return I;if(N==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return I.toString();if(I.type)return"%"+I.type;if(I.test)return"<"+String(I.test)+">";throw new Error("Unknown symbol type: "+I)}}return{Parser:t,Grammar:A,Rule:E}})})(NR);var yA=NR.exports;const WA=VA(yA);let _;(function(T){T.QUOTED_IDENTIFIER="QUOTED_IDENTIFIER",T.IDENTIFIER="IDENTIFIER",T.STRING="STRING",T.VARIABLE="VARIABLE",T.RESERVED_KEYWORD="RESERVED_KEYWORD",T.RESERVED_FUNCTION_NAME="RESERVED_FUNCTION_NAME",T.RESERVED_PHRASE="RESERVED_PHRASE",T.RESERVED_SET_OPERATION="RESERVED_SET_OPERATION",T.RESERVED_CLAUSE="RESERVED_CLAUSE",T.RESERVED_SELECT="RESERVED_SELECT",T.RESERVED_JOIN="RESERVED_JOIN",T.ARRAY_IDENTIFIER="ARRAY_IDENTIFIER",T.ARRAY_KEYWORD="ARRAY_KEYWORD",T.CASE="CASE",T.END="END",T.WHEN="WHEN",T.ELSE="ELSE",T.THEN="THEN",T.LIMIT="LIMIT",T.BETWEEN="BETWEEN",T.AND="AND",T.OR="OR",T.XOR="XOR",T.OPERATOR="OPERATOR",T.COMMA="COMMA",T.ASTERISK="ASTERISK",T.DOT="DOT",T.OPEN_PAREN="OPEN_PAREN",T.CLOSE_PAREN="CLOSE_PAREN",T.LINE_COMMENT="LINE_COMMENT",T.BLOCK_COMMENT="BLOCK_COMMENT",T.NUMBER="NUMBER",T.NAMED_PARAMETER="NAMED_PARAMETER",T.QUOTED_PARAMETER="QUOTED_PARAMETER",T.NUMBERED_PARAMETER="NUMBERED_PARAMETER",T.POSITIONAL_PARAMETER="POSITIONAL_PARAMETER",T.DELIMITER="DELIMITER",T.EOF="EOF"})(_||(_={}));const rR=T=>({type:_.EOF,raw:"«EOF»",text:"«EOF»",start:T}),ZE=rR(1/0),CT=T=>E=>E.type===T.type&&E.text===T.text,yE={ARRAY:CT({text:"ARRAY",type:_.RESERVED_KEYWORD}),BY:CT({text:"BY",type:_.RESERVED_KEYWORD}),SET:CT({text:"SET",type:_.RESERVED_CLAUSE}),STRUCT:CT({text:"STRUCT",type:_.RESERVED_KEYWORD}),WINDOW:CT({text:"WINDOW",type:_.RESERVED_CLAUSE})},sR=T=>T===_.RESERVED_KEYWORD||T===_.RESERVED_FUNCTION_NAME||T===_.RESERVED_PHRASE||T===_.RESERVED_CLAUSE||T===_.RESERVED_SELECT||T===_.RESERVED_SET_OPERATION||T===_.RESERVED_JOIN||T===_.ARRAY_KEYWORD||T===_.CASE||T===_.END||T===_.WHEN||T===_.ELSE||T===_.THEN||T===_.LIMIT||T===_.BETWEEN||T===_.AND||T===_.OR||T===_.XOR,vA=T=>T===_.AND||T===_.OR||T===_.XOR;function gA(T){return T.map(XA).map(bA).map(KA).map(xA)}const XA=(T,E,e)=>{if(sR(T.type)){const R=wA(e,E);if(R&&R.text===".")return{...T,type:_.IDENTIFIER,text:T.raw}}return T},bA=(T,E,e)=>{if(T.type===_.RESERVED_FUNCTION_NAME){const R=Te(e,E);if(!R||!$A(R))return{...T,type:_.RESERVED_KEYWORD}}return T},KA=(T,E,e)=>{if(T.type===_.IDENTIFIER){const R=Te(e,E);if(R&&nR(R))return{...T,type:_.ARRAY_IDENTIFIER}}return T},xA=(T,E,e)=>{if(T.type===_.RESERVED_KEYWORD){const R=Te(e,E);if(R&&nR(R))return{...T,type:_.ARRAY_KEYWORD}}return T},wA=(T,E)=>Te(T,E,-1),Te=(T,E,e=1)=>{let R=1;for(;T[E+R*e]&&JA(T[E+R*e]);)R++;return T[E+R*e]},$A=T=>T.type===_.OPEN_PAREN&&T.text==="(",nR=T=>T.type===_.OPEN_PAREN&&T.text==="[",JA=T=>T.type===_.BLOCK_COMMENT||T.type===_.LINE_COMMENT;function _R(T,E){const e=T.slice(0,E).split(/\n/);return{line:e.length,col:e[e.length-1].length+1}}class aR{constructor(E){IE(this,"index",0);IE(this,"tokens",[]);IE(this,"input","");this.tokenize=E}reset(E,e){this.input=E,this.index=0,this.tokens=this.tokenize(E)}next(){return this.tokens[this.index++]}save(){}formatError(E){const{line:e,col:R}=_R(this.input,E.start);return`Parse error at token: ${E.text} at line ${e} column ${R}`}has(E){return E in _}}let c;(function(T){T.statement="statement",T.clause="clause",T.set_operation="set_operation",T.function_call="function_call",T.array_subscript="array_subscript",T.property_access="property_access",T.parenthesis="parenthesis",T.between_predicate="between_predicate",T.case_expression="case_expression",T.case_when="case_when",T.case_else="case_else",T.limit_clause="limit_clause",T.all_columns_asterisk="all_columns_asterisk",T.literal="literal",T.identifier="identifier",T.keyword="keyword",T.parameter="parameter",T.operator="operator",T.comma="comma",T.line_comment="line_comment",T.block_comment="block_comment"})(c||(c={}));function Oe(T){return T[0]}const H=new aR(T=>[]),LT=([[T]])=>T,z=T=>({type:c.keyword,tokenType:T.type,text:T.text,raw:T.raw}),OE=(T,{leading:E,trailing:e})=>(E!=null&&E.length&&(T={...T,leadingComments:E}),e!=null&&e.length&&(T={...T,trailingComments:e}),T),kA={Lexer:H,ParserRules:[{name:"main$ebnf$1",symbols:[]},{name:"main$ebnf$1",symbols:["main$ebnf$1","statement"],postprocess:T=>T[0].concat([T[1]])},{name:"main",symbols:["main$ebnf$1"],postprocess:([T])=>{const E=T[T.length-1];return E&&!E.hasSemicolon?E.children.length>0?T:T.slice(0,-1):T}},{name:"statement$subexpression$1",symbols:[H.has("DELIMITER")?{type:"DELIMITER"}:DELIMITER]},{name:"statement$subexpression$1",symbols:[H.has("EOF")?{type:"EOF"}:EOF]},{name:"statement",symbols:["expressions_or_clauses","statement$subexpression$1"],postprocess:([T,[E]])=>({type:c.statement,children:T,hasSemicolon:E.type===_.DELIMITER})},{name:"expressions_or_clauses$ebnf$1",symbols:[]},{name:"expressions_or_clauses$ebnf$1",symbols:["expressions_or_clauses$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"expressions_or_clauses$ebnf$2",symbols:[]},{name:"expressions_or_clauses$ebnf$2",symbols:["expressions_or_clauses$ebnf$2","clause"],postprocess:T=>T[0].concat([T[1]])},{name:"expressions_or_clauses",symbols:["expressions_or_clauses$ebnf$1","expressions_or_clauses$ebnf$2"],postprocess:([T,E])=>[...T,...E]},{name:"clause$subexpression$1",symbols:["limit_clause"]},{name:"clause$subexpression$1",symbols:["select_clause"]},{name:"clause$subexpression$1",symbols:["other_clause"]},{name:"clause$subexpression$1",symbols:["set_operation"]},{name:"clause",symbols:["clause$subexpression$1"],postprocess:LT},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["free_form_sql"]},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"limit_clause$ebnf$1$subexpression$1",symbols:[H.has("COMMA")?{type:"COMMA"}:COMMA,"limit_clause$ebnf$1$subexpression$1$ebnf$1"]},{name:"limit_clause$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1"],postprocess:Oe},{name:"limit_clause$ebnf$1",symbols:[],postprocess:()=>null},{name:"limit_clause",symbols:[H.has("LIMIT")?{type:"LIMIT"}:LIMIT,"_","expression_chain_","limit_clause$ebnf$1"],postprocess:([T,E,e,R])=>{if(R){const[A,S]=R;return{type:c.limit_clause,limitKw:OE(z(T),{trailing:E}),offset:e,count:S}}else return{type:c.limit_clause,limitKw:OE(z(T),{trailing:E}),count:e}}},{name:"select_clause$subexpression$1$ebnf$1",symbols:[]},{name:"select_clause$subexpression$1$ebnf$1",symbols:["select_clause$subexpression$1$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"select_clause$subexpression$1",symbols:["all_columns_asterisk","select_clause$subexpression$1$ebnf$1"]},{name:"select_clause$subexpression$1$ebnf$2",symbols:[]},{name:"select_clause$subexpression$1$ebnf$2",symbols:["select_clause$subexpression$1$ebnf$2","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"select_clause$subexpression$1",symbols:["asteriskless_free_form_sql","select_clause$subexpression$1$ebnf$2"]},{name:"select_clause",symbols:[H.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT,"select_clause$subexpression$1"],postprocess:([T,[E,e]])=>({type:c.clause,nameKw:z(T),children:[E,...e]})},{name:"select_clause",symbols:[H.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT],postprocess:([T])=>({type:c.clause,nameKw:z(T),children:[]})},{name:"all_columns_asterisk",symbols:[H.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK],postprocess:()=>({type:c.all_columns_asterisk})},{name:"other_clause$ebnf$1",symbols:[]},{name:"other_clause$ebnf$1",symbols:["other_clause$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"other_clause",symbols:[H.has("RESERVED_CLAUSE")?{type:"RESERVED_CLAUSE"}:RESERVED_CLAUSE,"other_clause$ebnf$1"],postprocess:([T,E])=>({type:c.clause,nameKw:z(T),children:E})},{name:"set_operation$ebnf$1",symbols:[]},{name:"set_operation$ebnf$1",symbols:["set_operation$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"set_operation",symbols:[H.has("RESERVED_SET_OPERATION")?{type:"RESERVED_SET_OPERATION"}:RESERVED_SET_OPERATION,"set_operation$ebnf$1"],postprocess:([T,E])=>({type:c.set_operation,nameKw:z(T),children:E})},{name:"expression_chain_$ebnf$1",symbols:["expression_with_comments_"]},{name:"expression_chain_$ebnf$1",symbols:["expression_chain_$ebnf$1","expression_with_comments_"],postprocess:T=>T[0].concat([T[1]])},{name:"expression_chain_",symbols:["expression_chain_$ebnf$1"],postprocess:Oe},{name:"expression_with_comments_",symbols:["expression","_"],postprocess:([T,E])=>OE(T,{trailing:E})},{name:"free_form_sql$subexpression$1",symbols:["asteriskless_free_form_sql"]},{name:"free_form_sql$subexpression$1",symbols:["asterisk"]},{name:"free_form_sql",symbols:["free_form_sql$subexpression$1"],postprocess:LT},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["asteriskless_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["between_predicate"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["case_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comma"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comment"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["other_keyword"]},{name:"asteriskless_free_form_sql",symbols:["asteriskless_free_form_sql$subexpression$1"],postprocess:LT},{name:"expression$subexpression$1",symbols:["asteriskless_expression"]},{name:"expression$subexpression$1",symbols:["asterisk"]},{name:"expression",symbols:["expression$subexpression$1"],postprocess:LT},{name:"asteriskless_expression$subexpression$1",symbols:["array_subscript"]},{name:"asteriskless_expression$subexpression$1",symbols:["function_call"]},{name:"asteriskless_expression$subexpression$1",symbols:["property_access"]},{name:"asteriskless_expression$subexpression$1",symbols:["parenthesis"]},{name:"asteriskless_expression$subexpression$1",symbols:["curly_braces"]},{name:"asteriskless_expression$subexpression$1",symbols:["square_brackets"]},{name:"asteriskless_expression$subexpression$1",symbols:["operator"]},{name:"asteriskless_expression$subexpression$1",symbols:["identifier"]},{name:"asteriskless_expression$subexpression$1",symbols:["parameter"]},{name:"asteriskless_expression$subexpression$1",symbols:["literal"]},{name:"asteriskless_expression$subexpression$1",symbols:["keyword"]},{name:"asteriskless_expression",symbols:["asteriskless_expression$subexpression$1"],postprocess:LT},{name:"array_subscript",symbols:[H.has("ARRAY_IDENTIFIER")?{type:"ARRAY_IDENTIFIER"}:ARRAY_IDENTIFIER,"_","square_brackets"],postprocess:([T,E,e])=>({type:c.array_subscript,array:OE({type:c.identifier,text:T.text},{trailing:E}),parenthesis:e})},{name:"array_subscript",symbols:[H.has("ARRAY_KEYWORD")?{type:"ARRAY_KEYWORD"}:ARRAY_KEYWORD,"_","square_brackets"],postprocess:([T,E,e])=>({type:c.array_subscript,array:OE(z(T),{trailing:E}),parenthesis:e})},{name:"function_call",symbols:[H.has("RESERVED_FUNCTION_NAME")?{type:"RESERVED_FUNCTION_NAME"}:RESERVED_FUNCTION_NAME,"_","parenthesis"],postprocess:([T,E,e])=>({type:c.function_call,nameKw:OE(z(T),{trailing:E}),parenthesis:e})},{name:"parenthesis",symbols:[{literal:"("},"expressions_or_clauses",{literal:")"}],postprocess:([T,E,e])=>({type:c.parenthesis,children:E,openParen:"(",closeParen:")"})},{name:"curly_braces$ebnf$1",symbols:[]},{name:"curly_braces$ebnf$1",symbols:["curly_braces$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"curly_braces",symbols:[{literal:"{"},"curly_braces$ebnf$1",{literal:"}"}],postprocess:([T,E,e])=>({type:c.parenthesis,children:E,openParen:"{",closeParen:"}"})},{name:"square_brackets$ebnf$1",symbols:[]},{name:"square_brackets$ebnf$1",symbols:["square_brackets$ebnf$1","free_form_sql"],postprocess:T=>T[0].concat([T[1]])},{name:"square_brackets",symbols:[{literal:"["},"square_brackets$ebnf$1",{literal:"]"}],postprocess:([T,E,e])=>({type:c.parenthesis,children:E,openParen:"[",closeParen:"]"})},{name:"property_access$subexpression$1",symbols:["identifier"]},{name:"property_access$subexpression$1",symbols:["array_subscript"]},{name:"property_access$subexpression$1",symbols:["all_columns_asterisk"]},{name:"property_access",symbols:["expression","_",H.has("DOT")?{type:"DOT"}:DOT,"_","property_access$subexpression$1"],postprocess:([T,E,e,R,[A]])=>({type:c.property_access,object:OE(T,{trailing:E}),property:OE(A,{leading:R})})},{name:"between_predicate",symbols:[H.has("BETWEEN")?{type:"BETWEEN"}:BETWEEN,"_","expression","_",H.has("AND")?{type:"AND"}:AND,"_","expression"],postprocess:([T,E,e,R,A,S,t])=>({type:c.between_predicate,betweenKw:z(T),expr1:[OE(e,{leading:E,trailing:R})],andKw:z(A),expr2:[OE(t,{leading:S})]})},{name:"case_expression$ebnf$1",symbols:["expression_chain_"],postprocess:Oe},{name:"case_expression$ebnf$1",symbols:[],postprocess:()=>null},{name:"case_expression$ebnf$2",symbols:[]},{name:"case_expression$ebnf$2",symbols:["case_expression$ebnf$2","case_clause"],postprocess:T=>T[0].concat([T[1]])},{name:"case_expression",symbols:[H.has("CASE")?{type:"CASE"}:CASE,"_","case_expression$ebnf$1","case_expression$ebnf$2",H.has("END")?{type:"END"}:END],postprocess:([T,E,e,R,A])=>({type:c.case_expression,caseKw:OE(z(T),{trailing:E}),endKw:z(A),expr:e||[],clauses:R})},{name:"case_clause",symbols:[H.has("WHEN")?{type:"WHEN"}:WHEN,"_","expression_chain_",H.has("THEN")?{type:"THEN"}:THEN,"_","expression_chain_"],postprocess:([T,E,e,R,A,S])=>({type:c.case_when,whenKw:OE(z(T),{trailing:E}),thenKw:OE(z(R),{trailing:A}),condition:e,result:S})},{name:"case_clause",symbols:[H.has("ELSE")?{type:"ELSE"}:ELSE,"_","expression_chain_"],postprocess:([T,E,e])=>({type:c.case_else,elseKw:OE(z(T),{trailing:E}),result:e})},{name:"comma$subexpression$1",symbols:[H.has("COMMA")?{type:"COMMA"}:COMMA]},{name:"comma",symbols:["comma$subexpression$1"],postprocess:([[T]])=>({type:c.comma})},{name:"asterisk$subexpression$1",symbols:[H.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK]},{name:"asterisk",symbols:["asterisk$subexpression$1"],postprocess:([[T]])=>({type:c.operator,text:T.text})},{name:"operator$subexpression$1",symbols:[H.has("OPERATOR")?{type:"OPERATOR"}:OPERATOR]},{name:"operator",symbols:["operator$subexpression$1"],postprocess:([[T]])=>({type:c.operator,text:T.text})},{name:"identifier$subexpression$1",symbols:[H.has("IDENTIFIER")?{type:"IDENTIFIER"}:IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[H.has("QUOTED_IDENTIFIER")?{type:"QUOTED_IDENTIFIER"}:QUOTED_IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[H.has("VARIABLE")?{type:"VARIABLE"}:VARIABLE]},{name:"identifier",symbols:["identifier$subexpression$1"],postprocess:([[T]])=>({type:c.identifier,text:T.text})},{name:"parameter$subexpression$1",symbols:[H.has("NAMED_PARAMETER")?{type:"NAMED_PARAMETER"}:NAMED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[H.has("QUOTED_PARAMETER")?{type:"QUOTED_PARAMETER"}:QUOTED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[H.has("NUMBERED_PARAMETER")?{type:"NUMBERED_PARAMETER"}:NUMBERED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[H.has("POSITIONAL_PARAMETER")?{type:"POSITIONAL_PARAMETER"}:POSITIONAL_PARAMETER]},{name:"parameter",symbols:["parameter$subexpression$1"],postprocess:([[T]])=>({type:c.parameter,key:T.key,text:T.text})},{name:"literal$subexpression$1",symbols:[H.has("NUMBER")?{type:"NUMBER"}:NUMBER]},{name:"literal$subexpression$1",symbols:[H.has("STRING")?{type:"STRING"}:STRING]},{name:"literal",symbols:["literal$subexpression$1"],postprocess:([[T]])=>({type:c.literal,text:T.text})},{name:"keyword$subexpression$1",symbols:[H.has("RESERVED_KEYWORD")?{type:"RESERVED_KEYWORD"}:RESERVED_KEYWORD]},{name:"keyword$subexpression$1",symbols:[H.has("RESERVED_PHRASE")?{type:"RESERVED_PHRASE"}:RESERVED_PHRASE]},{name:"keyword$subexpression$1",symbols:[H.has("RESERVED_JOIN")?{type:"RESERVED_JOIN"}:RESERVED_JOIN]},{name:"keyword$subexpression$1",symbols:[H.has("AND")?{type:"AND"}:AND]},{name:"keyword$subexpression$1",symbols:[H.has("OR")?{type:"OR"}:OR]},{name:"keyword$subexpression$1",symbols:[H.has("XOR")?{type:"XOR"}:XOR]},{name:"keyword",symbols:["keyword$subexpression$1"],postprocess:([[T]])=>z(T)},{name:"other_keyword$subexpression$1",symbols:[H.has("WHEN")?{type:"WHEN"}:WHEN]},{name:"other_keyword$subexpression$1",symbols:[H.has("THEN")?{type:"THEN"}:THEN]},{name:"other_keyword$subexpression$1",symbols:[H.has("ELSE")?{type:"ELSE"}:ELSE]},{name:"other_keyword$subexpression$1",symbols:[H.has("END")?{type:"END"}:END]},{name:"other_keyword",symbols:["other_keyword$subexpression$1"],postprocess:([[T]])=>z(T)},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1","comment"],postprocess:T=>T[0].concat([T[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:([T])=>T},{name:"comment",symbols:[H.has("LINE_COMMENT")?{type:"LINE_COMMENT"}:LINE_COMMENT],postprocess:([T])=>({type:c.line_comment,text:T.text,precedingWhitespace:T.precedingWhitespace})},{name:"comment",symbols:[H.has("BLOCK_COMMENT")?{type:"BLOCK_COMMENT"}:BLOCK_COMMENT],postprocess:([T])=>({type:c.block_comment,text:T.text,precedingWhitespace:T.precedingWhitespace})}],ParserStart:"main"},{Parser:ZA,Grammar:QA}=WA;function qA(T){let E={};const e=new aR(A=>[...gA(T.tokenize(A,E)),rR(A.length)]),R=new ZA(QA.fromCompiled(kA),{lexer:e});return{parse:(A,S)=>{E=S;const{results:t}=R.feed(A);if(t.length===1)return t[0];throw t.length===0?new Error("Parse error: Invalid SQL"):new Error("Parse error: Ambiguous grammar")}}}const jA=T=>[...new Set(T)],KT=T=>T[T.length-1],CR=T=>T.sort((E,e)=>e.length-E.length||E.localeCompare(e)),LR=T=>T.reduce((E,e)=>Math.max(E,e.length),0),iR=T=>T.replace(/\s+/gu," "),X=T=>jA(Object.values(T).flat()),Ne=T=>/\n/.test(T),zA=/^\s+/u;function ES(T,E,e){return TS(T.split(`
`)).flatMap(R=>{if(R.length===1)return R;if(E==="tabular")return eS(R);if(E==="before")return RS(R,e);throw new Error(`Unexpected commaPosition: ${E}`)}).join(`
`)}function TS(T){const E=[];for(let e=0;e<T.length;e++){const R=[T[e]];for(;T[e].match(/.*,$/);)e++,R.push(T[e]);E.push(R)}return E}function eS(T){const E=LR(T);return oR(T).map((e,R)=>R===T.length-1?e:e+" ".repeat(E-e.length-1)+",")}function RS(T,E){return oR(T).map((e,R)=>{if(R===0)return e;const[A]=e.match(zA)||[""];return AS(A,E)+E.replace(/ {2}$/,", ")+e.trimStart()})}function AS(T,E){return T.replace(new RegExp(E+"$"),"")}function oR(T){return T.map(E=>E.replace(/,$/,""))}function SS(T){const E=T.split(`
`);let e=[];for(let R=0;R<E.length;R++){if(E[R].match(/^\s*SELECT/i)){let A=[];if(E[R].match(/.*,$/))A=[E[R]];else{if(e.push(E[R]),E[R].match(/^\s*SELECT\s+.+(?!,$)/i))continue;A.push(E[++R])}for(;E[R++].match(/.*,$/);)A.push(E[R]);const S=A.map(O=>({line:O,matches:O.match(/(^.*?\S) (AS )?(\S+,?$)/i)})).map(({line:O,matches:r})=>r?{precedingText:r[1],as:r[2],alias:r[3]}:{precedingText:O}),t=LR(S.map(({precedingText:O})=>O.replace(/\s*,\s*$/,"")));A=S.map(({precedingText:O,as:r,alias:I})=>O+(I?" ".repeat(t-O.length+1)+(r??"")+I:"")),e=[...e,...A]}e.push(E[R])}return e.join(`
`)}let s;(function(T){T[T.SPACE=0]="SPACE",T[T.NO_SPACE=1]="NO_SPACE",T[T.NO_NEWLINE=2]="NO_NEWLINE",T[T.NEWLINE=3]="NEWLINE",T[T.MANDATORY_NEWLINE=4]="MANDATORY_NEWLINE",T[T.INDENT=5]="INDENT",T[T.SINGLE_INDENT=6]="SINGLE_INDENT"})(s||(s={}));class PR{constructor(E){IE(this,"items",[]);this.indentation=E}add(...E){for(const e of E)switch(e){case s.SPACE:this.items.push(s.SPACE);break;case s.NO_SPACE:this.trimHorizontalWhitespace();break;case s.NO_NEWLINE:this.trimWhitespace();break;case s.NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(s.NEWLINE);break;case s.MANDATORY_NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(s.MANDATORY_NEWLINE);break;case s.INDENT:this.addIndentation();break;case s.SINGLE_INDENT:this.items.push(s.SINGLE_INDENT);break;default:this.items.push(e)}}trimHorizontalWhitespace(){for(;tS(KT(this.items));)this.items.pop()}trimWhitespace(){for(;IS(KT(this.items));)this.items.pop()}addNewline(E){if(this.items.length>0)switch(KT(this.items)){case s.NEWLINE:this.items.pop(),this.items.push(E);break;case s.MANDATORY_NEWLINE:break;default:this.items.push(E);break}}addIndentation(){for(let E=0;E<this.indentation.getLevel();E++)this.items.push(s.SINGLE_INDENT)}toString(){return this.items.map(E=>this.itemToString(E)).join("")}getLayoutItems(){return this.items}itemToString(E){switch(E){case s.SPACE:return" ";case s.NEWLINE:case s.MANDATORY_NEWLINE:return`
`;case s.SINGLE_INDENT:return this.indentation.getSingleIndent();default:return E}}}const tS=T=>T===s.SPACE||T===s.SINGLE_INDENT,IS=T=>T===s.SPACE||T===s.SINGLE_INDENT||T===s.NEWLINE;function OS(T,E){if(E==="standard")return T;let e=[];return T.length>=10&&T.includes(" ")&&([T,...e]=T.split(" ")),E==="tabularLeft"?T=T.padEnd(9," "):T=T.padStart(9," "),T+["",...e].join(" ")}function NS(T){return vA(T)||T===_.RESERVED_CLAUSE||T===_.RESERVED_SELECT||T===_.RESERVED_SET_OPERATION||T===_.RESERVED_JOIN||T===_.LIMIT}const re="top-level",rS="block-level";class DR{constructor(E){IE(this,"indentTypes",[]);this.indent=E}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(re)}increaseBlockLevel(){this.indentTypes.push(rS)}decreaseTopLevel(){this.indentTypes.length>0&&KT(this.indentTypes)===re&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0&&this.indentTypes.pop()===re;);}}class sS extends PR{constructor(e){super(new DR(""));IE(this,"length",0);IE(this,"trailingSpace",!1);this.expressionWidth=e}add(...e){if(e.forEach(R=>this.addToLength(R)),this.length>this.expressionWidth)throw new Ce;super.add(...e)}addToLength(e){if(typeof e=="string")this.length+=e.length,this.trailingSpace=!1;else{if(e===s.MANDATORY_NEWLINE||e===s.NEWLINE)throw new Ce;e===s.INDENT||e===s.SINGLE_INDENT||e===s.SPACE?this.trailingSpace||(this.length++,this.trailingSpace=!0):(e===s.NO_NEWLINE||e===s.NO_SPACE)&&this.trailingSpace&&(this.trailingSpace=!1,this.length--)}}}class Ce extends Error{}class xT{constructor({cfg:E,dialectCfg:e,params:R,layout:A,inline:S=!1}){IE(this,"inline",!1);IE(this,"nodes",[]);IE(this,"index",-1);this.cfg=E,this.dialectCfg=e,this.inline=S,this.params=R,this.layout=A}format(E){for(this.nodes=E,this.index=0;this.index<this.nodes.length;this.index++)this.formatNode(this.nodes[this.index]);return this.layout}formatNode(E){this.formatComments(E.leadingComments),this.formatNodeWithoutComments(E),this.formatComments(E.trailingComments)}formatNodeWithoutComments(E){switch(E.type){case c.function_call:return this.formatFunctionCall(E);case c.array_subscript:return this.formatArraySubscript(E);case c.property_access:return this.formatPropertyAccess(E);case c.parenthesis:return this.formatParenthesis(E);case c.between_predicate:return this.formatBetweenPredicate(E);case c.case_expression:return this.formatCaseExpression(E);case c.case_when:return this.formatCaseWhen(E);case c.case_else:return this.formatCaseElse(E);case c.clause:return this.formatClause(E);case c.set_operation:return this.formatSetOperation(E);case c.limit_clause:return this.formatLimitClause(E);case c.all_columns_asterisk:return this.formatAllColumnsAsterisk(E);case c.literal:return this.formatLiteral(E);case c.identifier:return this.formatIdentifier(E);case c.parameter:return this.formatParameter(E);case c.operator:return this.formatOperator(E);case c.comma:return this.formatComma(E);case c.line_comment:return this.formatLineComment(E);case c.block_comment:return this.formatBlockComment(E);case c.keyword:return this.formatKeywordNode(E)}}formatFunctionCall(E){this.withComments(E.nameKw,()=>{this.layout.add(this.showKw(E.nameKw))}),this.formatNode(E.parenthesis)}formatArraySubscript(E){this.withComments(E.array,()=>{this.layout.add(E.array.type===c.keyword?this.showKw(E.array):E.array.text)}),this.formatNode(E.parenthesis)}formatPropertyAccess(E){this.formatNode(E.object),this.layout.add(s.NO_SPACE,"."),this.formatNode(E.property)}formatParenthesis(E){const e=this.formatInlineExpression(E.children);e?(this.layout.add(E.openParen),this.layout.add(...e.getLayoutItems()),this.layout.add(s.NO_SPACE,E.closeParen,s.SPACE)):(this.layout.add(E.openParen,s.NEWLINE),ET(this.cfg)?(this.layout.add(s.INDENT),this.layout=this.formatSubExpression(E.children)):(this.layout.indentation.increaseBlockLevel(),this.layout.add(s.INDENT),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseBlockLevel()),this.layout.add(s.NEWLINE,s.INDENT,E.closeParen,s.SPACE))}formatBetweenPredicate(E){this.layout.add(this.showKw(E.betweenKw),s.SPACE),this.layout=this.formatSubExpression(E.expr1),this.layout.add(s.NO_SPACE,s.SPACE,this.showNonTabularKw(E.andKw),s.SPACE),this.layout=this.formatSubExpression(E.expr2),this.layout.add(s.SPACE)}formatCaseExpression(E){this.formatNode(E.caseKw),this.layout=this.formatSubExpression(E.expr),this.layout.indentation.increaseBlockLevel(),this.layout=this.formatSubExpression(E.clauses),this.layout.indentation.decreaseBlockLevel(),this.layout.add(s.NEWLINE,s.INDENT),this.formatNode(E.endKw)}formatCaseWhen(E){this.layout.add(s.NEWLINE,s.INDENT),this.formatNode(E.whenKw),this.layout=this.formatSubExpression(E.condition),this.formatNode(E.thenKw),this.layout=this.formatSubExpression(E.result)}formatCaseElse(E){this.layout.add(s.NEWLINE,s.INDENT),this.formatNode(E.elseKw),this.layout=this.formatSubExpression(E.result)}formatClause(E){ET(this.cfg)?this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E.nameKw),s.SPACE):this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E.nameKw),s.NEWLINE),this.layout.indentation.increaseTopLevel(),ET(this.cfg)||this.layout.add(s.INDENT),this.layout=this.formatSubExpression(E.children),this.layout.indentation.decreaseTopLevel()}formatSetOperation(E){this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E.nameKw),s.NEWLINE),this.layout.add(s.INDENT),this.layout=this.formatSubExpression(E.children)}formatLimitClause(E){this.withComments(E.limitKw,()=>{this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E.limitKw))}),this.layout.indentation.increaseTopLevel(),ET(this.cfg)?this.layout.add(s.SPACE):this.layout.add(s.NEWLINE,s.INDENT),E.offset?(this.layout=this.formatSubExpression(E.offset),this.layout.add(s.NO_SPACE,",",s.SPACE),this.layout=this.formatSubExpression(E.count)):this.layout=this.formatSubExpression(E.count),this.layout.indentation.decreaseTopLevel()}formatAllColumnsAsterisk(E){this.layout.add("*",s.SPACE)}formatLiteral(E){this.layout.add(E.text,s.SPACE)}formatIdentifier(E){this.layout.add(E.text,s.SPACE)}formatParameter(E){this.layout.add(this.params.get(E),s.SPACE)}formatOperator({text:E}){var e;this.cfg.denseOperators||(e=this.dialectCfg.alwaysDenseOperators)!==null&&e!==void 0&&e.includes(E)?this.layout.add(s.NO_SPACE,E):E===":"?this.layout.add(s.NO_SPACE,E,s.SPACE):this.layout.add(E,s.SPACE)}formatComma(E){this.inline?this.layout.add(s.NO_SPACE,",",s.SPACE):this.layout.add(s.NO_SPACE,",",s.NEWLINE,s.INDENT)}withComments(E,e){this.formatComments(E.leadingComments),e(),this.formatComments(E.trailingComments)}formatComments(E){E&&E.forEach(e=>{e.type===c.line_comment?this.formatLineComment(e):this.formatBlockComment(e)})}formatLineComment(E){Ne(E.precedingWhitespace||"")?this.layout.add(s.NEWLINE,s.INDENT,E.text,s.MANDATORY_NEWLINE,s.INDENT):this.layout.getLayoutItems().length>0?this.layout.add(s.NO_NEWLINE,s.SPACE,E.text,s.MANDATORY_NEWLINE,s.INDENT):this.layout.add(E.text,s.MANDATORY_NEWLINE,s.INDENT)}formatBlockComment(E){this.isMultilineBlockComment(E)?(this.splitBlockComment(E.text).forEach(e=>{this.layout.add(s.NEWLINE,s.INDENT,e)}),this.layout.add(s.NEWLINE,s.INDENT)):this.layout.add(E.text,s.SPACE)}isMultilineBlockComment(E){return Ne(E.text)||Ne(E.precedingWhitespace||"")}splitBlockComment(E){return E.split(/\n/).map(e=>/^\s*\*/.test(e)?" "+e.replace(/^\s*/,""):e.replace(/^\s*/,""))}formatSubExpression(E){return new xT({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:this.layout,inline:this.inline}).format(E)}formatInlineExpression(E){const e=this.params.getPositionalParameterIndex();try{return new xT({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:new sS(this.cfg.expressionWidth),inline:!0}).format(E)}catch(R){if(R instanceof Ce){this.params.setPositionalParameterIndex(e);return}else throw R}}formatKeywordNode(E){switch(E.tokenType){case _.RESERVED_JOIN:return this.formatJoin(E);case _.AND:case _.OR:case _.XOR:return this.formatLogicalOperator(E);default:return this.formatKeyword(E)}}formatJoin(E){ET(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E),s.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E),s.SPACE)}formatKeyword(E){this.layout.add(this.showKw(E),s.SPACE)}formatLogicalOperator(E){this.cfg.logicalOperatorNewline==="before"?ET(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E),s.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(s.NEWLINE,s.INDENT,this.showKw(E),s.SPACE):this.layout.add(this.showKw(E),s.NEWLINE,s.INDENT)}showKw(E){return NS(E.tokenType)?OS(this.showNonTabularKw(E),this.cfg.indentStyle):this.showNonTabularKw(E)}showNonTabularKw(E){switch(this.cfg.keywordCase){case"preserve":return iR(E.raw);case"upper":return E.text;case"lower":return E.text.toLowerCase()}}}class eE{constructor(E){this.cfg=E,this.params=new YA(this.cfg.params)}tokenizer(){throw new Error("tokenizer() not implemented by subclass")}cachedTokenizer(){const E=this.constructor;return E.cachedTokenizer||(E.cachedTokenizer=this.tokenizer()),E.cachedTokenizer}formatOptions(){return{}}format(E){const e=this.parse(E),R=this.formatAst(e);return this.postFormat(R).trimEnd()}parse(E){return qA(this.cachedTokenizer()).parse(E,this.cfg.paramTypes||{})}formatAst(E){return E.map(e=>this.formatStatement(e)).join(`
`.repeat(this.cfg.linesBetweenQueries+1))}formatStatement(E){const e=new xT({cfg:this.cfg,dialectCfg:this.formatOptions(),params:this.params,layout:new PR(new DR(Ye(this.cfg)))}).format(E.children);return E.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?e.add(s.NEWLINE,";"):e.add(s.NO_NEWLINE,";")),e.toString()}postFormat(E){return this.cfg.tabulateAlias&&(E=SS(E)),(this.cfg.commaPosition==="before"||this.cfg.commaPosition==="tabular")&&(E=ES(E,this.cfg.commaPosition,Ye(this.cfg))),E}}const DE=T=>T.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&"),Fe=/\s+/uy,rT=T=>new RegExp(`(?:${T})`,"uy"),nS=T=>T.split("").map(E=>/ /gu.test(E)?"\\s+":`[${E.toUpperCase()}${E.toLowerCase()}]`).join(""),_S=T=>T+"(?:-"+T+")*",aS=({prefixes:T,requirePrefix:E})=>`(?:${T.map(nS).join("|")}${E?"":"|"})`,CS=T=>new RegExp(`(?:${T.map(DE).join("|")}).*?(?=\r
|\r|
|$)`,"uy"),Ve=(T,E=[])=>{const e=T==="open"?0:1,R=["()",...E].map(A=>A[e]);return rT(R.map(DE).join("|"))},LS=T=>rT(`${CR(T).map(DE).join("|")}`),iS=({rest:T,dashes:E})=>T||E?`(?![${T||""}${E?"-":""}])`:"",xE=(T,E={})=>{if(T.length===0)return/^\b$/u;const e=iS(E),R=CR(T).map(DE).join("|").replace(/ /gu,"\\s+");return new RegExp(`(?:${R})${e}\\b`,"iuy")},se=(T,E)=>{if(!T.length)return;const e=T.map(DE).join("|");return rT(`(?:${e})(?:${E})`)},oS=()=>{const T={"<":">","[":"]","(":")","{":"}"},E="{left}(?:(?!{right}').)*?{right}",e=Object.entries(T).map(([t,O])=>E.replace(/{left}/g,DE(t)).replace(/{right}/g,DE(O))),R=DE(Object.keys(T).join(""));return`[Qq]'(?:${String.raw`(?<tag>[^\s${R}])(?:(?!\k<tag>').)*?\k<tag>`}|${e.join("|")})'`},ye={"``":"(?:`[^`]*`)+","[]":String.raw`(?:\[[^\]]*\])(?:\][^\]]*\])*`,'""-qq':String.raw`(?:"[^"]*")+`,'""-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")`,'""-qq-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")+`,'""-raw':String.raw`(?:"[^"]*")`,"''-qq":String.raw`(?:'[^']*')+`,"''-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')`,"''-qq-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')+`,"''-raw":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\$\w*\$)[\s\S]*?\k<tag>`,"'''..'''":String.raw`'''[^\\]*?(?:\\.[^\\]*?)*?'''`,'""".."""':String.raw`"""[^\\]*?(?:\\.[^\\]*?)*?"""`,"{}":String.raw`(?:\{[^\}]*\})`,"q''":oS()},MR=T=>typeof T=="string"?ye[T]:aS(T)+ye[T.quote],PS=T=>rT(T.map(E=>"regex"in E?E.regex:MR(E)).join("|")),lR=T=>T.map(MR).join("|"),We=T=>rT(lR(T)),DS=(T={})=>rT(UR(T)),UR=({first:T,rest:E,dashes:e,allowFirstCharNumber:R}={})=>{const A="\\p{Alphabetic}\\p{Mark}_",S="\\p{Decimal_Number}",t=DE(T??""),O=DE(E??""),r=R?`[${A}${S}${t}][${A}${S}${O}]*`:`[${A}${t}][${A}${S}${O}]*`;return e?_S(r):r};class MS{constructor(E){IE(this,"input","");IE(this,"index",0);this.rules=E}tokenize(E){this.input=E,this.index=0;const e=[];let R;for(;this.index<this.input.length;){const A=this.getWhitespace();if(this.index<this.input.length){if(R=this.getNextToken(),!R)throw this.createParseError();e.push({...R,precedingWhitespace:A})}}return e}createParseError(){const E=this.input.slice(this.index,this.index+10),{line:e,col:R}=_R(this.input,this.index);return new Error(`Parse error: Unexpected "${E}" at line ${e} column ${R}`)}getWhitespace(){Fe.lastIndex=this.index;const E=Fe.exec(this.input);if(E)return this.index+=E[0].length,E[0]}getNextToken(){for(const E of this.rules){const e=this.match(E);if(e)return e}}match(E){E.regex.lastIndex=this.index;const e=E.regex.exec(this.input);if(e){const R=e[0],A={type:E.type,raw:R,text:E.text?E.text(R):R,start:this.index};return E.key&&(A.key=E.key(R)),this.index+=R.length,A}}}const ve=/\/\*/uy,lS=/([^/*]|\*[^/]|\/[^*])+/uy,US=/\*\//uy;class cS{constructor(){IE(this,"lastIndex",0)}exec(E){let e="",R,A=0;if(R=this.matchSection(ve,E))e+=R,A++;else return null;for(;A>0;)if(R=this.matchSection(ve,E))e+=R,A++;else if(R=this.matchSection(US,E))e+=R,A--;else if(R=this.matchSection(lS,E))e+=R;else return null;return[e]}matchSection(E,e){E.lastIndex=this.lastIndex;const R=E.exec(e);return R&&(this.lastIndex+=R[0].length),R?R[0]:null}}class RE{constructor(E){this.cfg=E,this.rulesBeforeParams=this.buildRulesBeforeParams(E),this.rulesAfterParams=this.buildRulesAfterParams(E)}tokenize(E,e){const R=[...this.rulesBeforeParams,...this.buildParamRules(this.cfg,e),...this.rulesAfterParams],A=new MS(R).tokenize(E);return this.cfg.postProcess?this.cfg.postProcess(A):A}buildRulesBeforeParams(E){return this.validRules([{type:_.BLOCK_COMMENT,regex:E.nestedBlockComments?new cS:/(\/\*[^]*?\*\/)/uy},{type:_.LINE_COMMENT,regex:CS(E.lineCommentTypes??["--"])},{type:_.QUOTED_IDENTIFIER,regex:We(E.identTypes)},{type:_.NUMBER,regex:/(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\s*)?[0-9]+(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\.[0-9]+)?)?)(?!\w)/uy},{type:_.RESERVED_PHRASE,regex:xE(E.reservedPhrases??[],E.identChars),text:EE},{type:_.CASE,regex:/CASE\b/iuy,text:EE},{type:_.END,regex:/END\b/iuy,text:EE},{type:_.BETWEEN,regex:/BETWEEN\b/iuy,text:EE},{type:_.LIMIT,regex:E.reservedClauses.includes("LIMIT")?/LIMIT\b/iuy:void 0,text:EE},{type:_.RESERVED_CLAUSE,regex:xE(E.reservedClauses,E.identChars),text:EE},{type:_.RESERVED_SELECT,regex:xE(E.reservedSelect,E.identChars),text:EE},{type:_.RESERVED_SET_OPERATION,regex:xE(E.reservedSetOperations,E.identChars),text:EE},{type:_.WHEN,regex:/WHEN\b/iuy,text:EE},{type:_.ELSE,regex:/ELSE\b/iuy,text:EE},{type:_.THEN,regex:/THEN\b/iuy,text:EE},{type:_.RESERVED_JOIN,regex:xE(E.reservedJoins,E.identChars),text:EE},{type:_.AND,regex:/AND\b/iuy,text:EE},{type:_.OR,regex:/OR\b/iuy,text:EE},{type:_.XOR,regex:E.supportsXor?/XOR\b/iuy:void 0,text:EE},{type:_.RESERVED_FUNCTION_NAME,regex:xE(E.reservedFunctionNames,E.identChars),text:EE},{type:_.RESERVED_KEYWORD,regex:xE(E.reservedKeywords,E.identChars),text:EE}])}buildRulesAfterParams(E){return this.validRules([{type:_.VARIABLE,regex:E.variableTypes?PS(E.variableTypes):void 0},{type:_.STRING,regex:We(E.stringTypes)},{type:_.IDENTIFIER,regex:DS(E.identChars)},{type:_.DELIMITER,regex:/[;]/uy},{type:_.COMMA,regex:/[,]/y},{type:_.OPEN_PAREN,regex:Ve("open",E.extraParens)},{type:_.CLOSE_PAREN,regex:Ve("close",E.extraParens)},{type:_.OPERATOR,regex:LS(["+","-","/",">","<","=","<>","<=",">=","!=",...E.operators??[]])},{type:_.ASTERISK,regex:/[*]/uy},{type:_.DOT,regex:/[.]/uy}])}buildParamRules(E,e){var R,A,S,t;const O={named:(e==null?void 0:e.named)||((R=E.paramTypes)===null||R===void 0?void 0:R.named)||[],quoted:(e==null?void 0:e.quoted)||((A=E.paramTypes)===null||A===void 0?void 0:A.quoted)||[],numbered:(e==null?void 0:e.numbered)||((S=E.paramTypes)===null||S===void 0?void 0:S.numbered)||[],positional:typeof(e==null?void 0:e.positional)=="boolean"?e.positional:(t=E.paramTypes)===null||t===void 0?void 0:t.positional};return this.validRules([{type:_.NAMED_PARAMETER,regex:se(O.named,UR(E.paramChars||E.identChars)),key:r=>r.slice(1)},{type:_.QUOTED_PARAMETER,regex:se(O.quoted,lR(E.identTypes)),key:r=>(({tokenKey:I,quoteChar:N})=>I.replace(new RegExp(DE("\\"+N),"gu"),N))({tokenKey:r.slice(2,-1),quoteChar:r.slice(-1)})},{type:_.NUMBERED_PARAMETER,regex:se(O.numbered,"[0-9]+"),key:r=>r.slice(1)},{type:_.POSITIONAL_PARAMETER,regex:O.positional?/[?]/y:void 0}])}validRules(E){return E.filter(e=>!!e.regex)}}const EE=T=>iR(T.toUpperCase()),P=T=>T.flatMap(uS),uS=T=>cR(dS(T)).map(E=>E.trim()),ge=/[^[\]{}]+/y,Xe=/\{.*?\}/y,be=/\[.*?\]/y,dS=T=>{let E=0;const e=[];for(;E<T.length;){ge.lastIndex=E;const R=ge.exec(T);R&&(e.push([R[0].trim()]),E+=R[0].length),be.lastIndex=E;const A=be.exec(T);if(A){const t=A[0].slice(1,-1).split("|").map(O=>O.trim());e.push(["",...t]),E+=A[0].length}Xe.lastIndex=E;const S=Xe.exec(T);if(S){const t=S[0].slice(1,-1).split("|").map(O=>O.trim());e.push(t),E+=S[0].length}if(!R&&!A&&!S)throw new Error(`Unbalanced parenthesis in: ${T}`)}return e},cR=([T,...E])=>T===void 0?[""]:cR(E).flatMap(e=>T.map(R=>R.trim()+" "+e.trim())),GS=X({keywords:["ALL","AND","ANY","ARRAY","AS","ASC","ASSERT_ROWS_MODIFIED","AT","BETWEEN","BY","CASE","CAST","COLLATE","CONTAINS","CREATE","CROSS","CUBE","CURRENT","DEFAULT","DEFINE","DESC","DISTINCT","ELSE","END","ENUM","ESCAPE","EXCEPT","EXCLUDE","EXISTS","EXTRACT","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","GROUP","GROUPING","GROUPS","HASH","HAVING","IF","IGNORE","IN","INNER","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LIKE","LIMIT","LOOKUP","MERGE","NATURAL","NEW","NO","NOT","NULL","NULLS","OF","ON","OR","ORDER","OUTER","OVER","PARTITION","PRECEDING","PROTO","RANGE","RECURSIVE","RESPECT","RIGHT","ROLLUP","ROWS","SELECT","SET","SOME","STRUCT","TABLE","TABLESAMPLE","THEN","TO","TREAT","TRUE","UNBOUNDED","UNION","UNNEST","USING","WHEN","WHERE","WINDOW","WITH","WITHIN"],datatypes:["ARRAY","BOOL","BYTES","DATE","DATETIME","GEOGRAPHY","INTERVAL","INT64","INT","SMALLINT","INTEGER","BIGINT","TINYINT","BYTEINT","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","FLOAT64","STRING","STRUCT","TIME","TIMEZONE"],stringFormat:["HEX","BASEX","BASE64M","ASCII","UTF-8","UTF8"],misc:["SAFE"],ddl:["LIKE","COPY","CLONE","IN","OUT","INOUT","RETURNS","LANGUAGE","CASCADE","RESTRICT","DETERMINISTIC"]}),fS=X({aead:["KEYS.NEW_KEYSET","KEYS.ADD_KEY_FROM_RAW_BYTES","AEAD.DECRYPT_BYTES","AEAD.DECRYPT_STRING","AEAD.ENCRYPT","KEYS.KEYSET_CHAIN","KEYS.KEYSET_FROM_JSON","KEYS.KEYSET_TO_JSON","KEYS.ROTATE_KEYSET","KEYS.KEYSET_LENGTH"],aggregateAnalytic:["ANY_VALUE","ARRAY_AGG","AVG","CORR","COUNT","COUNTIF","COVAR_POP","COVAR_SAMP","MAX","MIN","ST_CLUSTERDBSCAN","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","VAR_POP","VAR_SAMP"],aggregate:["ANY_VALUE","ARRAY_AGG","ARRAY_CONCAT_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","COUNT","COUNTIF","LOGICAL_AND","LOGICAL_OR","MAX","MIN","STRING_AGG","SUM"],approximateAggregate:["APPROX_COUNT_DISTINCT","APPROX_QUANTILES","APPROX_TOP_COUNT","APPROX_TOP_SUM"],array:["ARRAY_CONCAT","ARRAY_LENGTH","ARRAY_TO_STRING","GENERATE_ARRAY","GENERATE_DATE_ARRAY","GENERATE_TIMESTAMP_ARRAY","ARRAY_REVERSE","OFFSET","SAFE_OFFSET","ORDINAL","SAFE_ORDINAL"],bitwise:["BIT_COUNT"],conversion:["PARSE_BIGNUMERIC","PARSE_NUMERIC","SAFE_CAST"],date:["CURRENT_DATE","EXTRACT","DATE","DATE_ADD","DATE_SUB","DATE_DIFF","DATE_TRUNC","DATE_FROM_UNIX_DATE","FORMAT_DATE","LAST_DAY","PARSE_DATE","UNIX_DATE"],datetime:["CURRENT_DATETIME","DATETIME","EXTRACT","DATETIME_ADD","DATETIME_SUB","DATETIME_DIFF","DATETIME_TRUNC","FORMAT_DATETIME","LAST_DAY","PARSE_DATETIME"],debugging:["ERROR"],federatedQuery:["EXTERNAL_QUERY"],geography:["S2_CELLIDFROMPOINT","S2_COVERINGCELLIDS","ST_ANGLE","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_AZIMUTH","ST_BOUNDARY","ST_BOUNDINGBOX","ST_BUFFER","ST_BUFFERWITHTOLERANCE","ST_CENTROID","ST_CENTROID_AGG","ST_CLOSESTPOINT","ST_CLUSTERDBSCAN","ST_CONTAINS","ST_CONVEXHULL","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DUMP","ST_DWITHIN","ST_ENDPOINT","ST_EQUALS","ST_EXTENT","ST_EXTERIORRING","ST_GEOGFROM","ST_GEOGFROMGEOJSON","ST_GEOGFROMTEXT","ST_GEOGFROMWKB","ST_GEOGPOINT","ST_GEOGPOINTFROMGEOHASH","ST_GEOHASH","ST_GEOMETRYTYPE","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_INTERSECTSBOX","ST_ISCOLLECTION","ST_ISEMPTY","ST_LENGTH","ST_MAKELINE","ST_MAKEPOLYGON","ST_MAKEPOLYGONORIENTED","ST_MAXDISTANCE","ST_NPOINTS","ST_NUMGEOMETRIES","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SIMPLIFY","ST_SNAPTOGRID","ST_STARTPOINT","ST_TOUCHES","ST_UNION","ST_UNION_AGG","ST_WITHIN","ST_X","ST_Y"],hash:["FARM_FINGERPRINT","MD5","SHA1","SHA256","SHA512"],hll:["HLL_COUNT.INIT","HLL_COUNT.MERGE","HLL_COUNT.MERGE_PARTIAL","HLL_COUNT.EXTRACT"],interval:["MAKE_INTERVAL","EXTRACT","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL"],json:["JSON_EXTRACT","JSON_QUERY","JSON_EXTRACT_SCALAR","JSON_VALUE","JSON_EXTRACT_ARRAY","JSON_QUERY_ARRAY","JSON_EXTRACT_STRING_ARRAY","JSON_VALUE_ARRAY","TO_JSON_STRING"],math:["ABS","SIGN","IS_INF","IS_NAN","IEEE_DIVIDE","RAND","SQRT","POW","POWER","EXP","LN","LOG","LOG10","GREATEST","LEAST","DIV","SAFE_DIVIDE","SAFE_MULTIPLY","SAFE_NEGATE","SAFE_ADD","SAFE_SUBTRACT","MOD","ROUND","TRUNC","CEIL","CEILING","FLOOR","COS","COSH","ACOS","ACOSH","SIN","SINH","ASIN","ASINH","TAN","TANH","ATAN","ATANH","ATAN2","RANGE_BUCKET"],navigation:["FIRST_VALUE","LAST_VALUE","NTH_VALUE","LEAD","LAG","PERCENTILE_CONT","PERCENTILE_DISC"],net:["NET.IP_FROM_STRING","NET.SAFE_IP_FROM_STRING","NET.IP_TO_STRING","NET.IP_NET_MASK","NET.IP_TRUNC","NET.IPV4_FROM_INT64","NET.IPV4_TO_INT64","NET.HOST","NET.PUBLIC_SUFFIX","NET.REG_DOMAIN"],numbering:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","NTILE","ROW_NUMBER"],security:["SESSION_USER"],statisticalAggregate:["CORR","COVAR_POP","COVAR_SAMP","STDDEV_POP","STDDEV_SAMP","STDDEV","VAR_POP","VAR_SAMP","VARIANCE"],string:["ASCII","BYTE_LENGTH","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CODE_POINTS_TO_BYTES","CODE_POINTS_TO_STRING","CONCAT","CONTAINS_SUBSTR","ENDS_WITH","FORMAT","FROM_BASE32","FROM_BASE64","FROM_HEX","INITCAP","INSTR","LEFT","LENGTH","LPAD","LOWER","LTRIM","NORMALIZE","NORMALIZE_AND_CASEFOLD","OCTET_LENGTH","REGEXP_CONTAINS","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","REPEAT","REVERSE","RIGHT","RPAD","RTRIM","SAFE_CONVERT_BYTES_TO_STRING","SOUNDEX","SPLIT","STARTS_WITH","STRPOS","SUBSTR","SUBSTRING","TO_BASE32","TO_BASE64","TO_CODE_POINTS","TO_HEX","TRANSLATE","TRIM","UNICODE","UPPER"],time:["CURRENT_TIME","TIME","EXTRACT","TIME_ADD","TIME_SUB","TIME_DIFF","TIME_TRUNC","FORMAT_TIME","PARSE_TIME"],timestamp:["CURRENT_TIMESTAMP","EXTRACT","STRING","TIMESTAMP","TIMESTAMP_ADD","TIMESTAMP_SUB","TIMESTAMP_DIFF","TIMESTAMP_TRUNC","FORMAT_TIMESTAMP","PARSE_TIMESTAMP","TIMESTAMP_SECONDS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UNIX_SECONDS","UNIX_MILLIS","UNIX_MICROS"],uuid:["GENERATE_UUID"],conditional:["COALESCE","IF","IFNULL","NULLIF"],legacyAggregate:["AVG","BIT_AND","BIT_OR","BIT_XOR","CORR","COUNT","COVAR_POP","COVAR_SAMP","EXACT_COUNT_DISTINCT","FIRST","GROUP_CONCAT","GROUP_CONCAT_UNQUOTED","LAST","MAX","MIN","NEST","NTH","QUANTILES","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","TOP","UNIQUE","VARIANCE","VAR_POP","VAR_SAMP"],legacyBitwise:["BIT_COUNT"],legacyCasting:["BOOLEAN","BYTES","CAST","FLOAT","HEX_STRING","INTEGER","STRING"],legacyComparison:["COALESCE","GREATEST","IFNULL","IS_INF","IS_NAN","IS_EXPLICITLY_DEFINED","LEAST","NVL"],legacyDatetime:["CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE","DATE_ADD","DATEDIFF","DAY","DAYOFWEEK","DAYOFYEAR","FORMAT_UTC_USEC","HOUR","MINUTE","MONTH","MSEC_TO_TIMESTAMP","NOW","PARSE_UTC_USEC","QUARTER","SEC_TO_TIMESTAMP","SECOND","STRFTIME_UTC_USEC","TIME","TIMESTAMP","TIMESTAMP_TO_MSEC","TIMESTAMP_TO_SEC","TIMESTAMP_TO_USEC","USEC_TO_TIMESTAMP","UTC_USEC_TO_DAY","UTC_USEC_TO_HOUR","UTC_USEC_TO_MONTH","UTC_USEC_TO_WEEK","UTC_USEC_TO_YEAR","WEEK","YEAR"],legacyIp:["FORMAT_IP","PARSE_IP","FORMAT_PACKED_IP","PARSE_PACKED_IP"],legacyJson:["JSON_EXTRACT","JSON_EXTRACT_SCALAR"],legacyMath:["ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","ATAN2","CEIL","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG2","LOG10","PI","POW","RADIANS","RAND","ROUND","SIN","SINH","SQRT","TAN","TANH"],legacyRegex:["REGEXP_MATCH","REGEXP_EXTRACT","REGEXP_REPLACE"],legacyString:["CONCAT","INSTR","LEFT","LENGTH","LOWER","LPAD","LTRIM","REPLACE","RIGHT","RPAD","RTRIM","SPLIT","SUBSTR","UPPER"],legacyTableWildcard:["TABLE_DATE_RANGE","TABLE_DATE_RANGE_STRICT","TABLE_QUERY"],legacyUrl:["HOST","DOMAIN","TLD"],legacyWindow:["AVG","COUNT","MAX","MIN","STDDEV","SUM","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER"],legacyMisc:["CURRENT_USER","EVERY","FROM_BASE64","HASH","FARM_FINGERPRINT","IF","POSITION","SHA1","SOME","TO_BASE64"],other:["BQ.JOBS.CANCEL","BQ.REFRESH_MATERIALIZED_VIEW"],ddl:["OPTIONS"],pivot:["PIVOT","UNPIVOT"],dataTypes:["BYTES","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","STRING"]}),pS=P(["SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]"]),hS=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","OMIT RECORD IF","INSERT [INTO]","VALUES","UPDATE","SET","DELETE [FROM]","TRUNCATE TABLE","MERGE [INTO]","WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]","UPDATE SET","CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]","DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME TO","ALTER COLUMN [IF EXISTS]","SET DEFAULT COLLATE","SET OPTIONS","DROP NOT NULL","SET DATA TYPE","CREATE SCHEMA [IF NOT EXISTS]","DEFAULT COLLATE","CLUSTER BY","FOR SYSTEM_TIME AS OF","WITH CONNECTION","WITH PARTITION COLUMNS","CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]","REMOTE WITH CONNECTION","RETURNS TABLE","CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]","GRANT TO","FILTER USING","CREATE CAPACITY","AS JSON","CREATE RESERVATION","CREATE ASSIGNMENT","CREATE SEARCH INDEX [IF NOT EXISTS]","ALTER SCHEMA [IF EXISTS]","ALTER [MATERIALIZED] VIEW [IF EXISTS]","ALTER BI_CAPACITY","DROP SCHEMA [IF EXISTS]","DROP [MATERIALIZED] VIEW [IF EXISTS]","DROP [TABLE] FUNCTION [IF EXISTS]","DROP PROCEDURE [IF EXISTS]","DROP ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","DROP CAPACITY [IF EXISTS]","DROP RESERVATION [IF EXISTS]","DROP ASSIGNMENT [IF EXISTS]","DROP SEARCH INDEX [IF EXISTS]","DROP [IF EXISTS]","GRANT","REVOKE","DECLARE","EXECUTE IMMEDIATE","LOOP","END LOOP","REPEAT","END REPEAT","WHILE","END WHILE","BREAK","LEAVE","CONTINUE","ITERATE","FOR","END FOR","BEGIN","BEGIN TRANSACTION","COMMIT TRANSACTION","ROLLBACK TRANSACTION","RAISE","RETURN","CALL","ASSERT","EXPORT DATA"]),HS=P(["UNION {ALL | DISTINCT}","EXCEPT DISTINCT","INTERSECT DISTINCT"]),mS=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),BS=P(["TABLESAMPLE SYSTEM","ANY TYPE","ALL COLUMNS","NOT DETERMINISTIC","{ROWS | RANGE} BETWEEN"]);class YS extends eE{tokenizer(){return new RE({reservedClauses:hS,reservedSelect:pS,reservedSetOperations:HS,reservedJoins:mS,reservedPhrases:BS,reservedKeywords:GS,reservedFunctionNames:fS,extraParens:["[]"],stringTypes:[{quote:'""".."""',prefixes:["R","B","RB","BR"]},{quote:"'''..'''",prefixes:["R","B","RB","BR"]},'""-bs',"''-bs",{quote:'""-raw',prefixes:["R","B","RB","BR"],requirePrefix:!0},{quote:"''-raw",prefixes:["R","B","RB","BR"],requirePrefix:!0}],identTypes:["``"],identChars:{dashes:!0},paramTypes:{positional:!0,named:["@"],quoted:["@"]},lineCommentTypes:["--","#"],operators:["&","|","^","~",">>","<<","||"],postProcess:FS})}}function FS(T){return VS(yS(T))}function VS(T){let E=ZE;return T.map(e=>e.text==="OFFSET"&&E.text==="["?(E=e,{...e,type:_.RESERVED_FUNCTION_NAME}):(E=e,e))}function yS(T){const E=[];for(let R=0;R<T.length;R++){var e;const A=T[R];if((yE.ARRAY(A)||yE.STRUCT(A))&&((e=T[R+1])===null||e===void 0?void 0:e.text)==="<"){const S=WS(T,R+1),t=T.slice(R,S+1);E.push({type:_.IDENTIFIER,raw:t.map(Ke("raw")).join(""),text:t.map(Ke("text")).join(""),start:A.start}),R=S}else E.push(A)}return E}const Ke=T=>E=>E.type===_.IDENTIFIER||E.type===_.COMMA?E[T]+" ":E[T];function WS(T,E){let e=0;for(let R=E;R<T.length;R++){const A=T[R];if(A.text==="<"?e++:A.text===">"?e--:A.text===">>"&&(e-=2),e===0)return R}return T.length-1}const vS=X({aggregate:["ARRAY_AGG","AVG","CORR","CORRELATION","COUNT","COUNT_BIG","COVAR_POP","COVARIANCE","COVAR","COVAR_SAMP","COVARIANCE_SAMP","CUME_DIST","GROUPING","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_ICPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV","STDDEV_SAMP","SUM","VAR_POP","VARIANCE","VAR","VAR_SAMP","VARIANCE_SAMP","XMLAGG"],scalar:["ABS","ABSVAL","ACOS","ADD_DAYS","ADD_MONTHS","ARRAY_DELETE","ARRAY_FIRST","ARRAY_LAST","ARRAY_NEXT","ARRAY_PRIOR","ARRAY_TRIM","ASCII","ASCII_CHR","ASCII_STR","ASCIISTR","ASIN","ATAN","ATANH","ATAN2","BIGINT","BINARY","BITAND","BITANDNOT","BITOR","BITXOR","BITNOT","BLOB","BTRIM","CARDINALITY","CCSID_ENCODING","CEILING","CEIL","CHAR","CHAR9","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CLOB","COALESCE","COLLATION_KEY","COMPARE_DECFLOAT","CONCAT","CONTAINS","COS","COSH","DATE","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEK_ISO","DAYOFYEAR","DAYS","DAYS_BETWEEN","DBCLOB","DECFLOAT","DECFLOAT_FORMAT","DECFLOAT_SORTKEY","DECIMAL","DEC","DECODE","DECRYPT_BINARY","DECRYPT_BIT","DECRYPT_CHAR","DECRYPT_DB","DECRYPT_DATAKEY_BIGINT","DECRYPT_DATAKEY_BIT","DECRYPT_DATAKEY_CLOB","DECRYPT_DATAKEY_DBCLOB","DECRYPT_DATAKEY_DECIMAL","DECRYPT_DATAKEY_INTEGER","DECRYPT_DATAKEY_VARCHAR","DECRYPT_DATAKEY_VARGRAPHIC","DEGREES","DIFFERENCE","DIGITS","DOUBLE_PRECISION","DOUBLE","DSN_XMLVALIDATE","EBCDIC_CHR","EBCDIC_STR","ENCRYPT_DATAKEY","ENCRYPT_TDES","EXP","EXTRACT","FLOAT","FLOOR","GENERATE_UNIQUE","GENERATE_UNIQUE_BINARY","GETHINT","GETVARIABLE","GRAPHIC","GREATEST","HASH","HASH_CRC32","HASH_MD5","HASH_SHA1","HASH_SHA256","HEX","HOUR","IDENTITY_VAL_LOCAL","IFNULL","INSERT","INSTR","INTEGER","INT","JULIAN_DAY","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LN","LOCATE","LOCATE_IN_STRING","LOG10","LOWER","LPAD","LTRIM","MAX","MAX_CARDINALITY","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MOD","MONTH","MONTHS_BETWEEN","MQREAD","MQREADCLOB","MQRECEIVE","MQRECEIVECLOB","MQSEND","MULTIPLY_ALT","NEXT_DAY","NEXT_MONTH","NORMALIZE_DECFLOAT","NORMALIZE_STRING","NULLIF","NVL","OVERLAY","PACK","POSITION","POSSTR","POWER","POW","QUANTIZE","QUARTER","RADIANS","RAISE_ERROR","RANDOM","RAND","REAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RIGHT","ROUND","ROUND_TIMESTAMP","ROWID","RPAD","RTRIM","SCORE","SECOND","SIGN","SIN","SINH","SMALLINT","SOUNDEX","SOAPHTTPC","SOAPHTTPV","SOAPHTTPNC","SOAPHTTPNV","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTRING","TAN","TANH","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMP_TZ","TO_CHAR","TO_CLOB","TO_DATE","TO_NUMBER","TOTALORDER","TO_TIMESTAMP","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRUNC","TRUNC_TIMESTAMP","UCASE","UNICODE","UNICODE_STR","UNISTR","UPPER","VALUE","VARBINARY","VARCHAR","VARCHAR9","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT","VARGRAPHIC","VERIFY_GROUP_FOR_USER","VERIFY_ROLE_FOR_USER","VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER","WEEK","WEEK_ISO","WRAP","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLMODIFY","XMLNAMESPACES","XMLPARSE","XMLPI","XMLQUERY","XMLSERIALIZE","XMLTEXT","XMLXSROBJECTID","XSLTRANSFORM","YEAR"],table:["ADMIN_TASK_LIST","ADMIN_TASK_OUTPUT","ADMIN_TASK_STATUS","BLOCKING_THREADS","MQREADALL","MQREADALLCLOB","MQRECEIVEALL","MQRECEIVEALLCLOB","XMLTABLE"],row:["UNPACK"],olap:["CUME_DIST","PERCENT_RANK","RANK","DENSE_RANK","NTILE","LAG","LEAD","ROW_NUMBER","FIRST_VALUE","LAST_VALUE","NTH_VALUE","RATIO_TO_REPORT"],cast:["CAST"]}),gS=X({standard:["ALL","ALLOCATE","ALLOW","ALTERAND","ANY","AS","ARRAY","ARRAY_EXISTS","ASENSITIVE","ASSOCIATE","ASUTIME","AT","AUDIT","AUX","AUXILIARY","BEFORE","BEGIN","BETWEEN","BUFFERPOOL","BY","CAPTURE","CASCADED","CAST","CCSID","CHARACTER","CHECK","CLONE","CLUSTER","COLLECTION","COLLID","COLUMN","CONDITION","CONNECTION","CONSTRAINT","CONTENT","CONTINUE","CREATE","CUBE","CURRENT","CURRENT_DATE","CURRENT_LC_CTYPE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRVAL","CURSOR","DATA","DATABASE","DBINFO","DECLARE","DEFAULT","DESCRIPTOR","DETERMINISTIC","DISABLE","DISALLOW","DISTINCT","DO","DOCUMENT","DSSIZE","DYNAMIC","EDITPROC","ELSE","ELSEIF","ENCODING","ENCRYPTION","ENDING","END-EXEC","ERASE","ESCAPE","EXCEPTION","EXISTS","EXIT","EXTERNAL","FENCED","FIELDPROC","FINAL","FIRST","FOR","FREE","FULL","FUNCTION","GENERATED","GET","GLOBAL","GOTO","GROUP","HANDLER","HOLD","HOURS","IF","IMMEDIATE","IN","INCLUSIVE","INDEX","INHERIT","INNER","INOUT","INSENSITIVE","INTO","IS","ISOBID","ITERATE","JAR","KEEP","KEY","LANGUAGE","LAST","LC_CTYPE","LEAVE","LIKE","LOCAL","LOCALE","LOCATOR","LOCATORS","LOCK","LOCKMAX","LOCKSIZE","LONG","LOOP","MAINTAINED","MATERIALIZED","MICROSECONDS","MINUTEMINUTES","MODIFIES","MONTHS","NEXT","NEXTVAL","NO","NONE","NOT","NULL","NULLS","NUMPARTS","OBID","OF","OLD","ON","OPTIMIZATION","OPTIMIZE","ORDER","ORGANIZATION","OUT","OUTER","PACKAGE","PARAMETER","PART","PADDED","PARTITION","PARTITIONED","PARTITIONING","PATH","PIECESIZE","PERIOD","PLAN","PRECISION","PREVVAL","PRIOR","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PSID","PUBLIC","QUERY","QUERYNO","READS","REFERENCES","RESIGNAL","RESTRICT","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNS","ROLE","ROLLUP","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_UP","ROUND_UP","ROW","ROWSET","SCHEMA","SCRATCHPAD","SECONDS","SECQTY","SECURITY","SEQUENCE","SENSITIVE","SESSION_USER","SIMPLE","SOME","SOURCE","SPECIFIC","STANDARD","STATIC","STATEMENT","STAY","STOGROUP","STORES","STYLE","SUMMARY","SYNONYM","SYSDATE","SYSTEM","SYSTIMESTAMP","TABLE","TABLESPACE","THEN","TO","TRIGGER","TYPE","UNDO","UNIQUE","UNTIL","USER","USING","VALIDPROC","VARIABLE","VARIANT","VCAT","VERSIONING","VIEW","VOLATILE","VOLUMES","WHILE","WLM","XMLEXISTS","XMLCAST","YEARS","ZONE"]}),XS=P(["SELECT [ALL | DISTINCT]"]),bS=P(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY [INPUT SEQUENCE]","FETCH FIRST","INSERT INTO","VALUES","UPDATE","SET","WHERE CURRENT OF","WITH {RR | RS | CS | UR}","DELETE FROM","TRUNCATE [TABLE]","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT","CREATE [OR REPLACE] VIEW","CREATE [GLOBAL TEMPORARY] TABLE","DROP TABLE [HIERARCHY]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","ALTER [COLUMN]","SET DATA TYPE","SET NOT NULL","DROP {IDENTITY | EXPRESSION | DEFAULT | NOT NULL}","ALLOCATE CURSOR","ALTER DATABASE","ALTER FUNCTION","ALTER INDEX","ALTER MASK","ALTER PERMISSION","ALTER PROCEDURE","ALTER SEQUENCE","ALTER STOGROUP","ALTER TABLESPACE","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER VIEW","ASSOCIATE LOCATORS","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT","COMMIT","CONNECT","CREATE ALIAS","CREATE AUXILIARY TABLE","CREATE DATABASE","CREATE FUNCTION","CREATE GLOBAL TEMPORARY TABLE","CREATE INDEX","CREATE LOB TABLESPACE","CREATE MASK","CREATE PERMISSION","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE STOGROUP","CREATE SYNONYM","CREATE TABLESPACE","CREATE TRIGGER","CREATE TRUSTED CONTEXT","CREATE TYPE","CREATE VARIABLE","DECLARE CURSOR","DECLARE GLOBAL TEMPORARY TABLE","DECLARE STATEMENT","DECLARE TABLE","DECLARE VARIABLE","DESCRIBE CURSOR","DESCRIBE INPUT","DESCRIBE OUTPUT","DESCRIBE PROCEDURE","DESCRIBE TABLE","DROP","END DECLARE SECTION","EXCHANGE","EXECUTE","EXECUTE IMMEDIATE","EXPLAIN","FETCH","FREE LOCATOR","GET DIAGNOSTICS","GRANT","HOLD LOCATOR","INCLUDE","LABEL","LOCK TABLE","OPEN","PREPARE","REFRESH","RELEASE","RELEASE SAVEPOINT","RENAME","REVOKE","ROLLBACK","SAVEPOINT","SELECT INTO","SET CONNECTION","SET CURRENT ACCELERATOR","SET CURRENT APPLICATION COMPATIBILITY","SET CURRENT APPLICATION ENCODING SCHEME","SET CURRENT DEBUG MODE","SET CURRENT DECFLOAT ROUNDING MODE","SET CURRENT DEGREE","SET CURRENT EXPLAIN MODE","SET CURRENT GET_ACCEL_ARCHIVE","SET CURRENT LOCALE LC_CTYPE","SET CURRENT MAINTAINED TABLE TYPES FOR OPTIMIZATION","SET CURRENT OPTIMIZATION HINT","SET CURRENT PACKAGE PATH","SET CURRENT PACKAGESET","SET CURRENT PRECISION","SET CURRENT QUERY ACCELERATION","SET CURRENT QUERY ACCELERATION WAITFORDATA","SET CURRENT REFRESH AGE","SET CURRENT ROUTINE VERSION","SET CURRENT RULES","SET CURRENT SQLID","SET CURRENT TEMPORAL BUSINESS_TIME","SET CURRENT TEMPORAL SYSTEM_TIME","SET ENCRYPTION PASSWORD","SET PATH","SET SCHEMA","SET SESSION TIME ZONE","SIGNAL","VALUES INTO","WHENEVER","AFTER","GO","SET CURRENT SCHEMA"]),KS=P(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),xS=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),wS=P(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]);class $S extends eE{tokenizer(){return new RE({reservedClauses:bS,reservedSelect:XS,reservedSetOperations:KS,reservedJoins:xS,reservedPhrases:wS,reservedKeywords:gS,reservedFunctionNames:vS,stringTypes:[{quote:"''-qq",prefixes:["G","N","U&"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","¬=","¬>","¬<","!>","!<","||"]})}}const JS=X({math:["ABS","ACOS","ASIN","ATAN","BIN","BROUND","CBRT","CEIL","CEILING","CONV","COS","DEGREES","EXP","FACTORIAL","FLOOR","GREATEST","HEX","LEAST","LN","LOG","LOG10","LOG2","NEGATIVE","PI","PMOD","POSITIVE","POW","POWER","RADIANS","RAND","ROUND","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIN","SQRT","TAN","UNHEX","WIDTH_BUCKET"],array:["ARRAY_CONTAINS","MAP_KEYS","MAP_VALUES","SIZE","SORT_ARRAY"],conversion:["BINARY","CAST"],date:["ADD_MONTHS","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","QUARTER","SECOND","TIMESTAMP","TO_DATE","TO_UTC_TIMESTAMP","TRUNC","UNIX_TIMESTAMP","WEEKOFYEAR","YEAR"],conditional:["ASSERT_TRUE","COALESCE","IF","ISNOTNULL","ISNULL","NULLIF","NVL"],string:["ASCII","BASE64","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONTEXT_NGRAMS","DECODE","ELT","ENCODE","FIELD","FIND_IN_SET","FORMAT_NUMBER","GET_JSON_OBJECT","IN_FILE","INITCAP","INSTR","LCASE","LENGTH","LEVENSHTEIN","LOCATE","LOWER","LPAD","LTRIM","NGRAMS","OCTET_LENGTH","PARSE_URL","PRINTF","QUOTE","REGEXP_EXTRACT","REGEXP_REPLACE","REPEAT","REVERSE","RPAD","RTRIM","SENTENCES","SOUNDEX","SPACE","SPLIT","STR_TO_MAP","SUBSTR","SUBSTRING","TRANSLATE","TRIM","UCASE","UNBASE64","UPPER"],masking:["MASK","MASK_FIRST_N","MASK_HASH","MASK_LAST_N","MASK_SHOW_FIRST_N","MASK_SHOW_LAST_N"],misc:["AES_DECRYPT","AES_ENCRYPT","CRC32","CURRENT_DATABASE","CURRENT_USER","HASH","JAVA_METHOD","LOGGED_IN_USER","MD5","REFLECT","SHA","SHA1","SHA2","SURROGATE_KEY","VERSION"],aggregate:["AVG","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COVAR_POP","COVAR_SAMP","HISTOGRAM_NUMERIC","MAX","MIN","NTILE","PERCENTILE","PERCENTILE_APPROX","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],table:["EXPLODE","INLINE","JSON_TUPLE","PARSE_URL_TUPLE","POSEXPLODE","STACK"],window:["LEAD","LAG","FIRST_VALUE","LAST_VALUE","RANK","ROW_NUMBER","DENSE_RANK","CUME_DIST","PERCENT_RANK","NTILE"],dataTypes:["DECIMAL","NUMERIC","VARCHAR","CHAR"]}),kS=X({nonReserved:["ADD","ADMIN","AFTER","ANALYZE","ARCHIVE","ASC","BEFORE","BUCKET","BUCKETS","CASCADE","CHANGE","CLUSTER","CLUSTERED","CLUSTERSTATUS","COLLECTION","COLUMNS","COMMENT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONTINUE","DATA","DATABASES","DATETIME","DAY","DBPROPERTIES","DEFERRED","DEFINED","DELIMITED","DEPENDENCY","DESC","DIRECTORIES","DIRECTORY","DISABLE","DISTRIBUTE","ELEM_TYPE","ENABLE","ESCAPED","EXCLUSIVE","EXPLAIN","EXPORT","FIELDS","FILE","FILEFORMAT","FIRST","FORMAT","FORMATTED","FUNCTIONS","HOLD_DDLTIME","HOUR","IDXPROPERTIES","IGNORE","INDEX","INDEXES","INPATH","INPUTDRIVER","INPUTFORMAT","ITEMS","JAR","KEYS","KEY_TYPE","LIMIT","LINES","LOAD","LOCATION","LOCK","LOCKS","LOGICAL","LONG","MAPJOIN","MATERIALIZED","METADATA","MINUS","MINUTE","MONTH","MSCK","NOSCAN","NO_DROP","OFFLINE","OPTION","OUTPUTDRIVER","OUTPUTFORMAT","OVERWRITE","OWNER","PARTITIONED","PARTITIONS","PLUS","PRETTY","PRINCIPALS","PROTECTION","PURGE","READ","READONLY","REBUILD","RECORDREADER","RECORDWRITER","RELOAD","RENAME","REPAIR","REPLACE","REPLICATION","RESTRICT","REWRITE","ROLE","ROLES","SCHEMA","SCHEMAS","SECOND","SEMI","SERDE","SERDEPROPERTIES","SERVER","SETS","SHARED","SHOW","SHOW_DATABASE","SKEWED","SORT","SORTED","SSL","STATISTICS","STORED","STREAMTABLE","STRING","STRUCT","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","TINYINT","TOUCH","TRANSACTIONS","UNARCHIVE","UNDO","UNIONTYPE","UNLOCK","UNSET","UNSIGNED","URI","USE","UTC","UTCTIMESTAMP","VALUE_TYPE","VIEW","WHILE","YEAR","AUTOCOMMIT","ISOLATION","LEVEL","OFFSET","SNAPSHOT","TRANSACTION","WORK","WRITE","ABORT","KEY","LAST","NORELY","NOVALIDATE","NULLS","RELY","VALIDATE","DETAIL","DOW","EXPRESSION","OPERATOR","QUARTER","SUMMARY","VECTORIZATION","WEEK","YEARS","MONTHS","WEEKS","DAYS","HOURS","MINUTES","SECONDS","TIMESTAMPTZ","ZONE"],reserved:["ALL","ALTER","AND","ARRAY","AS","AUTHORIZATION","BETWEEN","BIGINT","BINARY","BOOLEAN","BOTH","BY","CASE","CAST","CHAR","COLUMN","CONF","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIMESTAMP","CURSOR","DATABASE","DATE","DECIMAL","DELETE","DESCRIBE","DISTINCT","DOUBLE","DROP","ELSE","END","EXCHANGE","EXISTS","EXTENDED","EXTERNAL","FALSE","FETCH","FLOAT","FOLLOWING","FOR","FROM","FULL","FUNCTION","GRANT","GROUP","GROUPING","HAVING","IF","IMPORT","IN","INNER","INSERT","INT","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LESS","LIKE","LOCAL","MACRO","MAP","MORE","NONE","NOT","NULL","OF","ON","OR","ORDER","OUT","OUTER","OVER","PARTIALSCAN","PARTITION","PERCENT","PRECEDING","PRESERVE","PROCEDURE","RANGE","READS","REDUCE","REVOKE","RIGHT","ROLLUP","ROW","ROWS","SELECT","SET","SMALLINT","TABLE","TABLESAMPLE","THEN","TIMESTAMP","TO","TRANSFORM","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNION","UNIQUEJOIN","UPDATE","USER","USING","UTC_TMESTAMP","VALUES","VARCHAR","WHEN","WHERE","WINDOW","WITH","COMMIT","ONLY","REGEXP","RLIKE","ROLLBACK","START","CACHE","CONSTRAINT","FOREIGN","PRIMARY","REFERENCES","DAYOFWEEK","EXTRACT","FLOOR","INTEGER","PRECISION","VIEWS","TIME","NUMERIC","SYNC"],fileTypes:["TEXTFILE","SEQUENCEFILE","ORC","CSV","TSV","PARQUET","AVRO","RCFILE","JSONFILE","INPUTFORMAT","OUTPUTFORMAT"]}),ZS=P(["SELECT [ALL | DISTINCT]"]),QS=P(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT INTO [TABLE]","VALUES","UPDATE","SET","DELETE FROM","TRUNCATE [TABLE]","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT [VALUES]","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","RENAME TO","ALTER","CREATE","USE","DESCRIBE","DROP","FETCH","SET SCHEMA","SHOW","STORED AS","STORED BY","ROW FORMAT"]),qS=P(["UNION [ALL | DISTINCT]"]),jS=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","LEFT SEMI JOIN"]),zS=P(["{ROWS | RANGE} BETWEEN"]);class Et extends eE{tokenizer(){return new RE({reservedClauses:QS,reservedSelect:ZS,reservedSetOperations:qS,reservedJoins:jS,reservedPhrases:zS,reservedKeywords:kS,reservedFunctionNames:JS,extraParens:["[]"],stringTypes:['""-bs',"''-bs"],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||"]})}}const Tt=X({all:["ACCESSIBLE","ACCOUNT","ACTION","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALL","ALGORITHM","ALTER","ALWAYS","ANALYZE","AND","ANY","AS","ASC","ASCII","ASENSITIVE","AT","ATOMIC","AUTHORS","AUTO_INCREMENT","AUTOEXTEND_SIZE","AUTO","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BODY","BOOL","BOOLEAN","BOTH","BTREE","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHANGE","CHANGED","CHAR","CHARACTER","CHARSET","CHECK","CHECKPOINT","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLOB","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMN_NAME","COLUMNS","COLUMN_ADD","COLUMN_CHECK","COLUMN_CREATE","COLUMN_DELETE","COLUMN_GET","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPRESSED","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONTRIBUTORS","CONVERT","CPU","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_POS","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","CYCLE","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELETE_DOMAIN_ID","DESC","DESCRIBE","DES_KEY_FILE","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DO_DOMAIN_IDS","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","ELSIF","EMPTY","ENABLE","ENCLOSED","END","ENDS","ENGINE","ENGINES","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXAMINED","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXCEPTION","EXISTS","EXIT","EXPANSION","EXPIRE","EXPORT","EXPLAIN","EXTENDED","EXTENT_SIZE","FALSE","FAST","FAULTS","FEDERATED","FETCH","FIELDS","FILE","FIRST","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GET_FORMAT","GET","GLOBAL","GOTO","GRANT","GRANTS","GROUP","HANDLER","HARD","HASH","HAVING","HELP","HIGH_PRIORITY","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORED","IGNORE_DOMAIN_IDS","IGNORE_SERVER_IDS","IMMEDIATE","IMPORT","INTERSECT","IN","INCREMENT","INDEX","INDEXES","INFILE","INITIAL_SIZE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERVAL","INVISIBLE","INTO","IO","IO_THREAD","IPC","IS","ISOLATION","ISOPEN","ISSUER","ITERATE","INVOKER","JOIN","JSON","JSON_TABLE","KEY","KEYS","KEY_BLOCK_SIZE","KILL","LANGUAGE","LAST","LAST_VALUE","LASTVAL","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_GTID_POS","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_SERVER_ID","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_USER","MASTER_USE_GTID","MASTER_HEARTBEAT_PERIOD","MATCH","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_STATEMENT_TIME","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MAXVALUE","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUS","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONITOR","MONTH","MUTEX","MYSQL","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NESTED","NEVER","NEW","NEXT","NEXTVAL","NO","NOMAXVALUE","NOMINVALUE","NOCACHE","NOCYCLE","NO_WAIT","NOWAIT","NODEGROUP","NONE","NOT","NOTFOUND","NO_WRITE_TO_BINLOG","NULL","NUMBER","NUMERIC","NVARCHAR","OF","OFFSET","OLD_PASSWORD","ON","ONE","ONLINE","ONLY","OPEN","OPTIMIZE","OPTIONS","OPTION","OPTIONALLY","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OUTFILE","OVER","OVERLAPS","OWNER","PACKAGE","PACK_KEYS","PAGE","PAGE_CHECKSUM","PARSER","PARSE_VCOL_EXPR","PATH","PERIOD","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PERSISTENT","PHASE","PLUGIN","PLUGINS","PORT","PORTION","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PREVIOUS","PRIMARY","PRIVILEGES","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RAISE","RANGE","RAW","READ","READ_ONLY","READ_WRITE","READS","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDOFILE","REDUNDANT","REFERENCES","REGEXP","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEATABLE","REPLACE","REPLAY","REPLICA","REPLICAS","REPLICA_POS","REPLICATION","REPEAT","REQUIRE","RESET","RESIGNAL","RESTART","RESTORE","RESTRICT","RESUME","RETURNED_SQLSTATE","RETURN","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROW","ROWCOUNT","ROWNUM","ROWS","ROWTYPE","ROW_COUNT","ROW_FORMAT","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMA_NAME","SCHEMAS","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SEQUENCE","SERIAL","SERIALIZABLE","SESSION","SERVER","SET","SETVAL","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLAVES","SLAVE_POS","SLOW","SNAPSHOT","SMALLINT","SOCKET","SOFT","SOME","SONAME","SOUNDS","SOURCE","STAGE","STORED","SPATIAL","SPECIFIC","REF_SYSTEM_ID","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_SECOND","SQL_TSI_MINUTE","SQL_TSI_HOUR","SQL_TSI_DAY","SQL_TSI_WEEK","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_YEAR","SSL","START","STARTING","STARTS","STATEMENT","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STRAIGHT_JOIN","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSDATE","SYSTEM","SYSTEM_TIME","TABLE","TABLE_NAME","TABLES","TABLESPACE","TABLE_CHECKSUM","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRANSACTION","TRANSACTIONAL","THREADS","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO_BUFFER_SIZE","UNDOFILE","UNDO","UNICODE","UNION","UNIQUE","UNKNOWN","UNLOCK","UNINSTALL","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARCHAR2","VARIABLES","VARYING","VIA","VIEW","VIRTUAL","VISIBLE","VERSIONING","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","X509","XOR","XA","XML","YEAR","YEAR_MONTH","ZEROFILL"]}),et=X({all:["ADDDATE","ADD_MONTHS","BIT_AND","BIT_OR","BIT_XOR","CAST","COUNT","CUME_DIST","CURDATE","CURTIME","DATE_ADD","DATE_SUB","DATE_FORMAT","DECODE","DENSE_RANK","EXTRACT","FIRST_VALUE","GROUP_CONCAT","JSON_ARRAYAGG","JSON_OBJECTAGG","LAG","LEAD","MAX","MEDIAN","MID","MIN","NOW","NTH_VALUE","NTILE","POSITION","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","ROW_NUMBER","SESSION_USER","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUBDATE","SUBSTR","SUBSTRING","SUM","SYSTEM_USER","TRIM","TRIM_ORACLE","VARIANCE","VAR_POP","VAR_SAMP","ABS","ACOS","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ASIN","ATAN","ATAN2","BENCHMARK","BIN","BINLOG_GTID_POS","BIT_COUNT","BIT_LENGTH","CEIL","CEILING","CHARACTER_LENGTH","CHAR_LENGTH","CHR","COERCIBILITY","COLUMN_CHECK","COLUMN_EXISTS","COLUMN_LIST","COLUMN_JSON","COMPRESS","CONCAT","CONCAT_OPERATOR_ORACLE","CONCAT_WS","CONNECTION_ID","CONV","CONVERT_TZ","COS","COT","CRC32","DATEDIFF","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEGREES","DECODE_HISTOGRAM","DECODE_ORACLE","DES_DECRYPT","DES_ENCRYPT","ELT","ENCODE","ENCRYPT","EXP","EXPORT_SET","EXTRACTVALUE","FIELD","FIND_IN_SET","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GET_LOCK","GREATEST","HEX","IFNULL","INSTR","ISNULL","IS_FREE_LOCK","IS_USED_LOCK","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_COMPACT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_DETAILED","JSON_EXISTS","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_LOOSE","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_QUERY","JSON_QUOTE","JSON_OBJECT","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_SEARCH","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAST_DAY","LAST_INSERT_ID","LCASE","LEAST","LENGTH","LENGTHB","LN","LOAD_FILE","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LPAD_ORACLE","LTRIM","LTRIM_ORACLE","MAKEDATE","MAKETIME","MAKE_SET","MASTER_GTID_WAIT","MASTER_POS_WAIT","MD5","MONTHNAME","NAME_CONST","NVL","NVL2","OCT","OCTET_LENGTH","ORD","PERIOD_ADD","PERIOD_DIFF","PI","POW","POWER","QUOTE","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","RADIANS","RAND","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPLACE_ORACLE","REVERSE","ROUND","RPAD","RPAD_ORACLE","RTRIM","RTRIM_ORACLE","SEC_TO_TIME","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SPACE","SQRT","STRCMP","STR_TO_DATE","SUBSTR_ORACLE","SUBSTRING_INDEX","SUBTIME","SYS_GUID","TAN","TIMEDIFF","TIME_FORMAT","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_SECONDS","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UUID","UUID_SHORT","VERSION","WEEKDAY","WEEKOFYEAR","WSREP_LAST_WRITTEN_GTID","WSREP_LAST_SEEN_GTID","WSREP_SYNC_WAIT_UPTO_GTID","YEARWEEK","COALESCE","NULLIF","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","BIT","BINARY","BLOB","CHAR","NATIONAL CHAR","CHAR BYTE","ENUM","VARBINARY","VARCHAR","NATIONAL VARCHAR","TIME","DATETIME","TIMESTAMP","YEAR"]}),Rt=P(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),At=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","UPDATE [LOW_PRIORITY] [IGNORE]","SET","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","TRUNCATE [TABLE]","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]","ADD [COLUMN] [IF NOT EXISTS]","{CHANGE | MODIFY} [COLUMN] [IF EXISTS]","DROP [COLUMN] [IF EXISTS]","RENAME [TO]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","SET {VISIBLE | INVISIBLE}","ALTER DATABASE","ALTER DATABASE COMMENT","ALTER EVENT","ALTER FUNCTION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SCHEMA COMMENT","ALTER SEQUENCE","ALTER SERVER","ALTER USER","ALTER VIEW","ANALYZE","ANALYZE TABLE","BACKUP LOCK","BACKUP STAGE","BACKUP UNLOCK","BEGIN","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHECK TABLE","CHECK VIEW","CHECKSUM TABLE","COMMIT","CREATE AGGREGATE FUNCTION","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE INDEX","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE SERVER","CREATE SPATIAL INDEX","CREATE TRIGGER","CREATE UNIQUE INDEX","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DO","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP INDEX","DROP PREPARE","DROP PROCEDURE","DROP ROLE","DROP SEQUENCE","DROP SERVER","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GET DIAGNOSTICS","GET DIAGNOSTICS CONDITION","GRANT","HANDLER","HELP","INSTALL PLUGIN","INSTALL SONAME","KILL","LOAD DATA INFILE","LOAD INDEX INTO CACHE","LOAD XML INFILE","LOCK TABLE","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","PURGE MASTER LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","REPAIR VIEW","RESET MASTER","RESET QUERY CACHE","RESET REPLICA","RESET SLAVE","RESIGNAL","RETURNING","REVOKE","ROLLBACK","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET GLOBAL TRANSACTION","SET NAMES","SET PASSWORD","SET ROLE","SET STATEMENT","SET TRANSACTION","SHOW","SHOW ALL REPLICAS STATUS","SHOW ALL SLAVES STATUS","SHOW AUTHORS","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW BINLOG STATUS","SHOW CHARACTER SET","SHOW CLIENT_STATISTICS","SHOW COLLATION","SHOW COLUMNS","SHOW CONTRIBUTORS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PACKAGE","SHOW CREATE PACKAGE BODY","SHOW CREATE PROCEDURE","SHOW CREATE SEQUENCE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINE INNODB STATUS","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW EXPLAIN","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW INDEXES","SHOW INDEX_STATISTICS","SHOW KEYS","SHOW LOCALES","SHOW MASTER LOGS","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PACKAGE BODY CODE","SHOW PACKAGE BODY STATUS","SHOW PACKAGE STATUS","SHOW PLUGINS","SHOW PLUGINS SONAME","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW QUERY_RESPONSE_TIME","SHOW RELAYLOG EVENTS","SHOW REPLICA","SHOW REPLICA HOSTS","SHOW REPLICA STATUS","SHOW SCHEMAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW SLAVE STATUS","SHOW STATUS","SHOW STORAGE ENGINES","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW USER_STATISTICS","SHOW VARIABLES","SHOW WARNINGS","SHOW WSREP_MEMBERSHIP","SHOW WSREP_STATUS","SHUTDOWN","SIGNAL","START ALL REPLICAS","START ALL SLAVES","START REPLICA","START SLAVE","START TRANSACTION","STOP ALL REPLICAS","STOP ALL SLAVES","STOP REPLICA","STOP SLAVE","UNINSTALL PLUGIN","UNINSTALL SONAME","UNLOCK TABLE","USE","XA BEGIN","XA COMMIT","XA END","XA PREPARE","XA RECOVER","XA ROLLBACK","XA START"]),St=P(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]","MINUS [ALL | DISTINCT]"]),tt=P(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),It=P(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]);class Ot extends eE{tokenizer(){return new RE({reservedClauses:At,reservedSelect:Rt,reservedSetOperations:St,reservedJoins:tt,reservedPhrases:It,supportsXor:!0,reservedKeywords:Tt,reservedFunctionNames:et,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","&&","||","!"],postProcess:Nt})}}function Nt(T){return T.map((E,e)=>{const R=T[e+1]||ZE;return yE.SET(E)&&R.text==="("?{...E,type:_.RESERVED_FUNCTION_NAME}:E})}const rt=X({all:["ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALL","ALTER","ALWAYS","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASCII","ASENSITIVE","AT","ATTRIBUTE","AUTHENTICATION","AUTOEXTEND_SIZE","AUTO_INCREMENT","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BOOL","BOOLEAN","BOTH","BTREE","BUCKETS","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHALLENGE_RESPONSE","CHANGE","CHANGED","CHANNEL","CHAR","CHARACTER","CHARSET","CHECK","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLONE","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMNS","COLUMN_FORMAT","COLUMN_NAME","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPONENT","COMPRESSED","COMPRESSION","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONVERT","CPU","CREATE","CROSS","CUBE","CUME_DIST","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULT_AUTH","DEFINER","DEFINITION","DELAYED","DELAY_KEY_WRITE","DELETE","DENSE_RANK","DESC","DESCRIBE","DESCRIPTION","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","EMPTY","ENABLE","ENCLOSED","ENCRYPTION","END","ENDS","ENFORCED","ENGINE","ENGINES","ENGINE_ATTRIBUTE","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXISTS","EXIT","EXPANSION","EXPIRE","EXPLAIN","EXPORT","EXTENDED","EXTENT_SIZE","FACTOR","FAILED_LOGIN_ATTEMPTS","FALSE","FAST","FAULTS","FETCH","FIELDS","FILE","FILE_BLOCK_SIZE","FILTER","FINISH","FIRST","FIRST_VALUE","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GEOMCOLLECTION","GEOMETRY","GEOMETRYCOLLECTION","GET","GET_FORMAT","GET_MASTER_PUBLIC_KEY","GET_SOURCE_PUBLIC_KEY","GLOBAL","GRANT","GRANTS","GROUP","GROUPING","GROUPS","GROUP_REPLICATION","GTID_ONLY","HANDLER","HASH","HAVING","HELP","HIGH_PRIORITY","HISTOGRAM","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORE_SERVER_IDS","IMPORT","IN","INACTIVE","INDEX","INDEXES","INFILE","INITIAL","INITIAL_SIZE","INITIATE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INSTANCE","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERSECT","INTERVAL","INTO","INVISIBLE","INVOKER","IO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IO_THREAD","IPC","IS","ISOLATION","ISSUER","ITERATE","JOIN","JSON","JSON_TABLE","JSON_VALUE","KEY","KEYRING","KEYS","KEY_BLOCK_SIZE","KILL","LAG","LANGUAGE","LAST","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LINESTRING","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_AUTO_POSITION","MASTER_BIND","MASTER_COMPRESSION_ALGORITHMS","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_PUBLIC_KEY_PATH","MASTER_RETRY_COUNT","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_TLS_CIPHERSUITES","MASTER_TLS_VERSION","MASTER_USER","MASTER_ZSTD_COMPRESSION_LEVEL","MATCH","MAXVALUE","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONTH","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NDB","NDBCLUSTER","NESTED","NETWORK_NAMESPACE","NEVER","NEW","NEXT","NO","NODEGROUP","NONE","NOT","NOWAIT","NO_WAIT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","NULLS","NUMBER","NUMERIC","NVARCHAR","OF","OFF","OFFSET","OJ","OLD","ON","ONE","ONLY","OPEN","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONAL","OPTIONALLY","OPTIONS","OR","ORDER","ORDINALITY","ORGANIZATION","OTHERS","OUT","OUTER","OUTFILE","OVER","OWNER","PACK_KEYS","PAGE","PARSER","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PASSWORD_LOCK_TIME","PATH","PERCENT_RANK","PERSIST","PERSIST_ONLY","PHASE","PLUGIN","PLUGINS","PLUGIN_DIR","POINT","POLYGON","PORT","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PRIMARY","PRIVILEGES","PRIVILEGE_CHECKS_USER","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RANDOM","RANGE","RANK","READ","READS","READ_ONLY","READ_WRITE","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDUNDANT","REFERENCE","REFERENCES","REGEXP","REGISTRATION","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEAT","REPEATABLE","REPLACE","REPLICA","REPLICAS","REPLICATE_DO_DB","REPLICATE_DO_TABLE","REPLICATE_IGNORE_DB","REPLICATE_IGNORE_TABLE","REPLICATE_REWRITE_DB","REPLICATE_WILD_DO_TABLE","REPLICATE_WILD_IGNORE_TABLE","REPLICATION","REQUIRE","REQUIRE_ROW_FORMAT","RESET","RESIGNAL","RESOURCE","RESPECT","RESTART","RESTORE","RESTRICT","RESUME","RETAIN","RETURN","RETURNED_SQLSTATE","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROTATE","ROUTINE","ROW","ROWS","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMAS","SCHEMA_NAME","SECOND","SECONDARY","SECONDARY_ENGINE","SECONDARY_ENGINE_ATTRIBUTE","SECONDARY_LOAD","SECONDARY_UNLOAD","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SERIAL","SERIALIZABLE","SERVER","SESSION","SET","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLOW","SMALLINT","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SOURCE_AUTO_POSITION","SOURCE_BIND","SOURCE_COMPRESSION_ALGORITHMS","SOURCE_CONNECT_RETRY","SOURCE_DELAY","SOURCE_HEARTBEAT_PERIOD","SOURCE_HOST","SOURCE_LOG_FILE","SOURCE_LOG_POS","SOURCE_PASSWORD","SOURCE_PORT","SOURCE_PUBLIC_KEY_PATH","SOURCE_RETRY_COUNT","SOURCE_SSL","SOURCE_SSL_CA","SOURCE_SSL_CAPATH","SOURCE_SSL_CERT","SOURCE_SSL_CIPHER","SOURCE_SSL_CRL","SOURCE_SSL_CRLPATH","SOURCE_SSL_KEY","SOURCE_SSL_VERIFY_SERVER_CERT","SOURCE_TLS_CIPHERSUITES","SOURCE_TLS_VERSION","SOURCE_USER","SOURCE_ZSTD_COMPRESSION_LEVEL","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","SSL","STACKED","START","STARTING","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STORED","STRAIGHT_JOIN","STREAM","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSTEM","TABLE","TABLES","TABLESPACE","TABLE_CHECKSUM","TABLE_NAME","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","THREAD_PRIORITY","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TLS","TO","TRAILING","TRANSACTION","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNDOFILE","UNDO_BUFFER_SIZE","UNICODE","UNINSTALL","UNION","UNIQUE","UNKNOWN","UNLOCK","UNREGISTER","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALIDATION","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARYING","VCPU","VIEW","VIRTUAL","VISIBLE","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHOUT","WORK","WRAPPER","WRITE","X509","XA","XID","XML","XOR","YEAR","YEAR_MONTH","ZEROFILL","ZONE"]}),st=X({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BINARY","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","CAN_ACCESS_COLUMN","CAN_ACCESS_DATABASE","CAN_ACCESS_TABLE","CAN_ACCESS_USER","CAN_ACCESS_VIEW","CAST","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEFAULT","DEGREES","DENSE_RANK","DIV","ELT","EXP","EXPORT_SET","EXTRACT","EXTRACTVALUE","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_PICO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_DD_COLUMN_PRIVILEGES","GET_DD_CREATE_OPTIONS","GET_DD_INDEX_SUB_PART_LENGTH","GET_FORMAT","GET_LOCK","GREATEST","GROUP_CONCAT","GROUPING","GTID_SUBSET","GTID_SUBTRACT","HEX","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INSERT","INSTR","INTERNAL_AUTO_INCREMENT","INTERNAL_AVG_ROW_LENGTH","INTERNAL_CHECK_TIME","INTERNAL_CHECKSUM","INTERNAL_DATA_FREE","INTERNAL_DATA_LENGTH","INTERNAL_DD_CHAR_LENGTH","INTERNAL_GET_COMMENT_OR_ERROR","INTERNAL_GET_ENABLED_ROLE_JSON","INTERNAL_GET_HOSTNAME","INTERNAL_GET_USERNAME","INTERNAL_GET_VIEW_WARNING_OR_ERROR","INTERNAL_INDEX_COLUMN_CARDINALITY","INTERNAL_INDEX_LENGTH","INTERNAL_IS_ENABLED_ROLE","INTERNAL_IS_MANDATORY_ROLE","INTERNAL_KEYS_DISABLED","INTERNAL_MAX_DATA_LENGTH","INTERNAL_TABLE_ROWS","INTERNAL_UPDATE_TIME","INTERVAL","IS","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS NOT","IS NOT NULL","IS NULL","IS_USED_LOCK","IS_UUID","ISNULL","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_ARRAYAGG","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SCHEMA_VALID","JSON_SCHEMA_VALIDATION_REPORT","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TABLE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LINESTRING","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MATCH","MAX","MBRCONTAINS","MBRCOVEREDBY","MBRCOVERS","MBRDISJOINT","MBREQUALS","MBRINTERSECTS","MBROVERLAPS","MBRTOUCHES","MBRWITHIN","MD5","MEMBER OF","MICROSECOND","MID","MIN","MINUTE","MOD","MONTH","MONTHNAME","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","NAME_CONST","NOT","NOT IN","NOT LIKE","NOT REGEXP","NOW","NTH_VALUE","NTILE","NULLIF","OCT","OCTET_LENGTH","ORD","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","POINT","POLYGON","POSITION","POW","POWER","PS_CURRENT_THREAD_ID","PS_THREAD_ID","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROLES_GRAPHML","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_BUFFER","ST_BUFFER_STRATEGY","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_CONVEXHULL","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DISTANCE_SPHERE","ST_ENDPOINT","ST_ENVELOPE","ST_EQUALS","ST_EXTERIORRING","ST_FRECHETDISTANCE","ST_GEOHASH","ST_GEOMCOLLFROMTEXT","ST_GEOMCOLLFROMWKB","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMGEOJSON","ST_GEOMFROMTEXT","ST_GEOMFROMWKB","ST_HAUSDORFFDISTANCE","ST_INTERIORRINGN","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISSIMPLE","ST_ISVALID","ST_LATFROMGEOHASH","ST_LATITUDE","ST_LENGTH","ST_LINEFROMTEXT","ST_LINEFROMWKB","ST_LINEINTERPOLATEPOINT","ST_LINEINTERPOLATEPOINTS","ST_LONGFROMGEOHASH","ST_LONGITUDE","ST_MAKEENVELOPE","ST_MLINEFROMTEXT","ST_MLINEFROMWKB","ST_MPOINTFROMTEXT","ST_MPOINTFROMWKB","ST_MPOLYFROMTEXT","ST_MPOLYFROMWKB","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINTATDISTANCE","ST_POINTFROMGEOHASH","ST_POINTFROMTEXT","ST_POINTFROMWKB","ST_POINTN","ST_POLYFROMTEXT","ST_POLYFROMWKB","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SWAPXY","ST_SYMDIFFERENCE","ST_TOUCHES","ST_TRANSFORM","ST_UNION","ST_VALIDATE","ST_WITHIN","ST_X","ST_Y","STATEMENT_DIGEST","STATEMENT_DIGEST_TEXT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRIM","TRUNCATE","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VALUES","VAR_POP","VAR_SAMP","VARIANCE","VERSION","WAIT_FOR_EXECUTED_GTID_SET","WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]}),nt=P(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),_t=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","UPDATE [LOW_PRIORITY] [IGNORE]","SET","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","TRUNCATE [TABLE]","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] TABLE [IF NOT EXISTS]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","ALTER DATABASE","ALTER EVENT","ALTER FUNCTION","ALTER INSTANCE","ALTER LOGFILE GROUP","ALTER PROCEDURE","ALTER RESOURCE GROUP","ALTER SERVER","ALTER TABLESPACE","ALTER USER","ALTER VIEW","ANALYZE TABLE","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK TABLE","CHECKSUM TABLE","CLONE","COMMIT","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE FUNCTION","CREATE INDEX","CREATE LOGFILE GROUP","CREATE PROCEDURE","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SERVER","CREATE SPATIAL REFERENCE SYSTEM","CREATE TABLESPACE","CREATE TRIGGER","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DO","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP FUNCTION","DROP INDEX","DROP LOGFILE GROUP","DROP PROCEDURE","DROP RESOURCE GROUP","DROP ROLE","DROP SERVER","DROP SPATIAL REFERENCE SYSTEM","DROP TABLESPACE","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GRANT","HANDLER","HELP","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SOURCE_POS_WAIT","START GROUP_REPLICATION","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP REPLICA","STOP SLAVE","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),at=P(["UNION [ALL | DISTINCT]"]),Ct=P(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),Lt=P(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]);class it extends eE{tokenizer(){return new RE({reservedClauses:_t,reservedSelect:nt,reservedSetOperations:at,reservedJoins:Ct,reservedPhrases:Lt,supportsXor:!0,reservedKeywords:rt,reservedFunctionNames:st,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!"],postProcess:ot})}}function ot(T){return T.map((E,e)=>{const R=T[e+1]||ZE;return yE.SET(E)&&R.text==="("?{...E,type:_.RESERVED_FUNCTION_NAME}:E})}const Pt=X({all:["ABORT","ABS","ACOS","ADVISOR","ARRAY_AGG","ARRAY_AGG","ARRAY_APPEND","ARRAY_AVG","ARRAY_BINARY_SEARCH","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COUNT","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_FLATTEN","ARRAY_IFNULL","ARRAY_INSERT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_MAX","ARRAY_MIN","ARRAY_MOVE","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUT","ARRAY_RANGE","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_REPLACE","ARRAY_REVERSE","ARRAY_SORT","ARRAY_STAR","ARRAY_SUM","ARRAY_SYMDIFF","ARRAY_SYMDIFF1","ARRAY_SYMDIFFN","ARRAY_UNION","ASIN","ATAN","ATAN2","AVG","BASE64","BASE64_DECODE","BASE64_ENCODE","BITAND ","BITCLEAR ","BITNOT ","BITOR ","BITSET ","BITSHIFT ","BITTEST ","BITXOR ","CEIL","CLOCK_LOCAL","CLOCK_MILLIS","CLOCK_STR","CLOCK_TZ","CLOCK_UTC","COALESCE","CONCAT","CONCAT2","CONTAINS","CONTAINS_TOKEN","CONTAINS_TOKEN_LIKE","CONTAINS_TOKEN_REGEXP","COS","COUNT","COUNT","COUNTN","CUME_DIST","CURL","DATE_ADD_MILLIS","DATE_ADD_STR","DATE_DIFF_MILLIS","DATE_DIFF_STR","DATE_FORMAT_STR","DATE_PART_MILLIS","DATE_PART_STR","DATE_RANGE_MILLIS","DATE_RANGE_STR","DATE_TRUNC_MILLIS","DATE_TRUNC_STR","DECODE","DECODE_JSON","DEGREES","DENSE_RANK","DURATION_TO_STR","ENCODED_SIZE","ENCODE_JSON","EXP","FIRST_VALUE","FLOOR","GREATEST","HAS_TOKEN","IFINF","IFMISSING","IFMISSINGORNULL","IFNAN","IFNANORINF","IFNULL","INITCAP","ISARRAY","ISATOM","ISBITSET","ISBOOLEAN","ISNUMBER","ISOBJECT","ISSTRING","LAG","LAST_VALUE","LEAD","LEAST","LENGTH","LN","LOG","LOWER","LTRIM","MAX","MEAN","MEDIAN","META","MILLIS","MILLIS_TO_LOCAL","MILLIS_TO_STR","MILLIS_TO_TZ","MILLIS_TO_UTC","MILLIS_TO_ZONE_NAME","MIN","MISSINGIF","NANIF","NEGINFIF","NOW_LOCAL","NOW_MILLIS","NOW_STR","NOW_TZ","NOW_UTC","NTH_VALUE","NTILE","NULLIF","NVL","NVL2","OBJECT_ADD","OBJECT_CONCAT","OBJECT_INNER_PAIRS","OBJECT_INNER_VALUES","OBJECT_LENGTH","OBJECT_NAMES","OBJECT_PAIRS","OBJECT_PUT","OBJECT_REMOVE","OBJECT_RENAME","OBJECT_REPLACE","OBJECT_UNWRAP","OBJECT_VALUES","PAIRS","PERCENT_RANK","PI","POLY_LENGTH","POSINFIF","POSITION","POWER","RADIANS","RANDOM","RANK","RATIO_TO_REPORT","REGEXP_CONTAINS","REGEXP_LIKE","REGEXP_MATCHES","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGEX_CONTAINS","REGEX_LIKE","REGEX_MATCHES","REGEX_POSITION","REGEX_REPLACE","REGEX_SPLIT","REPEAT","REPLACE","REVERSE","ROUND","ROW_NUMBER","RTRIM","SEARCH","SEARCH_META","SEARCH_SCORE","SIGN","SIN","SPLIT","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DURATION","STR_TO_MILLIS","STR_TO_TZ","STR_TO_UTC","STR_TO_ZONE_NAME","SUBSTR","SUFFIXES","SUM","TAN","TITLE","TOARRAY","TOATOM","TOBOOLEAN","TOKENS","TOKENS","TONUMBER","TOOBJECT","TOSTRING","TRIM","TRUNC","UPPER","UUID","VARIANCE","VARIANCE_POP","VARIANCE_SAMP","VAR_POP","VAR_SAMP","WEEKDAY_MILLIS","WEEKDAY_STR","CAST"]}),Dt=X({all:["ADVISE","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","BEGIN","BETWEEN","BINARY","BOOLEAN","BREAK","BUCKET","BUILD","BY","CALL","CASE","CAST","CLUSTER","COLLATE","COLLECTION","COMMIT","COMMITTED","CONNECT","CONTINUE","CORRELATED","COVER","CREATE","CURRENT","DATABASE","DATASET","DATASTORE","DECLARE","DECREMENT","DELETE","DERIVED","DESC","DESCRIBE","DISTINCT","DO","DROP","EACH","ELEMENT","ELSE","END","EVERY","EXCEPT","EXCLUDE","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FILTER","FIRST","FLATTEN","FLUSH","FOLLOWING","FOR","FORCE","FROM","FTS","FUNCTION","GOLANG","GRANT","GROUP","GROUPS","GSI","HASH","HAVING","IF","ISOLATION","IGNORE","ILIKE","IN","INCLUDE","INCREMENT","INDEX","INFER","INLINE","INNER","INSERT","INTERSECT","INTO","IS","JAVASCRIPT","JOIN","KEY","KEYS","KEYSPACE","KNOWN","LANGUAGE","LAST","LEFT","LET","LETTING","LEVEL","LIKE","LIMIT","LSM","MAP","MAPPING","MATCHED","MATERIALIZED","MERGE","MINUS","MISSING","NAMESPACE","NEST","NL","NO","NOT","NTH_VALUE","NULL","NULLS","NUMBER","OBJECT","OFFSET","ON","OPTION","OPTIONS","OR","ORDER","OTHERS","OUTER","OVER","PARSE","PARTITION","PASSWORD","PATH","POOL","PRECEDING","PREPARE","PRIMARY","PRIVATE","PRIVILEGE","PROBE","PROCEDURE","PUBLIC","RANGE","RAW","REALM","REDUCE","RENAME","RESPECT","RETURN","RETURNING","REVOKE","RIGHT","ROLE","ROLLBACK","ROW","ROWS","SATISFIES","SAVEPOINT","SCHEMA","SCOPE","SELECT","SELF","SEMI","SET","SHOW","SOME","START","STATISTICS","STRING","SYSTEM","THEN","TIES","TO","TRAN","TRANSACTION","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNDER","UNION","UNIQUE","UNKNOWN","UNNEST","UNSET","UPDATE","UPSERT","USE","USER","USING","VALIDATE","VALUE","VALUED","VALUES","VIA","VIEW","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WORK","XOR"]}),Mt=P(["SELECT [ALL | DISTINCT]"]),lt=P(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","UPDATE","SET","DELETE FROM","MERGE INTO","WHEN [NOT] MATCHED THEN","UPDATE SET","INSERT","ADVISE","ALTER INDEX","BEGIN TRANSACTION","BUILD INDEX","COMMIT TRANSACTION","CREATE COLLECTION","CREATE FUNCTION","CREATE INDEX","CREATE PRIMARY INDEX","CREATE SCOPE","DROP COLLECTION","DROP FUNCTION","DROP INDEX","DROP PRIMARY INDEX","DROP SCOPE","EXECUTE","EXECUTE FUNCTION","EXPLAIN","GRANT","INFER","PREPARE","RETURNING","REVOKE","ROLLBACK TRANSACTION","SAVEPOINT","SET TRANSACTION","UPDATE STATISTICS","UPSERT","LET","NEST","SET CURRENT SCHEMA","SET SCHEMA","SHOW","UNNEST","USE KEYS"]),Ut=P(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),ct=P(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","INNER JOIN"]),ut=P(["{ROWS | RANGE | GROUPS} BETWEEN"]);class dt extends eE{tokenizer(){return new RE({reservedClauses:lt,reservedSelect:Mt,reservedSetOperations:Ut,reservedJoins:ct,reservedPhrases:ut,supportsXor:!0,reservedKeywords:Dt,reservedFunctionNames:Pt,stringTypes:['""-bs',"''-bs"],identTypes:["``"],extraParens:["[]","{}"],paramTypes:{positional:!0,numbered:["$"],named:["$"]},lineCommentTypes:["#","--"],operators:["%","==",":","||"]})}}const Gt=X({all:["ADD","AGENT","AGGREGATE","ALL","ALTER","AND","ANY","ARRAY","ARROW","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BEGIN","BETWEEN","BFILE_BASE","BINARY","BLOB_BASE","BLOCK","BODY","BOTH","BOUND","BULK","BY","BYTE","CALL","CALLING","CASCADE","CASE","CHAR","CHAR_BASE","CHARACTER","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOB_BASE","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONVERT","COUNT","CRASH","CREATE","CURRENT","CURSOR","CUSTOMDATUM","DANGLING","DATA","DATE","DATE_BASE","DAY","DECIMAL","DECLARE","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DISTINCT","DOUBLE","DROP","DURATION","ELEMENT","ELSE","ELSIF","EMPTY","END","ESCAPE","EXCEPT","EXCEPTION","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FINAL","FIXED","FLOAT","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HAVING","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSERT","INSTANTIABLE","INT","INTERFACE","INTERSECT","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMIT","LIMITED","LOCAL","LOCK","LONG","LOOP","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MOD","MODE","MODIFY","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NCHAR","NEW","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","NUMBER_BASE","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","OR","ORACLE","ORADATA","ORDER","OVERLAPS","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARTITION","PASCAL","PIPE","PIPELINED","PRAGMA","PRECISION","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","RAW","READ","RECORD","REF","REFERENCE","REM","REMAINDER","RENAME","RESOURCE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELECT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SET","SHARE","SHORT","SIZE","SIZE_T","SOME","SPARSE","SQL","SQLCODE","SQLDATA","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUM","SYNONYM","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMESTAMP","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSAC","TRANSACTIONAL","TRUSTED","TYPE","UB1","UB2","UB4","UNDER","UNION","UNIQUE","UNSIGNED","UNTRUSTED","UPDATE","USE","USING","VALIST","VALUE","VALUES","VARIABLE","VARIANCE","VARRAY","VARYING","VIEW","VIEWS","VOID","WHEN","WHERE","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"]}),ft=X({numeric:["ABS","ACOS","ASIN","ATAN","ATAN2","BITAND","CEIL","COS","COSH","EXP","FLOOR","LN","LOG","MOD","NANVL","POWER","REMAINDER","ROUND","SIGN","SIN","SINH","SQRT","TAN","TANH","TRUNC","WIDTH_BUCKET"],character:["CHR","CONCAT","INITCAP","LOWER","LPAD","LTRIM","NLS_INITCAP","NLS_LOWER","NLSSORT","NLS_UPPER","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","RPAD","RTRIM","SOUNDEX","SUBSTR","TRANSLATE","TREAT","TRIM","UPPER","NLS_CHARSET_DECL_LEN","NLS_CHARSET_ID","NLS_CHARSET_NAME","ASCII","INSTR","LENGTH","REGEXP_INSTR"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_TIMESTAMP","DBTIMEZONE","EXTRACT","FROM_TZ","LAST_DAY","LOCALTIMESTAMP","MONTHS_BETWEEN","NEW_TIME","NEXT_DAY","NUMTODSINTERVAL","NUMTOYMINTERVAL","ROUND","SESSIONTIMEZONE","SYS_EXTRACT_UTC","SYSDATE","SYSTIMESTAMP","TO_CHAR","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_DSINTERVAL","TO_YMINTERVAL","TRUNC","TZ_OFFSET"],comparison:["GREATEST","LEAST"],conversion:["ASCIISTR","BIN_TO_NUM","CAST","CHARTOROWID","COMPOSE","CONVERT","DECOMPOSE","HEXTORAW","NUMTODSINTERVAL","NUMTOYMINTERVAL","RAWTOHEX","RAWTONHEX","ROWIDTOCHAR","ROWIDTONCHAR","SCN_TO_TIMESTAMP","TIMESTAMP_TO_SCN","TO_BINARY_DOUBLE","TO_BINARY_FLOAT","TO_CHAR","TO_CLOB","TO_DATE","TO_DSINTERVAL","TO_LOB","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_DSINTERVAL","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_YMINTERVAL","TO_YMINTERVAL","TRANSLATE","UNISTR"],largeObject:["BFILENAME","EMPTY_BLOB,","EMPTY_CLOB"],collection:["CARDINALITY","COLLECT","POWERMULTISET","POWERMULTISET_BY_CARDINALITY","SET"],hierarchical:["SYS_CONNECT_BY_PATH"],dataMining:["CLUSTER_ID","CLUSTER_PROBABILITY","CLUSTER_SET","FEATURE_ID","FEATURE_SET","FEATURE_VALUE","PREDICTION","PREDICTION_COST","PREDICTION_DETAILS","PREDICTION_PROBABILITY","PREDICTION_SET"],xml:["APPENDCHILDXML","DELETEXML","DEPTH","EXTRACT","EXISTSNODE","EXTRACTVALUE","INSERTCHILDXML","INSERTXMLBEFORE","PATH","SYS_DBURIGEN","SYS_XMLAGG","SYS_XMLGEN","UPDATEXML","XMLAGG","XMLCDATA","XMLCOLATTVAL","XMLCOMMENT","XMLCONCAT","XMLFOREST","XMLPARSE","XMLPI","XMLQUERY","XMLROOT","XMLSEQUENCE","XMLSERIALIZE","XMLTABLE","XMLTRANSFORM"],encoding:["DECODE","DUMP","ORA_HASH","VSIZE"],nullRelated:["COALESCE","LNNVL","NULLIF","NVL","NVL2"],env:["SYS_CONTEXT","SYS_GUID","SYS_TYPEID","UID","USER","USERENV"],aggregate:["AVG","COLLECT","CORR","CORR_S","CORR_K","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","FIRST","GROUP_ID","GROUPING","GROUPING_ID","LAST","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANK","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","STATS_BINOMIAL_TEST","STATS_CROSSTAB","STATS_F_TEST","STATS_KS_TEST","STATS_MODE","STATS_MW_TEST","STATS_ONE_WAY_ANOVA","STATS_T_TEST_ONE","STATS_T_TEST_PAIRED","STATS_T_TEST_INDEP","STATS_T_TEST_INDEPU","STATS_WSR_TEST","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTILE","RATIO_TO_REPORT","ROW_NUMBER"],objectReference:["DEREF","MAKE_REF","REF","REFTOHEX","VALUE"],model:["CV","ITERATION_NUMBER","PRESENTNNV","PRESENTV","PREVIOUS"],dataTypes:["VARCHAR2","NVARCHAR2","NUMBER","FLOAT","TIMESTAMP","INTERVAL YEAR","INTERVAL DAY","RAW","UROWID","NCHAR","CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","NATIONAL CHARACTER","NATIONAL CHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NUMERIC","DECIMAL","FLOAT","VARCHAR"]}),pt=P(["SELECT [ALL | DISTINCT | UNIQUE]"]),ht=P(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE","INSERT [INTO | ALL INTO]","VALUES","UPDATE [ONLY]","SET","DELETE FROM [ONLY]","TRUNCATE TABLE","MERGE [INTO]","WHEN [NOT] MATCHED [THEN]","UPDATE SET","CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW","CREATE MATERIALIZED VIEW","CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE","DROP TABLE","ALTER TABLE","ADD","DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}","MODIFY","RENAME TO","RENAME COLUMN","BEGIN","CONNECT BY","DECLARE","EXCEPT","EXCEPTION","LOOP","RETURNING","START WITH","SET SCHEMA"]),Ht=P(["UNION [ALL]","EXCEPT","INTERSECT"]),mt=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | OUTER} APPLY"]),Bt=P(["ON {UPDATE | DELETE} [SET NULL]","ON COMMIT","{ROWS | RANGE} BETWEEN"]);class Yt extends eE{tokenizer(){return new RE({reservedClauses:ht,reservedSelect:pt,reservedSetOperations:Ht,reservedJoins:mt,reservedPhrases:Bt,supportsXor:!0,reservedKeywords:Gt,reservedFunctionNames:ft,stringTypes:[{quote:"''-qq",prefixes:["N"]},{quote:"q''",prefixes:["N"]}],identTypes:['""-qq'],identChars:{rest:"$#"},variableTypes:[{regex:"&{1,2}[A-Za-z][A-Za-z0-9_$#]*"}],paramTypes:{numbered:[":"],named:[":"]},paramChars:{},operators:["**",":=","%","~=","^=",">>","<<","=>","@","||"],postProcess:Ft})}formatOptions(){return{alwaysDenseOperators:["@"]}}}function Ft(T){let E=ZE;return T.map(e=>yE.SET(e)&&yE.BY(E)?{...e,type:_.RESERVED_KEYWORD}:(sR(e.type)&&(E=e),e))}const Vt=X({math:["ABS","ACOS","ACOSD","ACOSH","ASIN","ASIND","ASINH","ATAN","ATAN2","ATAN2D","ATAND","ATANH","CBRT","CEIL","CEILING","COS","COSD","COSH","COT","COTD","DEGREES","DIV","EXP","FACTORIAL","FLOOR","GCD","LCM","LN","LOG","LOG10","MIN_SCALE","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SCALE","SETSEED","SIGN","SIN","SIND","SINH","SQRT","TAN","TAND","TANH","TRIM_SCALE","TRUNC","WIDTH_BUCKET"],string:["ABS","ASCII","BIT_LENGTH","BTRIM","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CONCAT","CONCAT_WS","FORMAT","INITCAP","LEFT","LENGTH","LOWER","LPAD","LTRIM","MD5","NORMALIZE","OCTET_LENGTH","OVERLAY","PARSE_IDENT","PG_CLIENT_ENCODING","POSITION","QUOTE_IDENT","QUOTE_LITERAL","QUOTE_NULLABLE","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REPEAT","REPLACE","REVERSE","RIGHT","RPAD","RTRIM","SPLIT_PART","SPRINTF","STARTS_WITH","STRING_AGG","STRING_TO_ARRAY","STRING_TO_TABLE","STRPOS","SUBSTR","SUBSTRING","TO_ASCII","TO_HEX","TRANSLATE","TRIM","UNISTR","UPPER"],binary:["BIT_COUNT","BIT_LENGTH","BTRIM","CONVERT","CONVERT_FROM","CONVERT_TO","DECODE","ENCODE","GET_BIT","GET_BYTE","LENGTH","LTRIM","MD5","OCTET_LENGTH","OVERLAY","POSITION","RTRIM","SET_BIT","SET_BYTE","SHA224","SHA256","SHA384","SHA512","STRING_AGG","SUBSTR","SUBSTRING","TRIM"],bitstring:["BIT_COUNT","BIT_LENGTH","GET_BIT","LENGTH","OCTET_LENGTH","OVERLAY","POSITION","SET_BIT","SUBSTRING"],pattern:["REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE"],datatype:["TO_CHAR","TO_DATE","TO_NUMBER","TO_TIMESTAMP"],datetime:["CLOCK_TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_BIN","DATE_PART","DATE_TRUNC","EXTRACT","ISFINITE","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","LOCALTIME","LOCALTIMESTAMP","MAKE_DATE","MAKE_INTERVAL","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","NOW","PG_SLEEP","PG_SLEEP_FOR","PG_SLEEP_UNTIL","STATEMENT_TIMESTAMP","TIMEOFDAY","TO_TIMESTAMP","TRANSACTION_TIMESTAMP"],enum:["ENUM_FIRST","ENUM_LAST","ENUM_RANGE"],geometry:["AREA","BOUND_BOX","BOX","CENTER","CIRCLE","DIAGONAL","DIAMETER","HEIGHT","ISCLOSED","ISOPEN","LENGTH","LINE","LSEG","NPOINTS","PATH","PCLOSE","POINT","POLYGON","POPEN","RADIUS","SLOPE","WIDTH"],network:["ABBREV","BROADCAST","FAMILY","HOST","HOSTMASK","INET_MERGE","INET_SAME_FAMILY","MACADDR8_SET7BIT","MASKLEN","NETMASK","NETWORK","SET_MASKLEN","TEXT","TRUNC"],textsearch:["ARRAY_TO_TSVECTOR","GET_CURRENT_TS_CONFIG","JSONB_TO_TSVECTOR","JSON_TO_TSVECTOR","LENGTH","NUMNODE","PHRASETO_TSQUERY","PLAINTO_TSQUERY","QUERYTREE","SETWEIGHT","STRIP","TO_TSQUERY","TO_TSVECTOR","TSQUERY_PHRASE","TSVECTOR_TO_ARRAY","TS_DEBUG","TS_DELETE","TS_FILTER","TS_HEADLINE","TS_LEXIZE","TS_PARSE","TS_RANK","TS_RANK_CD","TS_REWRITE","TS_STAT","TS_TOKEN_TYPE","WEBSEARCH_TO_TSQUERY"],uuid:["UUID"],xml:["CURSOR_TO_XML","CURSOR_TO_XMLSCHEMA","DATABASE_TO_XML","DATABASE_TO_XMLSCHEMA","DATABASE_TO_XML_AND_XMLSCHEMA","NEXTVAL","QUERY_TO_XML","QUERY_TO_XMLSCHEMA","QUERY_TO_XML_AND_XMLSCHEMA","SCHEMA_TO_XML","SCHEMA_TO_XMLSCHEMA","SCHEMA_TO_XML_AND_XMLSCHEMA","STRING","TABLE_TO_XML","TABLE_TO_XMLSCHEMA","TABLE_TO_XML_AND_XMLSCHEMA","XMLAGG","XMLCOMMENT","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","XML_IS_WELL_FORMED","XML_IS_WELL_FORMED_CONTENT","XML_IS_WELL_FORMED_DOCUMENT","XPATH","XPATH_EXISTS"],json:["ARRAY_TO_JSON","JSONB_AGG","JSONB_ARRAY_ELEMENTS","JSONB_ARRAY_ELEMENTS_TEXT","JSONB_ARRAY_LENGTH","JSONB_BUILD_ARRAY","JSONB_BUILD_OBJECT","JSONB_EACH","JSONB_EACH_TEXT","JSONB_EXTRACT_PATH","JSONB_EXTRACT_PATH_TEXT","JSONB_INSERT","JSONB_OBJECT","JSONB_OBJECT_AGG","JSONB_OBJECT_KEYS","JSONB_PATH_EXISTS","JSONB_PATH_EXISTS_TZ","JSONB_PATH_MATCH","JSONB_PATH_MATCH_TZ","JSONB_PATH_QUERY","JSONB_PATH_QUERY_ARRAY","JSONB_PATH_QUERY_ARRAY_TZ","JSONB_PATH_QUERY_FIRST","JSONB_PATH_QUERY_FIRST_TZ","JSONB_PATH_QUERY_TZ","JSONB_POPULATE_RECORD","JSONB_POPULATE_RECORDSET","JSONB_PRETTY","JSONB_SET","JSONB_SET_LAX","JSONB_STRIP_NULLS","JSONB_TO_RECORD","JSONB_TO_RECORDSET","JSONB_TYPEOF","JSON_AGG","JSON_ARRAY_ELEMENTS","JSON_ARRAY_ELEMENTS_TEXT","JSON_ARRAY_LENGTH","JSON_BUILD_ARRAY","JSON_BUILD_OBJECT","JSON_EACH","JSON_EACH_TEXT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_OBJECT","JSON_OBJECT_AGG","JSON_OBJECT_KEYS","JSON_POPULATE_RECORD","JSON_POPULATE_RECORDSET","JSON_STRIP_NULLS","JSON_TO_RECORD","JSON_TO_RECORDSET","JSON_TYPEOF","ROW_TO_JSON","TO_JSON","TO_JSONB","TO_TIMESTAMP"],sequence:["CURRVAL","LASTVAL","NEXTVAL","SETVAL"],conditional:["COALESCE","GREATEST","LEAST","NULLIF"],array:["ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_DIMS","ARRAY_FILL","ARRAY_LENGTH","ARRAY_LOWER","ARRAY_NDIMS","ARRAY_POSITION","ARRAY_POSITIONS","ARRAY_PREPEND","ARRAY_REMOVE","ARRAY_REPLACE","ARRAY_TO_STRING","ARRAY_UPPER","CARDINALITY","STRING_TO_ARRAY","TRIM_ARRAY","UNNEST"],range:["ISEMPTY","LOWER","LOWER_INC","LOWER_INF","MULTIRANGE","RANGE_MERGE","UPPER","UPPER_INC","UPPER_INF"],aggregate:["ARRAY_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COALESCE","CORR","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","EVERY","GROUPING","JSONB_AGG","JSONB_OBJECT_AGG","JSON_AGG","JSON_OBJECT_AGG","MAX","MIN","MODE","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANGE_AGG","RANGE_INTERSECT_AGG","RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","TO_JSON","TO_JSONB","VARIANCE","VAR_POP","VAR_SAMP","XMLAGG"],window:["CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],set:["GENERATE_SERIES","GENERATE_SUBSCRIPTS"],sysInfo:["ACLDEFAULT","ACLEXPLODE","COL_DESCRIPTION","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","FORMAT_TYPE","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HAS_TYPE_PRIVILEGE","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","MAKEACLITEM","OBJ_DESCRIPTION","PG_BACKEND_PID","PG_BLOCKING_PIDS","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONTROL_CHECKPOINT","PG_CONTROL_INIT","PG_CONTROL_SYSTEM","PG_CONVERSION_IS_VISIBLE","PG_CURRENT_LOGFILE","PG_CURRENT_SNAPSHOT","PG_CURRENT_XACT_ID","PG_CURRENT_XACT_ID_IF_ASSIGNED","PG_DESCRIBE_OBJECT","PG_FUNCTION_IS_VISIBLE","PG_GET_CATALOG_FOREIGN_KEYS","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_FUNCTIONDEF","PG_GET_FUNCTION_ARGUMENTS","PG_GET_FUNCTION_IDENTITY_ARGUMENTS","PG_GET_FUNCTION_RESULT","PG_GET_INDEXDEF","PG_GET_KEYWORDS","PG_GET_OBJECT_ADDRESS","PG_GET_OWNED_SEQUENCE","PG_GET_RULEDEF","PG_GET_SERIAL_SEQUENCE","PG_GET_STATISTICSOBJDEF","PG_GET_TRIGGERDEF","PG_GET_USERBYID","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IDENTIFY_OBJECT","PG_IDENTIFY_OBJECT_AS_ADDRESS","PG_INDEXAM_HAS_PROPERTY","PG_INDEX_COLUMN_HAS_PROPERTY","PG_INDEX_HAS_PROPERTY","PG_IS_OTHER_TEMP_SCHEMA","PG_JIT_AVAILABLE","PG_LAST_COMMITTED_XACT","PG_LISTENING_CHANNELS","PG_MY_TEMP_SCHEMA","PG_NOTIFICATION_QUEUE_USAGE","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_OPTIONS_TO_TABLE","PG_POSTMASTER_START_TIME","PG_SAFE_SNAPSHOT_BLOCKING_PIDS","PG_SNAPSHOT_XIP","PG_SNAPSHOT_XMAX","PG_SNAPSHOT_XMIN","PG_STATISTICS_OBJ_IS_VISIBLE","PG_TABLESPACE_DATABASES","PG_TABLESPACE_LOCATION","PG_TABLE_IS_VISIBLE","PG_TRIGGER_DEPTH","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PG_VISIBLE_IN_SNAPSHOT","PG_XACT_COMMIT_TIMESTAMP","PG_XACT_COMMIT_TIMESTAMP_ORIGIN","PG_XACT_STATUS","PQSERVERVERSION","ROW_SECURITY_ACTIVE","SESSION_USER","SHOBJ_DESCRIPTION","TO_REGCLASS","TO_REGCOLLATION","TO_REGNAMESPACE","TO_REGOPER","TO_REGOPERATOR","TO_REGPROC","TO_REGPROCEDURE","TO_REGROLE","TO_REGTYPE","TXID_CURRENT","TXID_CURRENT_IF_ASSIGNED","TXID_CURRENT_SNAPSHOT","TXID_SNAPSHOT_XIP","TXID_SNAPSHOT_XMAX","TXID_SNAPSHOT_XMIN","TXID_STATUS","TXID_VISIBLE_IN_SNAPSHOT","USER","VERSION"],sysAdmin:["BRIN_DESUMMARIZE_RANGE","BRIN_SUMMARIZE_NEW_VALUES","BRIN_SUMMARIZE_RANGE","CONVERT_FROM","CURRENT_SETTING","GIN_CLEAN_PENDING_LIST","PG_ADVISORY_LOCK","PG_ADVISORY_LOCK_SHARED","PG_ADVISORY_UNLOCK","PG_ADVISORY_UNLOCK_ALL","PG_ADVISORY_UNLOCK_SHARED","PG_ADVISORY_XACT_LOCK","PG_ADVISORY_XACT_LOCK_SHARED","PG_BACKUP_START_TIME","PG_CANCEL_BACKEND","PG_COLLATION_ACTUAL_VERSION","PG_COLUMN_COMPRESSION","PG_COLUMN_SIZE","PG_COPY_LOGICAL_REPLICATION_SLOT","PG_COPY_PHYSICAL_REPLICATION_SLOT","PG_CREATE_LOGICAL_REPLICATION_SLOT","PG_CREATE_PHYSICAL_REPLICATION_SLOT","PG_CREATE_RESTORE_POINT","PG_CURRENT_WAL_FLUSH_LSN","PG_CURRENT_WAL_INSERT_LSN","PG_CURRENT_WAL_LSN","PG_DATABASE_SIZE","PG_DROP_REPLICATION_SLOT","PG_EXPORT_SNAPSHOT","PG_FILENODE_RELATION","PG_GET_WAL_REPLAY_PAUSE_STATE","PG_IMPORT_SYSTEM_COLLATIONS","PG_INDEXES_SIZE","PG_IS_IN_BACKUP","PG_IS_IN_RECOVERY","PG_IS_WAL_REPLAY_PAUSED","PG_LAST_WAL_RECEIVE_LSN","PG_LAST_WAL_REPLAY_LSN","PG_LAST_XACT_REPLAY_TIMESTAMP","PG_LOGICAL_EMIT_MESSAGE","PG_LOGICAL_SLOT_GET_BINARY_CHANGES","PG_LOGICAL_SLOT_GET_CHANGES","PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES","PG_LOGICAL_SLOT_PEEK_CHANGES","PG_LOG_BACKEND_MEMORY_CONTEXTS","PG_LS_ARCHIVE_STATUSDIR","PG_LS_DIR","PG_LS_LOGDIR","PG_LS_TMPDIR","PG_LS_WALDIR","PG_PARTITION_ANCESTORS","PG_PARTITION_ROOT","PG_PARTITION_TREE","PG_PROMOTE","PG_READ_BINARY_FILE","PG_READ_FILE","PG_RELATION_FILENODE","PG_RELATION_FILEPATH","PG_RELATION_SIZE","PG_RELOAD_CONF","PG_REPLICATION_ORIGIN_ADVANCE","PG_REPLICATION_ORIGIN_CREATE","PG_REPLICATION_ORIGIN_DROP","PG_REPLICATION_ORIGIN_OID","PG_REPLICATION_ORIGIN_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_IS_SETUP","PG_REPLICATION_ORIGIN_SESSION_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_RESET","PG_REPLICATION_ORIGIN_SESSION_SETUP","PG_REPLICATION_ORIGIN_XACT_RESET","PG_REPLICATION_ORIGIN_XACT_SETUP","PG_REPLICATION_SLOT_ADVANCE","PG_ROTATE_LOGFILE","PG_SIZE_BYTES","PG_SIZE_PRETTY","PG_START_BACKUP","PG_STAT_FILE","PG_STOP_BACKUP","PG_SWITCH_WAL","PG_TABLESPACE_SIZE","PG_TABLE_SIZE","PG_TERMINATE_BACKEND","PG_TOTAL_RELATION_SIZE","PG_TRY_ADVISORY_LOCK","PG_TRY_ADVISORY_LOCK_SHARED","PG_TRY_ADVISORY_XACT_LOCK","PG_TRY_ADVISORY_XACT_LOCK_SHARED","PG_WALFILE_NAME","PG_WALFILE_NAME_OFFSET","PG_WAL_LSN_DIFF","PG_WAL_REPLAY_PAUSE","PG_WAL_REPLAY_RESUME","SET_CONFIG"],trigger:["SUPPRESS_REDUNDANT_UPDATES_TRIGGER","TSVECTOR_UPDATE_TRIGGER","TSVECTOR_UPDATE_TRIGGER_COLUMN"],eventTrigger:["PG_EVENT_TRIGGER_DDL_COMMANDS","PG_EVENT_TRIGGER_DROPPED_OBJECTS","PG_EVENT_TRIGGER_TABLE_REWRITE_OID","PG_EVENT_TRIGGER_TABLE_REWRITE_REASON","PG_GET_OBJECT_ADDRESS"],stats:["PG_MCV_LIST_ITEMS"],cast:["CAST"],dataTypes:["BIT","BIT VARYING","CHARACTER","CHARACTER VARYING","VARCHAR","CHAR","DECIMAL","NUMERIC","TIME","TIMESTAMP","ENUM"]}),yt=X({all:["ABORT","ABSOLUTE","ACCESS","ACTION","ADD","ADMIN","AFTER","AGGREGATE","ALL","ALSO","ALTER","ALWAYS","ANALYSE","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASENSITIVE","ASSERTION","ASSIGNMENT","ASYMMETRIC","AT","ATOMIC","ATTACH","ATTRIBUTE","AUTHORIZATION","BACKWARD","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BIT","BOOLEAN","BOTH","BREADTH","BY","CACHE","CALL","CALLED","CASCADE","CASCADED","CASE","CAST","CATALOG","CHAIN","CHAR","CHARACTER","CHARACTERISTICS","CHECK","CHECKPOINT","CLASS","CLOSE","CLUSTER","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNS","COMMENT","COMMENTS","COMMIT","COMMITTED","COMPRESSION","CONCURRENTLY","CONFIGURATION","CONFLICT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTENT","CONTINUE","CONVERSION","COPY","COST","CREATE","CROSS","CSV","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINER","DELETE","DELIMITER","DELIMITERS","DEPENDS","DEPTH","DESC","DETACH","DICTIONARY","DISABLE","DISCARD","DISTINCT","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","EACH","ELSE","ENABLE","ENCODING","ENCRYPTED","END","ENUM","ESCAPE","EVENT","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXPLAIN","EXPRESSION","EXTENSION","EXTERNAL","EXTRACT","FALSE","FAMILY","FETCH","FILTER","FINALIZE","FIRST","FLOAT","FOLLOWING","FOR","FORCE","FOREIGN","FORWARD","FREEZE","FROM","FULL","FUNCTION","FUNCTIONS","GENERATED","GLOBAL","GRANT","GRANTED","GREATEST","GROUP","GROUPING","GROUPS","HANDLER","HAVING","HEADER","HOLD","HOUR","IDENTITY","IF","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDE","INCLUDING","INCREMENT","INDEX","INDEXES","INHERIT","INHERITS","INITIALLY","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSTEAD","INT","INTEGER","INTERSECT","INTERVAL","INTO","INVOKER","IS","ISNULL","ISOLATION","JOIN","KEY","LABEL","LANGUAGE","LARGE","LAST","LATERAL","LEADING","LEAKPROOF","LEAST","LEFT","LEVEL","LIKE","LIMIT","LISTEN","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LOCKED","LOGGED","MAPPING","MATCH","MATERIALIZED","MAXVALUE","METHOD","MINUTE","MINVALUE","MODE","MONTH","MOVE","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NEW","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NORMALIZE","NORMALIZED","NOT","NOTHING","NOTIFY","NOTNULL","NOWAIT","NULL","NULLIF","NULLS","NUMERIC","OBJECT","OF","OFF","OFFSET","OIDS","OLD","ON","ONLY","OPERATOR","OPTION","OPTIONS","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OVER","OVERLAPS","OVERLAY","OVERRIDING","OWNED","OWNER","PARALLEL","PARSER","PARTIAL","PARTITION","PASSING","PASSWORD","PLACING","PLANS","POLICY","POSITION","PRECEDING","PRECISION","PREPARE","PREPARED","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROGRAM","PUBLICATION","QUOTE","RANGE","READ","REAL","REASSIGN","RECHECK","RECURSIVE","REF","REFERENCES","REFERENCING","REFRESH","REINDEX","RELATIVE","RELEASE","RENAME","REPEATABLE","REPLACE","REPLICA","RESET","RESTART","RESTRICT","RETURN","RETURNING","RETURNS","REVOKE","RIGHT","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROUTINES","ROW","ROWS","RULE","SAVEPOINT","SCHEMA","SCHEMAS","SCROLL","SEARCH","SECOND","SECURITY","SELECT","SEQUENCE","SEQUENCES","SERIALIZABLE","SERVER","SESSION","SESSION_USER","SET","SETOF","SETS","SHARE","SHOW","SIMILAR","SIMPLE","SKIP","SMALLINT","SNAPSHOT","SOME","SQL","STABLE","STANDALONE","START","STATEMENT","STATISTICS","STDIN","STDOUT","STORAGE","STORED","STRICT","STRIP","SUBSCRIPTION","SUBSTRING","SUPPORT","SYMMETRIC","SYSID","SYSTEM","TABLE","TABLES","TABLESAMPLE","TABLESPACE","TEMP","TEMPLATE","TEMPORARY","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRANSFORM","TREAT","TRIGGER","TRIM","TRUE","TRUNCATE","TRUSTED","TYPE","TYPES","UESCAPE","UNBOUNDED","UNCOMMITTED","UNENCRYPTED","UNION","UNIQUE","UNKNOWN","UNLISTEN","UNLOGGED","UNTIL","UPDATE","USER","USING","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARCHAR","VARIADIC","VARYING","VERBOSE","VERSION","VIEW","VIEWS","VOLATILE","WHEN","WHERE","WHITESPACE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","XML","XMLATTRIBUTES","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","YEAR","YES","ZONE"]}),Wt=P(["SELECT [ALL | DISTINCT]"]),vt=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","UPDATE [ONLY]","SET","WHERE CURRENT OF","DELETE FROM [ONLY]","TRUNCATE [TABLE] [ONLY]","CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW","CREATE MATERIALIZED VIEW [IF NOT EXISTS]","CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS] [ONLY]","ALTER TABLE ALL IN TABLESPACE","RENAME [COLUMN]","RENAME TO","ADD [COLUMN] [IF NOT EXISTS]","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","[SET DATA] TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","ABORT","ALTER AGGREGATE","ALTER COLLATION","ALTER CONVERSION","ALTER DATABASE","ALTER DEFAULT PRIVILEGES","ALTER DOMAIN","ALTER EVENT TRIGGER","ALTER EXTENSION","ALTER FOREIGN DATA WRAPPER","ALTER FOREIGN TABLE","ALTER FUNCTION","ALTER GROUP","ALTER INDEX","ALTER LANGUAGE","ALTER LARGE OBJECT","ALTER MATERIALIZED VIEW","ALTER OPERATOR","ALTER OPERATOR CLASS","ALTER OPERATOR FAMILY","ALTER POLICY","ALTER PROCEDURE","ALTER PUBLICATION","ALTER ROLE","ALTER ROUTINE","ALTER RULE","ALTER SCHEMA","ALTER SEQUENCE","ALTER SERVER","ALTER STATISTICS","ALTER SUBSCRIPTION","ALTER SYSTEM","ALTER TABLESPACE","ALTER TEXT SEARCH CONFIGURATION","ALTER TEXT SEARCH DICTIONARY","ALTER TEXT SEARCH PARSER","ALTER TEXT SEARCH TEMPLATE","ALTER TRIGGER","ALTER TYPE","ALTER USER","ALTER USER MAPPING","ALTER VIEW","ANALYZE","BEGIN","CALL","CHECKPOINT","CLOSE","CLUSTER","COMMENT","COMMIT","COMMIT PREPARED","COPY","CREATE ACCESS METHOD","CREATE AGGREGATE","CREATE CAST","CREATE COLLATION","CREATE CONVERSION","CREATE DATABASE","CREATE DOMAIN","CREATE EVENT TRIGGER","CREATE EXTENSION","CREATE FOREIGN DATA WRAPPER","CREATE FOREIGN TABLE","CREATE FUNCTION","CREATE GROUP","CREATE INDEX","CREATE LANGUAGE","CREATE OPERATOR","CREATE OPERATOR CLASS","CREATE OPERATOR FAMILY","CREATE POLICY","CREATE PROCEDURE","CREATE PUBLICATION","CREATE ROLE","CREATE RULE","CREATE SCHEMA","CREATE SEQUENCE","CREATE SERVER","CREATE STATISTICS","CREATE SUBSCRIPTION","CREATE TABLESPACE","CREATE TEXT SEARCH CONFIGURATION","CREATE TEXT SEARCH DICTIONARY","CREATE TEXT SEARCH PARSER","CREATE TEXT SEARCH TEMPLATE","CREATE TRANSFORM","CREATE TRIGGER","CREATE TYPE","CREATE USER","CREATE USER MAPPING","DEALLOCATE","DECLARE","DISCARD","DO","DROP ACCESS METHOD","DROP AGGREGATE","DROP CAST","DROP COLLATION","DROP CONVERSION","DROP DATABASE","DROP DOMAIN","DROP EVENT TRIGGER","DROP EXTENSION","DROP FOREIGN DATA WRAPPER","DROP FOREIGN TABLE","DROP FUNCTION","DROP GROUP","DROP INDEX","DROP LANGUAGE","DROP MATERIALIZED VIEW","DROP OPERATOR","DROP OPERATOR CLASS","DROP OPERATOR FAMILY","DROP OWNED","DROP POLICY","DROP PROCEDURE","DROP PUBLICATION","DROP ROLE","DROP ROUTINE","DROP RULE","DROP SCHEMA","DROP SEQUENCE","DROP SERVER","DROP STATISTICS","DROP SUBSCRIPTION","DROP TABLESPACE","DROP TEXT SEARCH CONFIGURATION","DROP TEXT SEARCH DICTIONARY","DROP TEXT SEARCH PARSER","DROP TEXT SEARCH TEMPLATE","DROP TRANSFORM","DROP TRIGGER","DROP TYPE","DROP USER","DROP USER MAPPING","DROP VIEW","EXECUTE","EXPLAIN","FETCH","GRANT","IMPORT FOREIGN SCHEMA","LISTEN","LOAD","LOCK","MOVE","NOTIFY","PREPARE","PREPARE TRANSACTION","REASSIGN OWNED","REFRESH MATERIALIZED VIEW","REINDEX","RELEASE SAVEPOINT","RESET","RETURNING","REVOKE","ROLLBACK","ROLLBACK PREPARED","ROLLBACK TO SAVEPOINT","SAVEPOINT","SECURITY LABEL","SELECT INTO","SET CONSTRAINTS","SET ROLE","SET SESSION AUTHORIZATION","SET TRANSACTION","SHOW","START TRANSACTION","UNLISTEN","VACUUM","AFTER","SET SCHEMA"]),gt=P(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),Xt=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),bt=P(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN","{TIMESTAMP | TIME} {WITH | WITHOUT} TIME ZONE"]);class Kt extends eE{tokenizer(){return new RE({reservedClauses:vt,reservedSelect:Wt,reservedSetOperations:gt,reservedJoins:Xt,reservedPhrases:bt,reservedKeywords:yt,reservedFunctionNames:Vt,nestedBlockComments:!0,extraParens:["[]"],stringTypes:["$$",{quote:"''-qq",prefixes:["U&"]},{quote:"''-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:[{quote:'""-qq',prefixes:["U&"]}],identChars:{rest:"$"},paramTypes:{numbered:["$"]},operators:["%","^","|/","||/","@",":=","&","|","#","~","<<",">>","~>~","~<~","~>=~","~<=~","@-@","@@","##","<->","&&","&<","&>","<<|","&<|","|>>","|&>","<^","^>","?#","?-","?|","?-|","?||","@>","<@","~=","?","@?","?&","->","->>","#>","#>>","#-","=>",">>=","<<=","~~","~~*","!~~","!~~*","~","~*","!~","!~*","-|-","||","@@@","!!","<%","%>","<<%","%>>","<<->","<->>","<<<->","<->>>","::"]})}formatOptions(){return{alwaysDenseOperators:["::"]}}}const xt=X({aggregate:["ANY_VALUE","APPROXIMATE PERCENTILE_DISC","AVG","COUNT","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],array:["array","array_concat","array_flatten","get_array_length","split_to_array","subarray"],bitwise:["BIT_AND","BIT_OR","BOOL_AND","BOOL_OR"],conditional:["COALESCE","DECODE","GREATEST","LEAST","NVL","NVL2","NULLIF"],dateTime:["ADD_MONTHS","AT TIME ZONE","CONVERT_TIMEZONE","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_CMP","DATE_CMP_TIMESTAMP","DATE_CMP_TIMESTAMPTZ","DATE_PART_YEAR","DATEADD","DATEDIFF","DATE_PART","DATE_TRUNC","EXTRACT","GETDATE","INTERVAL_CMP","LAST_DAY","MONTHS_BETWEEN","NEXT_DAY","SYSDATE","TIMEOFDAY","TIMESTAMP_CMP","TIMESTAMP_CMP_DATE","TIMESTAMP_CMP_TIMESTAMPTZ","TIMESTAMPTZ_CMP","TIMESTAMPTZ_CMP_DATE","TIMESTAMPTZ_CMP_TIMESTAMP","TIMEZONE","TO_TIMESTAMP","TRUNC"],spatial:["AddBBox","DropBBox","GeometryType","ST_AddPoint","ST_Angle","ST_Area","ST_AsBinary","ST_AsEWKB","ST_AsEWKT","ST_AsGeoJSON","ST_AsText","ST_Azimuth","ST_Boundary","ST_Collect","ST_Contains","ST_ContainsProperly","ST_ConvexHull","ST_CoveredBy","ST_Covers","ST_Crosses","ST_Dimension","ST_Disjoint","ST_Distance","ST_DistanceSphere","ST_DWithin","ST_EndPoint","ST_Envelope","ST_Equals","ST_ExteriorRing","ST_Force2D","ST_Force3D","ST_Force3DM","ST_Force3DZ","ST_Force4D","ST_GeometryN","ST_GeometryType","ST_GeomFromEWKB","ST_GeomFromEWKT","ST_GeomFromText","ST_GeomFromWKB","ST_InteriorRingN","ST_Intersects","ST_IsPolygonCCW","ST_IsPolygonCW","ST_IsClosed","ST_IsCollection","ST_IsEmpty","ST_IsSimple","ST_IsValid","ST_Length","ST_LengthSphere","ST_Length2D","ST_LineFromMultiPoint","ST_LineInterpolatePoint","ST_M","ST_MakeEnvelope","ST_MakeLine","ST_MakePoint","ST_MakePolygon","ST_MemSize","ST_MMax","ST_MMin","ST_Multi","ST_NDims","ST_NPoints","ST_NRings","ST_NumGeometries","ST_NumInteriorRings","ST_NumPoints","ST_Perimeter","ST_Perimeter2D","ST_Point","ST_PointN","ST_Points","ST_Polygon","ST_RemovePoint","ST_Reverse","ST_SetPoint","ST_SetSRID","ST_Simplify","ST_SRID","ST_StartPoint","ST_Touches","ST_Within","ST_X","ST_XMax","ST_XMin","ST_Y","ST_YMax","ST_YMin","ST_Z","ST_ZMax","ST_ZMin","SupportsBBox"],hash:["CHECKSUM","FUNC_SHA1","FNV_HASH","MD5","SHA","SHA1","SHA2"],hyperLogLog:["HLL","HLL_CREATE_SKETCH","HLL_CARDINALITY","HLL_COMBINE"],json:["IS_VALID_JSON","IS_VALID_JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_EXTRACT_ARRAY_ELEMENT_TEXT","JSON_EXTRACT_PATH_TEXT","JSON_PARSE","JSON_SERIALIZE"],math:["ABS","ACOS","ASIN","ATAN","ATAN2","CBRT","CEILING","CEIL","COS","COT","DEGREES","DEXP","DLOG1","DLOG10","EXP","FLOOR","LN","LOG","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SIN","SIGN","SQRT","TAN","TO_HEX","TRUNC"],machineLearning:["EXPLAIN_MODEL"],string:["ASCII","BPCHARCMP","BTRIM","BTTEXT_PATTERN_CMP","CHAR_LENGTH","CHARACTER_LENGTH","CHARINDEX","CHR","COLLATE","CONCAT","CRC32","DIFFERENCE","INITCAP","LEFT","RIGHT","LEN","LENGTH","LOWER","LPAD","RPAD","LTRIM","OCTETINDEX","OCTET_LENGTH","POSITION","QUOTE_IDENT","QUOTE_LITERAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","REPLICATE","REVERSE","RTRIM","SOUNDEX","SPLIT_PART","STRPOS","STRTOL","SUBSTRING","TEXTLEN","TRANSLATE","TRIM","UPPER"],superType:["decimal_precision","decimal_scale","is_array","is_bigint","is_boolean","is_char","is_decimal","is_float","is_integer","is_object","is_scalar","is_smallint","is_varchar","json_typeof"],window:["AVG","COUNT","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAST_VALUE","LAG","LEAD","LISTAGG","MAX","MEDIAN","MIN","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],dataType:["CAST","CONVERT","TO_CHAR","TO_DATE","TO_NUMBER","TEXT_TO_INT_ALT","TEXT_TO_NUMERIC_ALT"],sysAdmin:["CHANGE_QUERY_PRIORITY","CHANGE_SESSION_PRIORITY","CHANGE_USER_PRIORITY","CURRENT_SETTING","PG_CANCEL_BACKEND","PG_TERMINATE_BACKEND","REBOOT_CLUSTER","SET_CONFIG"],sysInfo:["CURRENT_AWS_ACCOUNT","CURRENT_DATABASE","CURRENT_NAMESPACE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","CURRENT_USER_ID","HAS_ASSUMEROLE_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_TABLE_PRIVILEGE","PG_BACKEND_PID","PG_GET_COLS","PG_GET_GRANTEE_BY_IAM_ROLE","PG_GET_IAM_ROLE_BY_USER","PG_GET_LATE_BINDING_VIEW_COLS","PG_LAST_COPY_COUNT","PG_LAST_COPY_ID","PG_LAST_UNLOAD_ID","PG_LAST_QUERY_ID","PG_LAST_UNLOAD_COUNT","SESSION_USER","SLICE_NUM","USER","VERSION"],dataTypes:["DECIMAL","NUMERIC","CHAR","CHARACTER","VARCHAR","CHARACTER VARYING","NCHAR","NVARCHAR","VARBYTE"]}),wt=X({standard:["AES128","AES256","ALL","ALLOWOVERWRITE","ANY","ARRAY","AS","ASC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BOTH","CHECK","COLUMN","CONSTRAINT","CREATE","CROSS","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DESC","DISABLE","DISTINCT","DO","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","EXPLICIT","FALSE","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GROUP","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTO","IS","ISNULL","LANGUAGE","LEADING","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","MINUS","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OID","OLD","ON","ONLY","OPEN","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PERMISSIONS","PLACING","PRIMARY","RECOVER","REFERENCES","REJECTLOG","RESORT","RESPECT","RESTORE","SIMILAR","SNAPSHOT","SOME","SYSTEM","TABLE","TAG","TDES","THEN","TIMESTAMP","TO","TOP","TRAILING","TRUE","UNIQUE","USING","VERBOSE","WALLET","WITHOUT"],dataConversionParams:["ACCEPTANYDATE","ACCEPTINVCHARS","BLANKSASNULL","DATEFORMAT","EMPTYASNULL","ENCODING","ESCAPE","EXPLICIT_IDS","FILLRECORD","IGNOREBLANKLINES","IGNOREHEADER","REMOVEQUOTES","ROUNDEC","TIMEFORMAT","TRIMBLANKS","TRUNCATECOLUMNS"],dataLoadParams:["COMPROWS","COMPUPDATE","MAXERROR","NOLOAD","STATUPDATE"],dataFormatParams:["FORMAT","CSV","DELIMITER","FIXEDWIDTH","SHAPEFILE","AVRO","JSON","PARQUET","ORC"],copyAuthParams:["ACCESS_KEY_ID","CREDENTIALS","ENCRYPTED","IAM_ROLE","MASTER_SYMMETRIC_KEY","SECRET_ACCESS_KEY","SESSION_TOKEN"],copyCompressionParams:["BZIP2","GZIP","LZOP","ZSTD"],copyMiscParams:["MANIFEST","READRATIO","REGION","SSH"],compressionEncodings:["RAW","AZ64","BYTEDICT","DELTA","DELTA32K","LZO","MOSTLY8","MOSTLY16","MOSTLY32","RUNLENGTH","TEXT255","TEXT32K"],misc:["CATALOG_ROLE","SECRET_ARN","EXTERNAL","AUTO","EVEN","KEY","PREDICATE","COMPRESSION"],dataTypes:["BPCHAR","TEXT"]}),$t=P(["SELECT [ALL | DISTINCT]"]),Jt=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","UPDATE","SET","DELETE [FROM]","TRUNCATE [TABLE]","CREATE [OR REPLACE | MATERIALIZED] VIEW","CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ALTER TABLE APPEND","ADD [COLUMN]","DROP [COLUMN]","RENAME TO","RENAME COLUMN","ALTER COLUMN","TYPE","ENCODE","ABORT","ALTER DATABASE","ALTER DATASHARE","ALTER DEFAULT PRIVILEGES","ALTER GROUP","ALTER MATERIALIZED VIEW","ALTER PROCEDURE","ALTER SCHEMA","ALTER USER","ANALYSE","ANALYZE","ANALYSE COMPRESSION","ANALYZE COMPRESSION","BEGIN","CALL","CANCEL","CLOSE","COMMENT","COMMIT","COPY","CREATE DATABASE","CREATE DATASHARE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL SCHEMA","CREATE EXTERNAL TABLE","CREATE FUNCTION","CREATE GROUP","CREATE LIBRARY","CREATE MODEL","CREATE PROCEDURE","CREATE SCHEMA","CREATE USER","DEALLOCATE","DECLARE","DESC DATASHARE","DROP DATABASE","DROP DATASHARE","DROP FUNCTION","DROP GROUP","DROP LIBRARY","DROP MODEL","DROP MATERIALIZED VIEW","DROP PROCEDURE","DROP SCHEMA","DROP USER","DROP VIEW","DROP","EXECUTE","EXPLAIN","FETCH","GRANT","LOCK","PREPARE","REFRESH MATERIALIZED VIEW","RESET","REVOKE","ROLLBACK","SELECT INTO","SET SESSION AUTHORIZATION","SET SESSION CHARACTERISTICS","SHOW","SHOW EXTERNAL TABLE","SHOW MODEL","SHOW DATASHARES","SHOW PROCEDURE","SHOW TABLE","SHOW VIEW","START TRANSACTION","UNLOAD","VACUUM","ALTER COLUMN"]),kt=P(["UNION [ALL]","EXCEPT","INTERSECT","MINUS"]),Zt=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),Qt=P(["NULL AS","DATA CATALOG","HIVE METASTORE","{ROWS | RANGE} BETWEEN"]);class qt extends eE{tokenizer(){return new RE({reservedClauses:Jt,reservedSelect:$t,reservedSetOperations:kt,reservedJoins:Zt,reservedPhrases:Qt,reservedKeywords:wt,reservedFunctionNames:xt,stringTypes:["''-qq"],identTypes:['""-qq'],identChars:{first:"#"},paramTypes:{numbered:["$"]},operators:["^","%","@","|/","||/","&","|","~","<<",">>","||","::"]})}formatOptions(){return{alwaysDenseOperators:["::"]}}}const jt=X({all:["ADD","AFTER","ALL","ALTER","ANALYZE","AND","ANTI","ANY","ARCHIVE","ARRAY","AS","ASC","AT","AUTHORIZATION","BETWEEN","BOTH","BUCKET","BUCKETS","BY","CACHE","CASCADE","CAST","CHANGE","CHECK","CLEAR","CLUSTER","CLUSTERED","CODEGEN","COLLATE","COLLECTION","COLUMN","COLUMNS","COMMENT","COMMIT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONSTRAINT","COST","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATA","DATABASE","DATABASES","DAY","DBPROPERTIES","DEFINED","DELETE","DELIMITED","DESC","DESCRIBE","DFS","DIRECTORIES","DIRECTORY","DISTINCT","DISTRIBUTE","DIV","DROP","ESCAPE","ESCAPED","EXCEPT","EXCHANGE","EXISTS","EXPORT","EXTENDED","EXTERNAL","EXTRACT","FALSE","FETCH","FIELDS","FILTER","FILEFORMAT","FIRST","FIRST_VALUE","FOLLOWING","FOR","FOREIGN","FORMAT","FORMATTED","FULL","FUNCTION","FUNCTIONS","GLOBAL","GRANT","GROUP","GROUPING","HOUR","IF","IGNORE","IMPORT","IN","INDEX","INDEXES","INNER","INPATH","INPUTFORMAT","INTERSECT","INTERVAL","INTO","IS","ITEMS","KEYS","LAST","LAST_VALUE","LATERAL","LAZY","LEADING","LEFT","LIKE","LINES","LIST","LOCAL","LOCATION","LOCK","LOCKS","LOGICAL","MACRO","MAP","MATCHED","MERGE","MINUTE","MONTH","MSCK","NAMESPACE","NAMESPACES","NATURAL","NO","NOT","NULL","NULLS","OF","ONLY","OPTION","OPTIONS","OR","ORDER","OUT","OUTER","OUTPUTFORMAT","OVER","OVERLAPS","OVERLAY","OVERWRITE","OWNER","PARTITION","PARTITIONED","PARTITIONS","PERCENT","PLACING","POSITION","PRECEDING","PRIMARY","PRINCIPALS","PROPERTIES","PURGE","QUERY","RANGE","RECORDREADER","RECORDWRITER","RECOVER","REDUCE","REFERENCES","RENAME","REPAIR","REPLACE","RESPECT","RESTRICT","REVOKE","RIGHT","RLIKE","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","SCHEMA","SECOND","SELECT","SEMI","SEPARATED","SERDE","SERDEPROPERTIES","SESSION_USER","SETS","SHOW","SKEWED","SOME","SORT","SORTED","START","STATISTICS","STORED","STRATIFY","STRUCT","SUBSTR","SUBSTRING","TABLE","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","THEN","TO","TOUCH","TRAILING","TRANSACTION","TRANSACTIONS","TRIM","TRUE","TRUNCATE","UNARCHIVE","UNBOUNDED","UNCACHE","UNIQUE","UNKNOWN","UNLOCK","UNSET","USE","USER","USING","VIEW","WINDOW","YEAR","ANALYSE","ARRAY_ZIP","COALESCE","CONTAINS","CONVERT","DAYS","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DECODE","DEFAULT","DISTINCTROW","ENCODE","EXPLODE","EXPLODE_OUTER","FIXED","GREATEST","GROUP_CONCAT","HOURS","HOUR_MINUTE","HOUR_SECOND","IFNULL","LEAST","LEVEL","MINUTE_SECOND","NULLIF","OFFSET","ON","OPTIMIZE","REGEXP","SEPARATOR","SIZE","STRING","TYPE","TYPES","UNSIGNED","VARIABLES","YEAR_MONTH"]}),zt=X({aggregate:["APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COUNT","COUNT","COUNT_IF","COUNT_MIN_SKETCH","COVAR_POP","COVAR_SAMP","EVERY","FIRST","FIRST_VALUE","GROUPING","GROUPING_ID","KURTOSIS","LAST","LAST_VALUE","MAX","MAX_BY","MEAN","MIN","MIN_BY","PERCENTILE","PERCENTILE","PERCENTILE_APPROX","SKEWNESS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["CUME_DIST","DENSE_RANK","LAG","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],array:["ARRAY","ARRAY_CONTAINS","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_UNION","ARRAYS_OVERLAP","ARRAYS_ZIP","FLATTEN","SEQUENCE","SHUFFLE","SLICE","SORT_ARRAY"],map:["ELEMENT_AT","ELEMENT_AT","MAP","MAP_CONCAT","MAP_ENTRIES","MAP_FROM_ARRAYS","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","STR_TO_MAP"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_DATE","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","DATE_ADD","DATE_FORMAT","DATE_FROM_UNIX_DATE","DATE_PART","DATE_SUB","DATE_TRUNC","DATEDIFF","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MAKE_DATE","MAKE_DT_INTERVAL","MAKE_INTERVAL","MAKE_TIMESTAMP","MAKE_YM_INTERVAL","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","NOW","QUARTER","SECOND","SESSION_WINDOW","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_SECONDS","TO_DATE","TO_TIMESTAMP","TO_UNIX_TIMESTAMP","TO_UTC_TIMESTAMP","TRUNC","UNIX_DATE","UNIX_MICROS","UNIX_MILLIS","UNIX_SECONDS","UNIX_TIMESTAMP","WEEKDAY","WEEKOFYEAR","WINDOW","YEAR"],json:["FROM_JSON","GET_JSON_OBJECT","JSON_ARRAY_LENGTH","JSON_OBJECT_KEYS","JSON_TUPLE","SCHEMA_OF_JSON","TO_JSON"],misc:["ABS","ACOS","ACOSH","AGGREGATE","ARRAY_SORT","ASCII","ASIN","ASINH","ASSERT_TRUE","ATAN","ATAN2","ATANH","BASE64","BIGINT","BIN","BINARY","BIT_COUNT","BIT_GET","BIT_LENGTH","BOOLEAN","BROUND","BTRIM","CARDINALITY","CBRT","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONV","COS","COSH","COT","CRC32","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_USER","DATE","DECIMAL","DEGREES","DOUBLE","ELT","EXP","EXPM1","FACTORIAL","FIND_IN_SET","FLOAT","FLOOR","FORALL","FORMAT_NUMBER","FORMAT_STRING","FROM_CSV","GETBIT","HASH","HEX","HYPOT","INITCAP","INLINE","INLINE_OUTER","INPUT_FILE_BLOCK_LENGTH","INPUT_FILE_BLOCK_START","INPUT_FILE_NAME","INSTR","INT","ISNAN","ISNOTNULL","ISNULL","JAVA_METHOD","LCASE","LEFT","LENGTH","LEVENSHTEIN","LN","LOCATE","LOG","LOG10","LOG1P","LOG2","LOWER","LPAD","LTRIM","MAP_FILTER","MAP_ZIP_WITH","MD5","MOD","MONOTONICALLY_INCREASING_ID","NAMED_STRUCT","NANVL","NEGATIVE","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARSE_URL","PI","PMOD","POSEXPLODE","POSEXPLODE_OUTER","POSITION","POSITIVE","POW","POWER","PRINTF","RADIANS","RAISE_ERROR","RAND","RANDN","RANDOM","REFLECT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_REPLACE","REPEAT","REPLACE","REVERSE","RIGHT","RINT","ROUND","RPAD","RTRIM","SCHEMA_OF_CSV","SENTENCES","SHA","SHA1","SHA2","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIGNUM","SIN","SINH","SMALLINT","SOUNDEX","SPACE","SPARK_PARTITION_ID","SPLIT","SQRT","STACK","SUBSTR","SUBSTRING","SUBSTRING_INDEX","TAN","TANH","TIMESTAMP","TINYINT","TO_CSV","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRY_ADD","TRY_DIVIDE","TYPEOF","UCASE","UNBASE64","UNHEX","UPPER","UUID","VERSION","WIDTH_BUCKET","XPATH","XPATH_BOOLEAN","XPATH_DOUBLE","XPATH_FLOAT","XPATH_INT","XPATH_LONG","XPATH_NUMBER","XPATH_SHORT","XPATH_STRING","XXHASH64","ZIP_WITH"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","DEC","NUMERIC","VARCHAR"]}),EI=P(["SELECT [ALL | DISTINCT]"]),TI=P(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT [INTO | OVERWRITE] [TABLE]","VALUES","TRUNCATE TABLE","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]","CREATE [EXTERNAL] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD COLUMNS","DROP {COLUMN | COLUMNS}","RENAME TO","RENAME COLUMN","ALTER COLUMN","ALTER DATABASE","ALTER VIEW","CREATE DATABASE","CREATE FUNCTION","DROP DATABASE","DROP FUNCTION","DROP VIEW","REPAIR TABLE","USE DATABASE","TABLESAMPLE","PIVOT","TRANSFORM","EXPLAIN","ADD FILE","ADD JAR","ANALYZE TABLE","CACHE TABLE","CLEAR CACHE","DESCRIBE DATABASE","DESCRIBE FUNCTION","DESCRIBE QUERY","DESCRIBE TABLE","LIST FILE","LIST JAR","REFRESH","REFRESH TABLE","REFRESH FUNCTION","RESET","SHOW COLUMNS","SHOW CREATE TABLE","SHOW DATABASES","SHOW FUNCTIONS","SHOW PARTITIONS","SHOW TABLE EXTENDED","SHOW TABLES","SHOW TBLPROPERTIES","SHOW VIEWS","UNCACHE TABLE","LATERAL VIEW"]),eI=P(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),RI=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT] {ANTI | SEMI} JOIN","NATURAL [LEFT] {ANTI | SEMI} JOIN"]),AI=P(["ON DELETE","ON UPDATE","CURRENT ROW","{ROWS | RANGE} BETWEEN"]);class SI extends eE{tokenizer(){return new RE({reservedClauses:TI,reservedSelect:EI,reservedSetOperations:eI,reservedJoins:RI,reservedPhrases:AI,supportsXor:!0,reservedKeywords:jt,reservedFunctionNames:zt,extraParens:["[]"],stringTypes:["''-bs",'""-bs',{quote:"''-raw",prefixes:["R","X"],requirePrefix:!0},{quote:'""-raw',prefixes:["R","X"],requirePrefix:!0}],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||","->"],postProcess:tI})}}function tI(T){return T.map((E,e)=>{const R=T[e-1]||ZE,A=T[e+1]||ZE;return yE.WINDOW(E)&&A.type===_.OPEN_PAREN?{...E,type:_.RESERVED_FUNCTION_NAME}:E.text==="ITEMS"&&E.type===_.RESERVED_KEYWORD&&!(R.text==="COLLECTION"&&A.text==="TERMINATED")?{...E,type:_.IDENTIFIER,text:E.raw}:E})}const II=X({scalar:["ABS","CHANGES","CHAR","COALESCE","FORMAT","GLOB","HEX","IFNULL","IIF","INSTR","LAST_INSERT_ROWID","LENGTH","LIKE","LIKELIHOOD","LIKELY","LOAD_EXTENSION","LOWER","LTRIM","NULLIF","PRINTF","QUOTE","RANDOM","RANDOMBLOB","REPLACE","ROUND","RTRIM","SIGN","SOUNDEX","SQLITE_COMPILEOPTION_GET","SQLITE_COMPILEOPTION_USED","SQLITE_OFFSET","SQLITE_SOURCE_ID","SQLITE_VERSION","SUBSTR","SUBSTRING","TOTAL_CHANGES","TRIM","TYPEOF","UNICODE","UNLIKELY","UPPER","ZEROBLOB"],aggregate:["AVG","COUNT","GROUP_CONCAT","MAX","MIN","SUM","TOTAL"],datetime:["DATE","TIME","DATETIME","JULIANDAY","UNIXEPOCH","STRFTIME"],window:["row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value"],math:["ACOS","ACOSH","ASIN","ASINH","ATAN","ATAN2","ATANH","CEIL","CEILING","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG","LOG10","LOG2","MOD","PI","POW","POWER","RADIANS","SIN","SINH","SQRT","TAN","TANH","TRUNC"],json:["JSON","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_ARRAY_LENGTH","JSON_EXTRACT","JSON_INSERT","JSON_OBJECT","JSON_PATCH","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_TYPE","JSON_TYPE","JSON_VALID","JSON_QUOTE","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_EACH","JSON_TREE"],cast:["CAST"],dataTypes:["CHARACTER","VARCHAR","VARYING CHARACTER","NCHAR","NATIVE CHARACTER","NVARCHAR","NUMERIC","DECIMAL"]}),OI=X({all:["ABORT","ACTION","ADD","AFTER","ALL","ALTER","AND","ANY","ARE","ARRAY","ALWAYS","ANALYZE","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DO","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUDE","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","ONLY","OPEN","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"]}),NI=P(["SELECT [ALL | DISTINCT]"]),rI=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO","REPLACE INTO","VALUES","UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]","SET","DELETE FROM","CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","RENAME TO","SET SCHEMA"]),sI=P(["UNION [ALL]","EXCEPT","INTERSECT"]),nI=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),_I=P(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN"]);class aI extends eE{tokenizer(){return new RE({reservedClauses:rI,reservedSelect:NI,reservedSetOperations:sI,reservedJoins:nI,reservedPhrases:_I,reservedKeywords:OI,reservedFunctionNames:II,stringTypes:["''-qq",{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``","[]"],paramTypes:{positional:!0,numbered:["?"],named:[":","@","$"]},operators:["%","~","&","|","<<",">>","==","->","->>","||"]})}}const CI=X({set:["GROUPING"],window:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","ROW_NUMBER"],numeric:["POSITION","OCCURRENCES_REGEX","POSITION_REGEX","EXTRACT","CHAR_LENGTH","CHARACTER_LENGTH","OCTET_LENGTH","CARDINALITY","ABS","MOD","LN","EXP","POWER","SQRT","FLOOR","CEIL","CEILING","WIDTH_BUCKET"],string:["SUBSTRING","SUBSTRING_REGEX","UPPER","LOWER","CONVERT","TRANSLATE","TRANSLATE_REGEX","TRIM","OVERLAY","NORMALIZE","SPECIFICTYPE"],datetime:["CURRENT_DATE","CURRENT_TIME","LOCALTIME","CURRENT_TIMESTAMP","LOCALTIMESTAMP"],aggregate:["COUNT","AVG","MAX","MIN","SUM","STDDEV_POP","STDDEV_SAMP","VAR_SAMP","VAR_POP","COLLECT","FUSION","INTERSECTION","COVAR_POP","COVAR_SAMP","CORR","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","PERCENTILE_CONT","PERCENTILE_DISC"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],nonStandard:["ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN"],dataTypes:["CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","VARCHAR","CHARACTER LARGE OBJECT","CHAR LARGE OBJECT","CLOB","NATIONAL CHARACTER","NATIONAL CHAR","NCHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NATIONAL CHARACTER LARGE OBJECT","NCHAR LARGE OBJECT","NCLOB","BINARY","BINARY VARYING","VARBINARY","BINARY LARGE OBJECT","BLOB","NUMERIC","DECIMAL","DEC","TIME","TIMESTAMP"]}),LI=X({all:["ALL","ALLOCATE","ALTER","ANY","ARE","ARRAY","AS","ASENSITIVE","ASYMMETRIC","AT","ATOMIC","AUTHORIZATION","BEGIN","BETWEEN","BIGINT","BINARY","BLOB","BOOLEAN","BOTH","BY","CALL","CALLED","CASCADED","CAST","CHAR","CHARACTER","CHECK","CLOB","CLOSE","COALESCE","COLLATE","COLUMN","COMMIT","CONDITION","CONNECT","CONSTRAINT","CORRESPONDING","CREATE","CROSS","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURSOR","CYCLE","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DELETE","DEREF","DESCRIBE","DETERMINISTIC","DISCONNECT","DISTINCT","DOUBLE","DROP","DYNAMIC","EACH","ELEMENT","END-EXEC","ESCAPE","EVERY","EXCEPT","EXEC","EXECUTE","EXISTS","EXTERNAL","FALSE","FETCH","FILTER","FLOAT","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GET","GLOBAL","GRANT","GROUP","HAVING","HOLD","HOUR","IDENTITY","IN","INDICATOR","INNER","INOUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","LANGUAGE","LARGE","LATERAL","LEADING","LEFT","LIKE","LIKE_REGEX","LOCAL","MATCH","MEMBER","MERGE","METHOD","MINUTE","MODIFIES","MODULE","MONTH","MULTISET","NATIONAL","NATURAL","NCHAR","NCLOB","NEW","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OF","OLD","ON","ONLY","OPEN","ORDER","OUT","OUTER","OVER","OVERLAPS","PARAMETER","PARTITION","PRECISION","PREPARE","PRIMARY","PROCEDURE","RANGE","READS","REAL","RECURSIVE","REF","REFERENCES","REFERENCING","RELEASE","RESULT","RETURN","RETURNS","REVOKE","RIGHT","ROLLBACK","ROLLUP","ROW","ROWS","SAVEPOINT","SCOPE","SCROLL","SEARCH","SECOND","SELECT","SENSITIVE","SESSION_USER","SET","SIMILAR","SMALLINT","SOME","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","START","STATIC","SUBMULTISET","SYMMETRIC","SYSTEM","SYSTEM_USER","TABLE","TABLESAMPLE","THEN","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSLATION","TREAT","TRIGGER","TRUE","UESCAPE","UNION","UNIQUE","UNKNOWN","UNNEST","UPDATE","USER","USING","VALUE","VALUES","VARBINARY","VARCHAR","VARYING","WHENEVER","WINDOW","WITHIN","WITHOUT","YEAR"]}),iI=P(["SELECT [ALL | DISTINCT]"]),oI=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","UPDATE","SET","WHERE CURRENT OF","DELETE FROM","TRUNCATE TABLE","CREATE [RECURSIVE] VIEW","CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE","DROP TABLE","ALTER TABLE","ADD COLUMN","DROP [COLUMN]","RENAME COLUMN","RENAME TO","ALTER [COLUMN]","{SET | DROP} DEFAULT","ADD SCOPE","DROP SCOPE {CASCADE | RESTRICT}","RESTART WITH","SET SCHEMA"]),PI=P(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),DI=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),MI=P(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]);class lI extends eE{tokenizer(){return new RE({reservedClauses:oI,reservedSelect:iI,reservedSetOperations:PI,reservedJoins:DI,reservedPhrases:MI,reservedKeywords:LI,reservedFunctionNames:CI,stringTypes:[{quote:"''-qq-bs",prefixes:["N","U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``"],paramTypes:{positional:!0},operators:["||"]})}}const UI=X({all:["ABS","ACOS","ALL_MATCH","ANY_MATCH","APPROX_DISTINCT","APPROX_MOST_FREQUENT","APPROX_PERCENTILE","APPROX_SET","ARBITRARY","ARRAYS_OVERLAP","ARRAY_AGG","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_SORT","ARRAY_UNION","ASIN","ATAN","ATAN2","AT_TIMEZONE","AVG","BAR","BETA_CDF","BING_TILE","BING_TILES_AROUND","BING_TILE_AT","BING_TILE_COORDINATES","BING_TILE_POLYGON","BING_TILE_QUADKEY","BING_TILE_ZOOM_LEVEL","BITWISE_AND","BITWISE_AND_AGG","BITWISE_LEFT_SHIFT","BITWISE_NOT","BITWISE_OR","BITWISE_OR_AGG","BITWISE_RIGHT_SHIFT","BITWISE_RIGHT_SHIFT_ARITHMETIC","BITWISE_XOR","BIT_COUNT","BOOL_AND","BOOL_OR","CARDINALITY","CAST","CBRT","CEIL","CEILING","CHAR2HEXINT","CHECKSUM","CHR","CLASSIFY","COALESCE","CODEPOINT","COLOR","COMBINATIONS","CONCAT","CONCAT_WS","CONTAINS","CONTAINS_SEQUENCE","CONVEX_HULL_AGG","CORR","COS","COSH","COSINE_SIMILARITY","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CRC32","CUME_DIST","CURRENT_CATALOG","CURRENT_DATE","CURRENT_GROUPS","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","DATE","DATE_ADD","DATE_DIFF","DATE_FORMAT","DATE_PARSE","DATE_TRUNC","DAY","DAY_OF_MONTH","DAY_OF_WEEK","DAY_OF_YEAR","DEGREES","DENSE_RANK","DOW","DOY","E","ELEMENT_AT","EMPTY_APPROX_SET","EVALUATE_CLASSIFIER_PREDICTIONS","EVERY","EXP","EXTRACT","FEATURES","FILTER","FIRST_VALUE","FLATTEN","FLOOR","FORMAT","FORMAT_DATETIME","FORMAT_NUMBER","FROM_BASE","FROM_BASE32","FROM_BASE64","FROM_BASE64URL","FROM_BIG_ENDIAN_32","FROM_BIG_ENDIAN_64","FROM_ENCODED_POLYLINE","FROM_GEOJSON_GEOMETRY","FROM_HEX","FROM_IEEE754_32","FROM_IEEE754_64","FROM_ISO8601_DATE","FROM_ISO8601_TIMESTAMP","FROM_ISO8601_TIMESTAMP_NANOS","FROM_UNIXTIME","FROM_UNIXTIME_NANOS","FROM_UTF8","GEOMETRIC_MEAN","GEOMETRY_FROM_HADOOP_SHAPE","GEOMETRY_INVALID_REASON","GEOMETRY_NEAREST_POINTS","GEOMETRY_TO_BING_TILES","GEOMETRY_UNION","GEOMETRY_UNION_AGG","GREATEST","GREAT_CIRCLE_DISTANCE","HAMMING_DISTANCE","HASH_COUNTS","HISTOGRAM","HMAC_MD5","HMAC_SHA1","HMAC_SHA256","HMAC_SHA512","HOUR","HUMAN_READABLE_SECONDS","IF","INDEX","INFINITY","INTERSECTION_CARDINALITY","INVERSE_BETA_CDF","INVERSE_NORMAL_CDF","IS_FINITE","IS_INFINITE","IS_JSON_SCALAR","IS_NAN","JACCARD_INDEX","JSON_ARRAY_CONTAINS","JSON_ARRAY_GET","JSON_ARRAY_LENGTH","JSON_EXISTS","JSON_EXTRACT","JSON_EXTRACT_SCALAR","JSON_FORMAT","JSON_PARSE","JSON_QUERY","JSON_SIZE","JSON_VALUE","KURTOSIS","LAG","LAST_DAY_OF_MONTH","LAST_VALUE","LEAD","LEARN_CLASSIFIER","LEARN_LIBSVM_CLASSIFIER","LEARN_LIBSVM_REGRESSOR","LEARN_REGRESSOR","LEAST","LENGTH","LEVENSHTEIN_DISTANCE","LINE_INTERPOLATE_POINT","LINE_INTERPOLATE_POINTS","LINE_LOCATE_POINT","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","LUHN_CHECK","MAKE_SET_DIGEST","MAP","MAP_AGG","MAP_CONCAT","MAP_ENTRIES","MAP_FILTER","MAP_FROM_ENTRIES","MAP_KEYS","MAP_UNION","MAP_VALUES","MAP_ZIP_WITH","MAX","MAX_BY","MD5","MERGE","MERGE_SET_DIGEST","MILLISECOND","MIN","MINUTE","MIN_BY","MOD","MONTH","MULTIMAP_AGG","MULTIMAP_FROM_ENTRIES","MURMUR3","NAN","NGRAMS","NONE_MATCH","NORMALIZE","NORMAL_CDF","NOW","NTH_VALUE","NTILE","NULLIF","NUMERIC_HISTOGRAM","OBJECTID","OBJECTID_TIMESTAMP","PARSE_DATA_SIZE","PARSE_DATETIME","PARSE_DURATION","PERCENT_RANK","PI","POSITION","POW","POWER","QDIGEST_AGG","QUARTER","RADIANS","RAND","RANDOM","RANK","REDUCE","REDUCE_AGG","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGRESS","REGR_INTERCEPT","REGR_SLOPE","RENDER","REPEAT","REPLACE","REVERSE","RGB","ROUND","ROW_NUMBER","RPAD","RTRIM","SECOND","SEQUENCE","SHA1","SHA256","SHA512","SHUFFLE","SIGN","SIMPLIFY_GEOMETRY","SIN","SKEWNESS","SLICE","SOUNDEX","SPATIAL_PARTITIONING","SPATIAL_PARTITIONS","SPLIT","SPLIT_PART","SPLIT_TO_MAP","SPLIT_TO_MULTIMAP","SPOOKY_HASH_V2_32","SPOOKY_HASH_V2_64","SQRT","STARTS_WITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRPOS","ST_AREA","ST_ASBINARY","ST_ASTEXT","ST_BOUNDARY","ST_BUFFER","ST_CENTROID","ST_CONTAINS","ST_CONVEXHULL","ST_COORDDIM","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_ENDPOINT","ST_ENVELOPE","ST_ENVELOPEASPTS","ST_EQUALS","ST_EXTERIORRING","ST_GEOMETRIES","ST_GEOMETRYFROMTEXT","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMBINARY","ST_INTERIORRINGN","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISRING","ST_ISSIMPLE","ST_ISVALID","ST_LENGTH","ST_LINEFROMTEXT","ST_LINESTRING","ST_MULTIPOINT","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINT","ST_POINTN","ST_POINTS","ST_POLYGON","ST_RELATE","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_TOUCHES","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","SUBSTR","SUBSTRING","SUM","TAN","TANH","TDIGEST_AGG","TIMESTAMP_OBJECTID","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO_BASE","TO_BASE32","TO_BASE64","TO_BASE64URL","TO_BIG_ENDIAN_32","TO_BIG_ENDIAN_64","TO_CHAR","TO_DATE","TO_ENCODED_POLYLINE","TO_GEOJSON_GEOMETRY","TO_GEOMETRY","TO_HEX","TO_IEEE754_32","TO_IEEE754_64","TO_ISO8601","TO_MILLISECONDS","TO_SPHERICAL_GEOGRAPHY","TO_TIMESTAMP","TO_UNIXTIME","TO_UTF8","TRANSFORM","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRY","TRY_CAST","TYPEOF","UPPER","URL_DECODE","URL_ENCODE","URL_EXTRACT_FRAGMENT","URL_EXTRACT_HOST","URL_EXTRACT_PARAMETER","URL_EXTRACT_PATH","URL_EXTRACT_PORT","URL_EXTRACT_PROTOCOL","URL_EXTRACT_QUERY","UUID","VALUES_AT_QUANTILES","VALUE_AT_QUANTILE","VARIANCE","VAR_POP","VAR_SAMP","VERSION","WEEK","WEEK_OF_YEAR","WIDTH_BUCKET","WILSON_INTERVAL_LOWER","WILSON_INTERVAL_UPPER","WITH_TIMEZONE","WORD_STEM","XXHASH64","YEAR","YEAR_OF_WEEK","YOW","ZIP","ZIP_WITH"],rowPattern:["CLASSIFIER","FIRST","LAST","MATCH_NUMBER","NEXT","PERMUTE","PREV"]}),cI=X({all:["ABSENT","ADD","ADMIN","AFTER","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","AUTHORIZATION","BERNOULLI","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CATALOGS","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","CONDITIONAL","CONSTRAINT","COPARTITION","CREATE","CROSS","CUBE","CURRENT","CURRENT_PATH","CURRENT_ROLE","DATA","DEALLOCATE","DEFAULT","DEFINE","DEFINER","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DISTINCT","DISTRIBUTED","DOUBLE","DROP","ELSE","EMPTY","ENCODING","END","ERROR","ESCAPE","EXCEPT","EXCLUDING","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FINAL","FIRST","FOLLOWING","FOR","FROM","FULL","FUNCTIONS","GRANT","GRANTED","GRANTS","GRAPHVIZ","GROUP","GROUPING","GROUPS","HAVING","IGNORE","IN","INCLUDING","INITIAL","INNER","INPUT","INSERT","INTERSECT","INTERVAL","INTO","INVOKER","IO","IS","ISOLATION","JOIN","JSON","JSON_ARRAY","JSON_OBJECT","KEEP","KEY","KEYS","LAST","LATERAL","LEADING","LEFT","LEVEL","LIKE","LIMIT","LOCAL","LOGICAL","MATCH","MATCHED","MATCHES","MATCH_RECOGNIZE","MATERIALIZED","MEASURES","NATURAL","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NOT","NULL","NULLS","OBJECT","OF","OFFSET","OMIT","ON","ONE","ONLY","OPTION","OR","ORDER","ORDINALITY","OUTER","OUTPUT","OVER","OVERFLOW","PARTITION","PARTITIONS","PASSING","PAST","PATH","PATTERN","PER","PERMUTE","PRECEDING","PRECISION","PREPARE","PRIVILEGES","PROPERTIES","PRUNE","QUOTES","RANGE","READ","RECURSIVE","REFRESH","RENAME","REPEATABLE","RESET","RESPECT","RESTRICT","RETURNING","REVOKE","RIGHT","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","RUNNING","SCALAR","SCHEMA","SCHEMAS","SECURITY","SEEK","SELECT","SERIALIZABLE","SESSION","SET","SETS","SHOW","SKIP","SOME","START","STATS","STRING","SUBSET","SYSTEM","TABLE","TABLES","TABLESAMPLE","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRUE","TYPE","UESCAPE","UNBOUNDED","UNCOMMITTED","UNCONDITIONAL","UNION","UNIQUE","UNKNOWN","UNMATCHED","UNNEST","UPDATE","USE","USER","USING","UTF16","UTF32","UTF8","VALIDATE","VALUE","VALUES","VERBOSE","VIEW","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","ZONE"],types:["BIGINT","INT","INTEGER","SMALLINT","TINYINT","BOOLEAN","DATE","DECIMAL","REAL","DOUBLE","HYPERLOGLOG","QDIGEST","TDIGEST","P4HYPERLOGLOG","INTERVAL","TIMESTAMP","TIME","VARBINARY","VARCHAR","CHAR","ROW","ARRAY","MAP","JSON","JSON2016","IPADDRESS","GEOMETRY","UUID","SETDIGEST","JONIREGEXP","RE2JREGEXP","LIKEPATTERN","COLOR","CODEPOINTS","FUNCTION","JSONPATH"]}),uI=P(["SELECT [ALL | DISTINCT]"]),dI=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","UPDATE","SET","DELETE FROM","TRUNCATE TABLE","CREATE [OR REPLACE] [MATERIALIZED] VIEW","CREATE TABLE [IF NOT EXISTS]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME COLUMN [IF EXISTS]","RENAME TO","SET AUTHORIZATION [USER | ROLE]","SET PROPERTIES","EXECUTE","ALTER SCHEMA","ALTER MATERIALIZED VIEW","ALTER VIEW","CREATE SCHEMA","CREATE ROLE","DROP SCHEMA","DROP COLUMN","DROP MATERIALIZED VIEW","DROP VIEW","DROP ROLE","EXPLAIN","ANALYZE","EXPLAIN ANALYZE","EXPLAIN ANALYZE VERBOSE","USE","COMMENT ON TABLE","COMMENT ON COLUMN","DESCRIBE INPUT","DESCRIBE OUTPUT","REFRESH MATERIALIZED VIEW","RESET SESSION","SET SESSION","SET PATH","SET TIME ZONE","SHOW GRANTS","SHOW CREATE TABLE","SHOW CREATE SCHEMA","SHOW CREATE VIEW","SHOW CREATE MATERIALIZED VIEW","SHOW TABLES","SHOW SCHEMAS","SHOW CATALOGS","SHOW COLUMNS","SHOW STATS FOR","SHOW ROLES","SHOW CURRENT ROLES","SHOW ROLE GRANTS","SHOW FUNCTIONS","SHOW SESSION","MATCH_RECOGNIZE","MEASURES","ONE ROW PER MATCH","ALL ROWS PER MATCH","AFTER MATCH","PATTERN","SUBSET","DEFINE"]),GI=P(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),fI=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),pI=P(["{ROWS | RANGE | GROUPS} BETWEEN"]);class hI extends eE{tokenizer(){return new RE({reservedClauses:dI,reservedSelect:uI,reservedSetOperations:GI,reservedJoins:fI,reservedPhrases:pI,reservedKeywords:cI,reservedFunctionNames:UI,extraParens:["[]","{}"],stringTypes:[{quote:"''-qq",prefixes:["U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0},operators:["%","->",":","||","|","^","$"]})}}const HI=X({aggregate:["APPROX_COUNT_DISTINCT","AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","STDEV","STDEVP","SUM","VAR","VARP"],analytic:["CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","Collation - COLLATIONPROPERTY","Collation - TERTIARY_WEIGHTS"],configuration:["@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION"],conversion:["CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE"],cryptographic:["ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY"],cursor:["@@CURSOR_ROWS","@@FETCH_STATUS","CURSOR_STATUS"],dataType:["DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY"],datetime:["@@DATEFIRST","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_TIMEZONE_ID","DATEADD","DATEDIFF","DATEDIFF_BIG","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","JSON","ISJSON","JSON_VALUE","JSON_QUERY","JSON_MODIFY"],mathematical:["ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","CHOOSE","GREATEST","IIF","LEAST"],metadata:["@@PROCID","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FILEPROPERTYEX","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","NEXT VALUE FOR","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY"],ranking:["DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME"],security:["CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","DATABASE_PRINCIPAL_ID","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME"],string:["ASCII","CHAR","CHARINDEX","CONCAT","CONCAT_WS","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","NCHAR","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STRING_AGG","STRING_ESCAPE","STUFF","SUBSTRING","TRANSLATE","TRIM","UNICODE","UPPER"],system:["$PARTITION","@@ERROR","@@IDENTITY","@@PACK_RECEIVED","@@ROWCOUNT","@@TRANCOUNT","BINARY_CHECKSUM","CHECKSUM","COMPRESS","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","CURRENT_TRANSACTION_ID","DECOMPRESS","ERROR_LINE","ERROR_MESSAGE","ERROR_NUMBER","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GET_FILESTREAM_TRANSACTION_CONTEXT","GETANSINULL","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","SESSION_CONTEXT","XACT_STATE"],statistical:["@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACK_SENT","@@PACKET_ERRORS","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE","TEXTPTR","TEXTVALID"],trigger:["COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","NUMERIC","FLOAT","REAL","DATETIME2","DATETIMEOFFSET","TIME","CHAR","VARCHAR","NCHAR","NVARCHAR","BINARY","VARBINARY"]}),mI=X({standard:["ADD","ALL","ALTER","AND","ANY","AS","ASC","AUTHORIZATION","BACKUP","BEGIN","BETWEEN","BREAK","BROWSE","BULK","BY","CASCADE","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLUMN","COMMIT","COMPUTE","CONSTRAINT","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DBCC","DEALLOCATE","DECLARE","DEFAULT","DELETE","DENY","DESC","DISK","DISTINCT","DISTRIBUTED","DOUBLE","DROP","DUMP","ERRLVL","ESCAPE","EXEC","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FILE","FILLFACTOR","FOR","FOREIGN","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GOTO","GRANT","GROUP","HAVING","HOLDLOCK","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IN","INDEX","INNER","INSERT","INTERSECT","INTO","IS","JOIN","KEY","KILL","LEFT","LIKE","LINENO","LOAD","MERGE","NATIONAL","NOCHECK","NONCLUSTERED","NOT","NULL","NULLIF","OF","OFF","OFFSETS","ON","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OUTER","OVER","PERCENT","PIVOT","PLAN","PRECISION","PRIMARY","PRINT","PROC","PROCEDURE","PUBLIC","RAISERROR","READ","READTEXT","RECONFIGURE","REFERENCES","REPLICATION","RESTORE","RESTRICT","RETURN","REVERT","REVOKE","RIGHT","ROLLBACK","ROWCOUNT","ROWGUIDCOL","RULE","SAVE","SCHEMA","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION_USER","SET","SETUSER","SHUTDOWN","SOME","STATISTICS","SYSTEM_USER","TABLE","TABLESAMPLE","TEXTSIZE","THEN","TO","TOP","TRAN","TRANSACTION","TRIGGER","TRUNCATE","TRY_CONVERT","TSEQUAL","UNION","UNIQUE","UNPIVOT","UPDATE","UPDATETEXT","USE","USER","VALUES","VARYING","VIEW","WAITFOR","WHERE","WHILE","WITH","WITHIN GROUP","WRITETEXT"],odbc:["ABSOLUTE","ACTION","ADA","ADD","ALL","ALLOCATE","ALTER","AND","ANY","ARE","AS","ASC","ASSERTION","AT","AUTHORIZATION","AVG","BEGIN","BETWEEN","BIT","BIT_LENGTH","BOTH","BY","CASCADE","CASCADED","CAST","CATALOG","CHAR","CHARACTER","CHARACTER_LENGTH","CHAR_LENGTH","CHECK","CLOSE","COALESCE","COLLATE","COLLATION","COLUMN","COMMIT","CONNECT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTINUE","CONVERT","CORRESPONDING","COUNT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DESCRIBE","DESCRIPTOR","DIAGNOSTICS","DISCONNECT","DISTINCT","DOMAIN","DOUBLE","DROP","END-EXEC","ESCAPE","EXCEPTION","EXEC","EXECUTE","EXISTS","EXTERNAL","EXTRACT","FALSE","FETCH","FIRST","FLOAT","FOR","FOREIGN","FORTRAN","FOUND","FROM","FULL","GET","GLOBAL","GO","GOTO","GRANT","GROUP","HAVING","HOUR","IDENTITY","IMMEDIATE","IN","INCLUDE","INDEX","INDICATOR","INITIALLY","INNER","INPUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","ISOLATION","JOIN","KEY","LANGUAGE","LAST","LEADING","LEFT","LEVEL","LIKE","LOCAL","LOWER","MATCH","MAX","MIN","MINUTE","MODULE","MONTH","NAMES","NATIONAL","NATURAL","NCHAR","NEXT","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OCTET_LENGTH","OF","ONLY","OPEN","OPTION","OR","ORDER","OUTER","OUTPUT","OVERLAPS","PAD","PARTIAL","PASCAL","POSITION","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURE","PUBLIC","READ","REAL","REFERENCES","RELATIVE","RESTRICT","REVOKE","RIGHT","ROLLBACK","ROWS","SCHEMA","SCROLL","SECOND","SECTION","SELECT","SESSION","SESSION_USER","SET","SIZE","SMALLINT","SOME","SPACE","SQL","SQLCA","SQLCODE","SQLERROR","SQLSTATE","SQLWARNING","SUBSTRING","SUM","SYSTEM_USER","TABLE","TEMPORARY","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSACTION","TRANSLATE","TRANSLATION","TRIM","TRUE","UNION","UNIQUE","UNKNOWN","UPDATE","UPPER","USAGE","USER","VALUE","VALUES","VARCHAR","VARYING","VIEW","WHENEVER","WHERE","WITH","WORK","WRITE","YEAR","ZONE"]}),BI=P(["SELECT [ALL | DISTINCT]"]),YI=P(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","OFFSET","FETCH {FIRST | NEXT}","INSERT [INTO]","VALUES","UPDATE","SET","WHERE CURRENT OF","DELETE [FROM]","TRUNCATE TABLE","MERGE [INTO]","WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]","UPDATE SET","CREATE [OR ALTER] [MATERIALIZED] VIEW","CREATE TABLE","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD","DROP COLUMN [IF EXISTS]","ALTER COLUMN","ADD SENSITIVITY CLASSIFICATION","ADD SIGNATURE","AGGREGATE","ANSI_DEFAULTS","ANSI_NULLS","ANSI_NULL_DFLT_OFF","ANSI_NULL_DFLT_ON","ANSI_PADDING","ANSI_WARNINGS","APPLICATION ROLE","ARITHABORT","ARITHIGNORE","ASSEMBLY","ASYMMETRIC KEY","AUTHORIZATION","AVAILABILITY GROUP","BACKUP","BACKUP CERTIFICATE","BACKUP MASTER KEY","BACKUP SERVICE MASTER KEY","BEGIN CONVERSATION TIMER","BEGIN DIALOG CONVERSATION","BROKER PRIORITY","BULK INSERT","CERTIFICATE","CLOSE MASTER KEY","CLOSE SYMMETRIC KEY","COLLATE","COLUMN ENCRYPTION KEY","COLUMN MASTER KEY","COLUMNSTORE INDEX","CONCAT_NULL_YIELDS_NULL","CONTEXT_INFO","CONTRACT","CREDENTIAL","CRYPTOGRAPHIC PROVIDER","CURSOR_CLOSE_ON_COMMIT","DATABASE","DATABASE AUDIT SPECIFICATION","DATABASE ENCRYPTION KEY","DATABASE HADR","DATABASE SCOPED CONFIGURATION","DATABASE SCOPED CREDENTIAL","DATABASE SET","DATEFIRST","DATEFORMAT","DEADLOCK_PRIORITY","DENY","DENY XML","DISABLE TRIGGER","ENABLE TRIGGER","END CONVERSATION","ENDPOINT","EVENT NOTIFICATION","EVENT SESSION","EXECUTE AS","EXTERNAL DATA SOURCE","EXTERNAL FILE FORMAT","EXTERNAL LANGUAGE","EXTERNAL LIBRARY","EXTERNAL RESOURCE POOL","EXTERNAL TABLE","FIPS_FLAGGER","FMTONLY","FORCEPLAN","FULLTEXT CATALOG","FULLTEXT INDEX","FULLTEXT STOPLIST","FUNCTION","GET CONVERSATION GROUP","GET_TRANSMISSION_STATUS","GRANT","GRANT XML","IDENTITY_INSERT","IMPLICIT_TRANSACTIONS","INDEX","LANGUAGE","LOCK_TIMEOUT","LOGIN","MASTER KEY","MESSAGE TYPE","MOVE CONVERSATION","NOCOUNT","NOEXEC","NUMERIC_ROUNDABORT","OFFSETS","OPEN MASTER KEY","OPEN SYMMETRIC KEY","PARSEONLY","PARTITION FUNCTION","PARTITION SCHEME","PROCEDURE","QUERY_GOVERNOR_COST_LIMIT","QUEUE","QUOTED_IDENTIFIER","RECEIVE","REMOTE SERVICE BINDING","REMOTE_PROC_TRANSACTIONS","RESOURCE GOVERNOR","RESOURCE POOL","RESTORE","RESTORE FILELISTONLY","RESTORE HEADERONLY","RESTORE LABELONLY","RESTORE MASTER KEY","RESTORE REWINDONLY","RESTORE SERVICE MASTER KEY","RESTORE VERIFYONLY","REVERT","REVOKE","REVOKE XML","ROLE","ROUTE","ROWCOUNT","RULE","SCHEMA","SEARCH PROPERTY LIST","SECURITY POLICY","SELECTIVE XML INDEX","SEND","SENSITIVITY CLASSIFICATION","SEQUENCE","SERVER AUDIT","SERVER AUDIT SPECIFICATION","SERVER CONFIGURATION","SERVER ROLE","SERVICE","SERVICE MASTER KEY","SETUSER","SHOWPLAN_ALL","SHOWPLAN_TEXT","SHOWPLAN_XML","SIGNATURE","SPATIAL INDEX","STATISTICS","STATISTICS IO","STATISTICS PROFILE","STATISTICS TIME","STATISTICS XML","SYMMETRIC KEY","SYNONYM","TABLE","TABLE IDENTITY","TEXTSIZE","TRANSACTION ISOLATION LEVEL","TRIGGER","TYPE","UPDATE STATISTICS","USER","WORKLOAD GROUP","XACT_ABORT","XML INDEX","XML SCHEMA COLLECTION"]),FI=P(["UNION [ALL]","EXCEPT","INTERSECT"]),VI=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{CROSS | OUTER} APPLY"]),yI=P(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]);class xe extends eE{tokenizer(){return new RE({reservedClauses:YI,reservedSelect:BI,reservedSetOperations:FI,reservedJoins:VI,reservedPhrases:yI,reservedKeywords:mI,reservedFunctionNames:HI,nestedBlockComments:!0,stringTypes:[{quote:"''-qq",prefixes:["N"]}],identTypes:['""-qq',"[]"],identChars:{first:"#@",rest:"#@$"},paramTypes:{named:["@"],quoted:["@"]},operators:["%","&","|","^","~","!<","!>","+=","-=","*=","/=","%=","|=","&=","^=","::"]})}formatOptions(){return{alwaysDenseOperators:["::"]}}}const WI=X({all:["ABORT","ABSOLUTE","ACCESS","ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","AGGREGATES","AGGREGATOR","AGGREGATOR_ID","AGGREGATOR_PLAN_HASH","AGGREGATORS","ALGORITHM","ALL","ALSO","ALTER","ALWAYS","ANALYZE","AND","ANY","ARGHISTORY","ARRANGE","ARRANGEMENT","ARRAY","AS","ASC","ASCII","ASENSITIVE","ASM","ASSERTION","ASSIGNMENT","AST","ASYMMETRIC","ASYNC","AT","ATTACH","ATTRIBUTE","AUTHORIZATION","AUTO","AUTO_INCREMENT","AUTO_REPROVISION","AUTOSTATS","AUTOSTATS_CARDINALITY_MODE","AUTOSTATS_ENABLED","AUTOSTATS_HISTOGRAM_MODE","AUTOSTATS_SAMPLING","AVAILABILITY","AVG","AVG_ROW_LENGTH","AVRO","AZURE","BACKGROUND","_BACKGROUND_THREADS_FOR_CLEANUP","BACKUP","BACKUP_HISTORY","BACKUP_ID","BACKWARD","BATCH","BATCHES","BATCH_INTERVAL","_BATCH_SIZE_LIMIT","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","_BINARY","BIT","BLOB","BOOL","BOOLEAN","BOOTSTRAP","BOTH","_BT","BTREE","BUCKET_COUNT","BUCKETS","BY","BYTE","BYTE_LENGTH","CACHE","CALL","CALL_FOR_PIPELINE","CALLED","CAPTURE","CASCADE","CASCADED","CASE","CATALOG","CHAIN","CHANGE","CHAR","CHARACTER","CHARACTERISTICS","CHARSET","CHECK","CHECKPOINT","_CHECK_CAN_CONNECT","_CHECK_CONSISTENCY","CHECKSUM","_CHECKSUM","CLASS","CLEAR","CLIENT","CLIENT_FOUND_ROWS","CLOSE","CLUSTER","CLUSTERED","CNF","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNAR","COLUMNS","COLUMNSTORE","COLUMNSTORE_SEGMENT_ROWS","COMMENT","COMMENTS","COMMIT","COMMITTED","_COMMIT_LOG_TAIL","COMPACT","COMPILE","COMPRESSED","COMPRESSION","CONCURRENT","CONCURRENTLY","CONDITION","CONFIGURATION","CONNECTION","CONNECTIONS","CONFIG","CONSTRAINT","CONTAINS","CONTENT","CONTINUE","_CONTINUE_REPLAY","CONVERSION","CONVERT","COPY","_CORE","COST","CREATE","CREDENTIALS","CROSS","CUBE","CSV","CUME_DIST","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_SCHEMA","CURRENT_SECURITY_GROUPS","CURRENT_SECURITY_ROLES","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DATABASES","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINED","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELIMITER","DELIMITERS","DENSE_RANK","DESC","DESCRIBE","DETACH","DETERMINISTIC","DICTIONARY","DIFFERENTIAL","DIRECTORY","DISABLE","DISCARD","_DISCONNECT","DISK","DISTINCT","DISTINCTROW","DISTRIBUTED_JOINS","DIV","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","_DROP_PROFILE","DUAL","DUMP","DUPLICATE","DURABILITY","DYNAMIC","EARLIEST","EACH","ECHO","ELECTION","ELSE","ELSEIF","ENABLE","ENCLOSED","ENCODING","ENCRYPTED","END","ENGINE","ENGINES","ENUM","ERRORS","ESCAPE","ESCAPED","ESTIMATE","EVENT","EVENTS","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTENDED","EXTENSION","EXTERNAL","EXTERNAL_HOST","EXTERNAL_PORT","EXTRACTOR","EXTRACTORS","EXTRA_JOIN","_FAILOVER","FAILED_LOGIN_ATTEMPTS","FAILURE","FALSE","FAMILY","FAULT","FETCH","FIELDS","FILE","FILES","FILL","FIX_ALTER","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOR","FORCE","FORCE_COMPILED_MODE","FORCE_INTERPRETER_MODE","FOREGROUND","FOREIGN","FORMAT","FORWARD","FREEZE","FROM","FS","_FSYNC","FULL","FULLTEXT","FUNCTION","FUNCTIONS","GC","GCS","GET_FORMAT","_GC","_GCX","GENERATE","GEOGRAPHY","GEOGRAPHYPOINT","GEOMETRY","GEOMETRYPOINT","GLOBAL","_GLOBAL_VERSION_TIMESTAMP","GRANT","GRANTED","GRANTS","GROUP","GROUPING","GROUPS","GZIP","HANDLE","HANDLER","HARD_CPU_LIMIT_PERCENTAGE","HASH","HAS_TEMP_TABLES","HAVING","HDFS","HEADER","HEARTBEAT_NO_LOGGING","HIGH_PRIORITY","HISTOGRAM","HOLD","HOLDING","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IDENTITY","IF","IGNORE","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDING","INCREMENT","INCREMENTAL","INDEX","INDEXES","INFILE","INHERIT","INHERITS","_INIT_PROFILE","INIT","INITIALIZE","INITIALLY","INJECT","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTANCE","INSTEAD","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","_INTERNAL_DYNAMIC_TYPECAST","INTERPRETER_MODE","INTERSECT","INTERVAL","INTO","INVOKER","ISOLATION","ITERATE","JOIN","JSON","KAFKA","KEY","KEY_BLOCK_SIZE","KEYS","KILL","KILLALL","LABEL","LAG","LANGUAGE","LARGE","LAST","LAST_VALUE","LATERAL","LATEST","LC_COLLATE","LC_CTYPE","LEAD","LEADING","LEAF","LEAKPROOF","LEAVE","LEAVES","LEFT","LEVEL","LICENSE","LIKE","LIMIT","LINES","LISTEN","LLVM","LOADDATA_WHERE","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","_LS","LZ4","MANAGEMENT","_MANAGEMENT_THREAD","MAPPING","MASTER","MATCH","MATERIALIZED","MAXVALUE","MAX_CONCURRENCY","MAX_ERRORS","MAX_PARTITIONS_PER_BATCH","MAX_QUEUE_DEPTH","MAX_RETRIES_PER_BATCH_PARTITION","MAX_ROWS","MBC","MPL","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MEMORY_PERCENTAGE","_MEMSQL_TABLE_ID_LOOKUP","MEMSQL","MEMSQL_DESERIALIZE","MEMSQL_IMITATING_KAFKA","MEMSQL_SERIALIZE","MERGE","METADATA","MICROSECOND","MIDDLEINT","MIN_ROWS","MINUS","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MOD","MODE","MODEL","MODIFIES","MODIFY","MONTH","MOVE","MPL","NAMES","NAMED","NAMESPACE","NATIONAL","NATURAL","NCHAR","NEXT","NO","NODE","NONE","NO_QUERY_REWRITE","NOPARAM","NOT","NOTHING","NOTIFY","NOWAIT","NO_WRITE_TO_BINLOG","NO_QUERY_REWRITE","NORELY","NTH_VALUE","NTILE","NULL","NULLCOLS","NULLS","NUMERIC","NVARCHAR","OBJECT","OF","OFF","OFFLINE","OFFSET","OFFSETS","OIDS","ON","ONLINE","ONLY","OPEN","OPERATOR","OPTIMIZATION","OPTIMIZE","OPTIMIZER","OPTIMIZER_STATE","OPTION","OPTIONS","OPTIONALLY","OR","ORDER","ORDERED_SERIALIZE","ORPHAN","OUT","OUT_OF_ORDER","OUTER","OUTFILE","OVER","OVERLAPS","OVERLAY","OWNED","OWNER","PACK_KEYS","PAIRED","PARSER","PARQUET","PARTIAL","PARTITION","PARTITION_ID","PARTITIONING","PARTITIONS","PASSING","PASSWORD","PASSWORD_LOCK_TIME","PAUSE","_PAUSE_REPLAY","PERIODIC","PERSISTED","PIPELINE","PIPELINES","PLACING","PLAN","PLANS","PLANCACHE","PLUGINS","POOL","POOLS","PORT","PRECEDING","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROGRAM","PROMOTE","PROXY","PURGE","QUARTER","QUERIES","QUERY","QUERY_TIMEOUT","QUEUE","RANGE","RANK","READ","_READ","READS","REAL","REASSIGN","REBALANCE","RECHECK","RECORD","RECURSIVE","REDUNDANCY","REDUNDANT","REF","REFERENCE","REFERENCES","REFRESH","REGEXP","REINDEX","RELATIVE","RELEASE","RELOAD","RELY","REMOTE","REMOVE","RENAME","REPAIR","_REPAIR_TABLE","REPEAT","REPEATABLE","_REPL","_REPROVISIONING","REPLACE","REPLICA","REPLICATE","REPLICATING","REPLICATION","REQUIRE","RESOURCE","RESOURCE_POOL","RESET","RESTART","RESTORE","RESTRICT","RESULT","_RESURRECT","RETRY","RETURN","RETURNING","RETURNS","REVERSE","RG_POOL","REVOKE","RIGHT","RIGHT_ANTI_JOIN","RIGHT_SEMI_JOIN","RIGHT_STRAIGHT_JOIN","RLIKE","ROLES","ROLLBACK","ROLLUP","ROUTINE","ROW","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","ROWS","ROWSTORE","RULE","_RPC","RUNNING","S3","SAFE","SAVE","SAVEPOINT","SCALAR","SCHEMA","SCHEMAS","SCHEMA_BINDING","SCROLL","SEARCH","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SEMI_JOIN","_SEND_THREADS","SENSITIVE","SEPARATOR","SEQUENCE","SEQUENCES","SERIAL","SERIALIZABLE","SERIES","SERVICE_USER","SERVER","SESSION","SESSION_USER","SET","SETOF","SECURITY_LISTS_INTERSECT","SHA","SHARD","SHARDED","SHARDED_ID","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMILAR","SIMPLE","SITE","SKIP","SKIPPED_BATCHES","__SLEEP","SMALLINT","SNAPSHOT","_SNAPSHOT","_SNAPSHOTS","SOFT_CPU_LIMIT_PERCENTAGE","SOME","SONAME","SPARSE","SPATIAL","SPATIAL_CHECK_INDEX","SPECIFIC","SQL","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQLEXCEPTION","SQL_MODE","SQL_NO_CACHE","SQL_NO_LOGGING","SQL_SMALL_RESULT","SQLSTATE","SQLWARNING","STDIN","STDOUT","STOP","STORAGE","STRAIGHT_JOIN","STRICT","STRING","STRIP","SUCCESS","SUPER","SYMMETRIC","SYNC_SNAPSHOT","SYNC","_SYNC","_SYNC2","_SYNC_PARTITIONS","_SYNC_SNAPSHOT","SYNCHRONIZE","SYSID","SYSTEM","TABLE","TABLE_CHECKSUM","TABLES","TABLESPACE","TAGS","TARGET_SIZE","TASK","TEMP","TEMPLATE","TEMPORARY","TEMPTABLE","_TERM_BUMP","TERMINATE","TERMINATED","TEXT","THEN","TIME","TIMEOUT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMEZONE","TINYBLOB","TINYINT","TINYTEXT","TO","TRACELOGS","TRADITIONAL","TRAILING","TRANSFORM","TRANSACTION","_TRANSACTIONS_EXPERIMENTAL","TREAT","TRIGGER","TRIGGERS","TRUE","TRUNC","TRUNCATE","TRUSTED","TWO_PHASE","_TWOPCID","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNENCRYPTED","UNENFORCED","UNHOLD","UNICODE","UNION","UNIQUE","_UNITTEST","UNKNOWN","UNLISTEN","_UNLOAD","UNLOCK","UNLOGGED","UNPIVOT","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USERS","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","_UTF8","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARIADIC","VARYING","VERBOSE","VIEW","VOID","VOLATILE","VOTING","WAIT","_WAKE","WARNINGS","WEEK","WHEN","WHERE","WHILE","WHITESPACE","WINDOW","WITH","WITHOUT","WITHIN","_WM_HEARTBEAT","WORK","WORKLOAD","WRAPPER","WRITE","XACT_ID","XOR","YEAR","YEAR_MONTH","YES","ZEROFILL","ZONE"]}),vI=X({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_ACCUMULATE","APPROX_COUNT_DISTINCT_COMBINE","APPROX_COUNT_DISTINCT_ESTIMATE","APPROX_GEOGRAPHY_INTERSECTS","APPROX_PERCENTILE","ASCII","ASIN","ATAN","ATAN2","AVG","BIN","BINARY","BIT_AND","BIT_COUNT","BIT_OR","BIT_XOR","CAST","CEIL","CEILING","CHAR","CHARACTER_LENGTH","CHAR_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COLLECT","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATEDIFF","DATE_FORMAT","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT","DEGREES","DENSE_RANK","DIV","DOT_PRODUCT","ELT","EUCLIDEAN_DISTANCE","EXP","EXTRACT","FIELD","FIRST","FIRST_VALUE","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOGRAPHY_AREA","GEOGRAPHY_CONTAINS","GEOGRAPHY_DISTANCE","GEOGRAPHY_INTERSECTS","GEOGRAPHY_LATITUDE","GEOGRAPHY_LENGTH","GEOGRAPHY_LONGITUDE","GEOGRAPHY_POINT","GEOGRAPHY_WITHIN_DISTANCE","GEOMETRY_AREA","GEOMETRY_CONTAINS","GEOMETRY_DISTANCE","GEOMETRY_FILTER","GEOMETRY_INTERSECTS","GEOMETRY_LENGTH","GEOMETRY_POINT","GEOMETRY_WITHIN_DISTANCE","GEOMETRY_X","GEOMETRY_Y","GREATEST","GROUPING","GROUP_CONCAT","HEX","HIGHLIGHT","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INITCAP","INSERT","INSTR","INTERVAL","IS","IS NULL","JSON_AGG","JSON_ARRAY_CONTAINS_DOUBLE","JSON_ARRAY_CONTAINS_JSON","JSON_ARRAY_CONTAINS_STRING","JSON_ARRAY_PUSH_DOUBLE","JSON_ARRAY_PUSH_JSON","JSON_ARRAY_PUSH_STRING","JSON_DELETE_KEY","JSON_EXTRACT_DOUBLE","JSON_EXTRACT_JSON","JSON_EXTRACT_STRING","JSON_EXTRACT_BIGINT","JSON_GET_TYPE","JSON_LENGTH","JSON_SET_DOUBLE","JSON_SET_JSON","JSON_SET_STRING","JSON_SPLICE_DOUBLE","JSON_SPLICE_JSON","JSON_SPLICE_STRING","LAG","LAST_DAY","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LN","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LPAD","LTRIM","MATCH","MAX","MD5","MEDIAN","MICROSECOND","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","NOT","NOW","NTH_VALUE","NTILE","NULLIF","OCTET_LENGTH","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIVOT","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANK","REGEXP","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCALAR","SCHEMA","SEC_TO_TIME","SHA1","SHA2","SIGMOID","SIGN","SIN","SLEEP","SPLIT","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUM","SYS_GUID","TAN","TIME","TIMEDIFF","TIME_BUCKET","TIME_FORMAT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_JSON","TO_NUMBER","TO_SECONDS","TO_TIMESTAMP","TRIM","TRUNC","TRUNCATE","UCASE","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","VALUES","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_SUB","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","YEAR","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]}),gI=P(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),XI=P(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [IGNORE] [INTO]","VALUES","REPLACE [INTO]","UPDATE","SET","DELETE [FROM]","TRUNCATE [TABLE]","CREATE VIEW","CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] [EXTERNAL] FUNCTION","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] TABLE","ADD [COLUMN]","ADD [UNIQUE] {INDEX | KEY}","DROP [COLUMN]","MODIFY [COLUMN]","CHANGE","RENAME [TO | AS]","ADD AGGREGATOR","ADD LEAF","AGGREGATOR SET AS MASTER","ALTER DATABASE","ALTER PIPELINE","ALTER RESOURCE POOL","ALTER USER","ALTER VIEW","ANALYZE TABLE","ATTACH DATABASE","ATTACH LEAF","ATTACH LEAF ALL","BACKUP DATABASE","BINLOG","BOOTSTRAP AGGREGATOR","CACHE INDEX","CALL","CHANGE","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK BLOB CHECKSUM","CHECK TABLE","CHECKSUM TABLE","CLEAR ORPHAN DATABASES","CLONE","COMMIT","CREATE DATABASE","CREATE GROUP","CREATE INDEX","CREATE LINK","CREATE MILESTONE","CREATE PIPELINE","CREATE RESOURCE POOL","CREATE ROLE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DETACH DATABASE","DETACH PIPELINE","DO","DROP DATABASE","DROP FUNCTION","DROP INDEX","DROP LINK","DROP PIPELINE","DROP PROCEDURE","DROP RESOURCE POOL","DROP ROLE","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","FORCE","GRANT","HANDLER","HELP","KILL CONNECTION","KILLALL QUERIES","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","REBALANCE PARTITIONS","RELEASE SAVEPOINT","REMOVE AGGREGATOR","REMOVE LEAF","REPAIR TABLE","REPLACE","REPLICATE DATABASE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","RESTORE DATABASE","RESTORE REDUNDANCY","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE FUNCTION","SHOW CREATE PIPELINE","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SNAPSHOT DATABASE","SOURCE_POS_WAIT","START GROUP_REPLICATION","START PIPELINE","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP PIPELINE","STOP REPLICA","STOP REPLICATING","STOP SLAVE","TEST PIPELINE","TRUNCATE TABLE","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),bI=P(["UNION [ALL | DISTINCT]","EXCEPT","INTERSECT","MINUS"]),KI=P(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),xI=P(["ON DELETE","ON UPDATE","CHARACTER SET","{ROWS | RANGE} BETWEEN"]);class wI extends eE{tokenizer(){return new RE({reservedClauses:XI,reservedSelect:gI,reservedSetOperations:bI,reservedJoins:KI,reservedPhrases:xI,reservedKeywords:WI,reservedFunctionNames:vI,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_$]+"},{quote:"``",prefixes:["@"],requirePrefix:!0}],lineCommentTypes:["--","#"],operators:[":=","&","|","^","~","<<",">>","<=>","&&","||"],postProcess:$I})}}function $I(T){return T.map((E,e)=>{const R=T[e+1]||ZE;return yE.SET(E)&&R.text==="("?{...E,type:_.RESERVED_FUNCTION_NAME}:E})}const JI=X({all:["ABS","ACOS","ACOSH","ADD_MONTHS","ALL_USER_NAMES","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","APPROX_PERCENTILE_ACCUMULATE","APPROX_PERCENTILE_COMBINE","APPROX_PERCENTILE_ESTIMATE","APPROX_TOP_K","APPROX_TOP_K_ACCUMULATE","APPROX_TOP_K_COMBINE","APPROX_TOP_K_ESTIMATE","APPROXIMATE_JACCARD_INDEX","APPROXIMATE_SIMILARITY","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_COMPACT","ARRAY_CONSTRUCT","ARRAY_CONSTRUCT_COMPACT","ARRAY_CONTAINS","ARRAY_INSERT","ARRAY_INTERSECTION","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_SIZE","ARRAY_SLICE","ARRAY_TO_STRING","ARRAY_UNION_AGG","ARRAY_UNIQUE_AGG","ARRAYS_OVERLAP","AS_ARRAY","AS_BINARY","AS_BOOLEAN","AS_CHAR","AS_VARCHAR","AS_DATE","AS_DECIMAL","AS_NUMBER","AS_DOUBLE","AS_REAL","AS_INTEGER","AS_OBJECT","AS_TIME","AS_TIMESTAMP_LTZ","AS_TIMESTAMP_NTZ","AS_TIMESTAMP_TZ","ASCII","ASIN","ASINH","ATAN","ATAN2","ATANH","AUTO_REFRESH_REGISTRATION_HISTORY","AUTOMATIC_CLUSTERING_HISTORY","AVG","BASE64_DECODE_BINARY","BASE64_DECODE_STRING","BASE64_ENCODE","BIT_LENGTH","BITAND","BITAND_AGG","BITMAP_BIT_POSITION","BITMAP_BUCKET_NUMBER","BITMAP_CONSTRUCT_AGG","BITMAP_COUNT","BITMAP_OR_AGG","BITNOT","BITOR","BITOR_AGG","BITSHIFTLEFT","BITSHIFTRIGHT","BITXOR","BITXOR_AGG","BOOLAND","BOOLAND_AGG","BOOLNOT","BOOLOR","BOOLOR_AGG","BOOLXOR","BOOLXOR_AGG","BUILD_SCOPED_FILE_URL","BUILD_STAGE_FILE_URL","CASE","CAST","CBRT","CEIL","CHARINDEX","CHECK_JSON","CHECK_XML","CHR","CHAR","COALESCE","COLLATE","COLLATION","COMPLETE_TASK_GRAPHS","COMPRESS","CONCAT","CONCAT_WS","CONDITIONAL_CHANGE_EVENT","CONDITIONAL_TRUE_EVENT","CONTAINS","CONVERT_TIMEZONE","COPY_HISTORY","CORR","COS","COSH","COT","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CUME_DIST","CURRENT_ACCOUNT","CURRENT_AVAILABLE_ROLES","CURRENT_CLIENT","CURRENT_DATABASE","CURRENT_DATE","CURRENT_IP_ADDRESS","CURRENT_REGION","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SECONDARY_ROLES","CURRENT_SESSION","CURRENT_STATEMENT","CURRENT_TASK_GRAPHS","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TRANSACTION","CURRENT_USER","CURRENT_VERSION","CURRENT_WAREHOUSE","DATA_TRANSFER_HISTORY","DATABASE_REFRESH_HISTORY","DATABASE_REFRESH_PROGRESS","DATABASE_REFRESH_PROGRESS_BY_JOB","DATABASE_STORAGE_USAGE_HISTORY","DATE_FROM_PARTS","DATE_PART","DATE_TRUNC","DATEADD","DATEDIFF","DAYNAME","DECODE","DECOMPRESS_BINARY","DECOMPRESS_STRING","DECRYPT","DECRYPT_RAW","DEGREES","DENSE_RANK","DIV0","EDITDISTANCE","ENCRYPT","ENCRYPT_RAW","ENDSWITH","EQUAL_NULL","EXP","EXPLAIN_JSON","EXTERNAL_FUNCTIONS_HISTORY","EXTERNAL_TABLE_FILES","EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY","EXTRACT","EXTRACT_SEMANTIC_CATEGORIES","FACTORIAL","FIRST_VALUE","FLATTEN","FLOOR","GENERATE_COLUMN_DESCRIPTION","GENERATOR","GET","GET_ABSOLUTE_PATH","GET_DDL","GET_IGNORE_CASE","GET_OBJECT_REFERENCES","GET_PATH","GET_PRESIGNED_URL","GET_RELATIVE_PATH","GET_STAGE_LOCATION","GETBIT","GREATEST","GROUPING","GROUPING_ID","HASH","HASH_AGG","HAVERSINE","HEX_DECODE_BINARY","HEX_DECODE_STRING","HEX_ENCODE","HLL","HLL_ACCUMULATE","HLL_COMBINE","HLL_ESTIMATE","HLL_EXPORT","HLL_IMPORT","HOUR","MINUTE","SECOND","IFF","IFNULL","ILIKE","ILIKE ANY","INFER_SCHEMA","INITCAP","INSERT","INVOKER_ROLE","INVOKER_SHARE","IS_ARRAY","IS_BINARY","IS_BOOLEAN","IS_CHAR","IS_VARCHAR","IS_DATE","IS_DATE_VALUE","IS_DECIMAL","IS_DOUBLE","IS_REAL","IS_GRANTED_TO_INVOKER_ROLE","IS_INTEGER","IS_NULL_VALUE","IS_OBJECT","IS_ROLE_IN_SESSION","IS_TIME","IS_TIMESTAMP_LTZ","IS_TIMESTAMP_NTZ","IS_TIMESTAMP_TZ","JAROWINKLER_SIMILARITY","JSON_EXTRACT_PATH_TEXT","KURTOSIS","LAG","LAST_DAY","LAST_QUERY_ID","LAST_TRANSACTION","LAST_VALUE","LEAD","LEAST","LEFT","LENGTH","LEN","LIKE","LIKE ALL","LIKE ANY","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOGIN_HISTORY","LOGIN_HISTORY_BY_USER","LOWER","LPAD","LTRIM","MATERIALIZED_VIEW_REFRESH_HISTORY","MD5","MD5_HEX","MD5_BINARY","MD5_NUMBER — Obsoleted","MD5_NUMBER_LOWER64","MD5_NUMBER_UPPER64","MEDIAN","MIN","MAX","MINHASH","MINHASH_COMBINE","MOD","MODE","MONTHNAME","MONTHS_BETWEEN","NEXT_DAY","NORMAL","NTH_VALUE","NTILE","NULLIF","NULLIFZERO","NVL","NVL2","OBJECT_AGG","OBJECT_CONSTRUCT","OBJECT_CONSTRUCT_KEEP_NULL","OBJECT_DELETE","OBJECT_INSERT","OBJECT_KEYS","OBJECT_PICK","OCTET_LENGTH","PARSE_IP","PARSE_JSON","PARSE_URL","PARSE_XML","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIPE_USAGE_HISTORY","POLICY_CONTEXT","POLICY_REFERENCES","POSITION","POW","POWER","PREVIOUS_DAY","QUERY_ACCELERATION_HISTORY","QUERY_HISTORY","QUERY_HISTORY_BY_SESSION","QUERY_HISTORY_BY_USER","QUERY_HISTORY_BY_WAREHOUSE","RADIANS","RANDOM","RANDSTR","RANK","RATIO_TO_REPORT","REGEXP","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REGEXP_SUBSTR_ALL","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REGR_VALX","REGR_VALY","REPEAT","REPLACE","REPLICATION_GROUP_REFRESH_HISTORY","REPLICATION_GROUP_REFRESH_PROGRESS","REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB","REPLICATION_GROUP_USAGE_HISTORY","REPLICATION_USAGE_HISTORY","REST_EVENT_HISTORY","RESULT_SCAN","REVERSE","RIGHT","RLIKE","ROUND","ROW_NUMBER","RPAD","RTRIM","RTRIMMED_LENGTH","SEARCH_OPTIMIZATION_HISTORY","SEQ1","SEQ2","SEQ4","SEQ8","SERVERLESS_TASK_HISTORY","SHA1","SHA1_HEX","SHA1_BINARY","SHA2","SHA2_HEX","SHA2_BINARY","SIGN","SIN","SINH","SKEW","SOUNDEX","SPACE","SPLIT","SPLIT_PART","SPLIT_TO_TABLE","SQRT","SQUARE","ST_AREA","ST_ASEWKB","ST_ASEWKT","ST_ASGEOJSON","ST_ASWKB","ST_ASBINARY","ST_ASWKT","ST_ASTEXT","ST_AZIMUTH","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DWITHIN","ST_ENDPOINT","ST_ENVELOPE","ST_GEOGFROMGEOHASH","ST_GEOGPOINTFROMGEOHASH","ST_GEOGRAPHYFROMWKB","ST_GEOGRAPHYFROMWKT","ST_GEOHASH","ST_GEOMETRYFROMWKB","ST_GEOMETRYFROMWKT","ST_HAUSDORFFDISTANCE","ST_INTERSECTION","ST_INTERSECTS","ST_LENGTH","ST_MAKEGEOMPOINT","ST_GEOM_POINT","ST_MAKELINE","ST_MAKEPOINT","ST_POINT","ST_MAKEPOLYGON","ST_POLYGON","ST_NPOINTS","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SETSRID","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY","STAGE_STORAGE_USAGE_HISTORY","STARTSWITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRIP_NULL_VALUE","STRTOK","STRTOK_SPLIT_TO_TABLE","STRTOK_TO_ARRAY","SUBSTR","SUBSTRING","SUM","SYSDATE","SYSTEM$ABORT_SESSION","SYSTEM$ABORT_TRANSACTION","SYSTEM$AUTHORIZE_PRIVATELINK","SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS","SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS","SYSTEM$CANCEL_ALL_QUERIES","SYSTEM$CANCEL_QUERY","SYSTEM$CLUSTERING_DEPTH","SYSTEM$CLUSTERING_INFORMATION","SYSTEM$CLUSTERING_RATIO ","SYSTEM$CURRENT_USER_TASK_NAME","SYSTEM$DATABASE_REFRESH_HISTORY ","SYSTEM$DATABASE_REFRESH_PROGRESS","SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ","SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$DISABLE_DATABASE_REPLICATION","SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$ESTIMATE_QUERY_ACCELERATION","SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS","SYSTEM$EXPLAIN_JSON_TO_TEXT","SYSTEM$EXPLAIN_PLAN_JSON","SYSTEM$EXTERNAL_TABLE_PIPE_STATUS","SYSTEM$GENERATE_SAML_CSR","SYSTEM$GENERATE_SCIM_ACCESS_TOKEN","SYSTEM$GET_AWS_SNS_IAM_POLICY","SYSTEM$GET_PREDECESSOR_RETURN_VALUE","SYSTEM$GET_PRIVATELINK","SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS","SYSTEM$GET_PRIVATELINK_CONFIG","SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO","SYSTEM$GET_TAG","SYSTEM$GET_TAG_ALLOWED_VALUES","SYSTEM$GET_TAG_ON_CURRENT_COLUMN","SYSTEM$GET_TAG_ON_CURRENT_TABLE","SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER","SYSTEM$LAST_CHANGE_COMMIT_TIME","SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME","SYSTEM$MIGRATE_SAML_IDP_REGISTRATION","SYSTEM$PIPE_FORCE_RESUME","SYSTEM$PIPE_STATUS","SYSTEM$REVOKE_PRIVATELINK","SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS","SYSTEM$SET_RETURN_VALUE","SYSTEM$SHOW_OAUTH_CLIENT_SECRETS","SYSTEM$STREAM_GET_TABLE_TIMESTAMP","SYSTEM$STREAM_HAS_DATA","SYSTEM$TASK_DEPENDENTS_ENABLE","SYSTEM$TYPEOF","SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS","SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN","SYSTEM$WAIT","SYSTEM$WHITELIST","SYSTEM$WHITELIST_PRIVATELINK","TAG_REFERENCES","TAG_REFERENCES_ALL_COLUMNS","TAG_REFERENCES_WITH_LINEAGE","TAN","TANH","TASK_DEPENDENTS","TASK_HISTORY","TIME_FROM_PARTS","TIME_SLICE","TIMEADD","TIMEDIFF","TIMESTAMP_FROM_PARTS","TIMESTAMPADD","TIMESTAMPDIFF","TO_ARRAY","TO_BINARY","TO_BOOLEAN","TO_CHAR","TO_VARCHAR","TO_DATE","DATE","TO_DECIMAL","TO_NUMBER","TO_NUMERIC","TO_DOUBLE","TO_GEOGRAPHY","TO_GEOMETRY","TO_JSON","TO_OBJECT","TO_TIME","TIME","TO_TIMESTAMP","TO_TIMESTAMP_LTZ","TO_TIMESTAMP_NTZ","TO_TIMESTAMP_TZ","TO_VARIANT","TO_XML","TRANSLATE","TRIM","TRUNCATE","TRUNC","TRUNC","TRY_BASE64_DECODE_BINARY","TRY_BASE64_DECODE_STRING","TRY_CAST","TRY_HEX_DECODE_BINARY","TRY_HEX_DECODE_STRING","TRY_PARSE_JSON","TRY_TO_BINARY","TRY_TO_BOOLEAN","TRY_TO_DATE","TRY_TO_DECIMAL","TRY_TO_NUMBER","TRY_TO_NUMERIC","TRY_TO_DOUBLE","TRY_TO_GEOGRAPHY","TRY_TO_GEOMETRY","TRY_TO_TIME","TRY_TO_TIMESTAMP","TRY_TO_TIMESTAMP_LTZ","TRY_TO_TIMESTAMP_NTZ","TRY_TO_TIMESTAMP_TZ","TYPEOF","UNICODE","UNIFORM","UPPER","UUID_STRING","VALIDATE","VALIDATE_PIPE_LOAD","VAR_POP","VAR_SAMP","VARIANCE","VARIANCE_SAMP","VARIANCE_POP","WAREHOUSE_LOAD_HISTORY","WAREHOUSE_METERING_HISTORY","WIDTH_BUCKET","XMLGET","YEAR","YEAROFWEEK","YEAROFWEEKISO","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEKISO","DAYOFYEAR","WEEK","WEEK","WEEKOFYEAR","WEEKISO","MONTH","QUARTER","ZEROIFNULL","ZIPF"]}),kI=X({all:["ACCOUNT","ALL","ALTER","AND","ANY","AS","BETWEEN","BY","CASE","CAST","CHECK","COLUMN","CONNECT","CONNECTION","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATABASE","DELETE","DISTINCT","DROP","ELSE","EXISTS","FALSE","FOLLOWING","FOR","FROM","FULL","GRANT","GROUP","GSCLUSTER","HAVING","ILIKE","IN","INCREMENT","INNER","INSERT","INTERSECT","INTO","IS","ISSUE","JOIN","LATERAL","LEFT","LIKE","LOCALTIME","LOCALTIMESTAMP","MINUS","NATURAL","NOT","NULL","OF","ON","OR","ORDER","ORGANIZATION","QUALIFY","REGEXP","REVOKE","RIGHT","RLIKE","ROW","ROWS","SAMPLE","SCHEMA","SELECT","SET","SOME","START","TABLE","TABLESAMPLE","THEN","TO","TRIGGER","TRUE","TRY_CAST","UNION","UNIQUE","UPDATE","USING","VALUES","VIEW","WHEN","WHENEVER","WHERE","WITH"]}),ZI=P(["SELECT [ALL | DISTINCT]"]),QI=P(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH [FIRST | NEXT]","INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]","{THEN | ELSE} INTO","VALUES","UPDATE","SET","DELETE FROM","TRUNCATE [TABLE] [IF EXISTS]","CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]","CLUSTER BY","[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}","COPY GRANTS","USING TEMPLATE","MERGE INTO","WHEN MATCHED [AND]","THEN {UPDATE SET | DELETE}","WHEN NOT MATCHED THEN INSERT","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","RENAME TO","SWAP WITH","[SUSPEND | RESUME] RECLUSTER","DROP CLUSTERING KEY","ADD [COLUMN]","RENAME COLUMN","{ALTER | MODIFY} [COLUMN]","DROP [COLUMN]","{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]","RENAME CONSTRAINT","{ADD | DROP} SEARCH OPTIMIZATION","{SET | UNSET} [TAG]","{ADD | DROP} ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","[SET DATA] TYPE","[UNSET] COMMENT","{SET | UNSET} MASKING POLICY","ALTER ACCOUNT","ALTER API INTEGRATION","ALTER CONNECTION","ALTER DATABASE","ALTER EXTERNAL TABLE","ALTER FAILOVER GROUP","ALTER FILE FORMAT","ALTER FUNCTION","ALTER INTEGRATION","ALTER MASKING POLICY","ALTER MATERIALIZED VIEW","ALTER NETWORK POLICY","ALTER NOTIFICATION INTEGRATION","ALTER PIPE","ALTER PROCEDURE","ALTER REPLICATION GROUP","ALTER RESOURCE MONITOR","ALTER ROLE","ALTER ROW ACCESS POLICY","ALTER SCHEMA","ALTER SECURITY INTEGRATION","ALTER SEQUENCE","ALTER SESSION","ALTER SESSION POLICY","ALTER SHARE","ALTER STAGE","ALTER STORAGE INTEGRATION","ALTER STREAM","ALTER TAG","ALTER TASK","ALTER USER","ALTER VIEW","ALTER WAREHOUSE","BEGIN","CALL","COMMIT","COPY INTO","CREATE ACCOUNT","CREATE API INTEGRATION","CREATE CONNECTION","CREATE DATABASE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL TABLE","CREATE FAILOVER GROUP","CREATE FILE FORMAT","CREATE FUNCTION","CREATE INTEGRATION","CREATE MANAGED ACCOUNT","CREATE MASKING POLICY","CREATE MATERIALIZED VIEW","CREATE NETWORK POLICY","CREATE NOTIFICATION INTEGRATION","CREATE PIPE","CREATE PROCEDURE","CREATE REPLICATION GROUP","CREATE RESOURCE MONITOR","CREATE ROLE","CREATE ROW ACCESS POLICY","CREATE SCHEMA","CREATE SECURITY INTEGRATION","CREATE SEQUENCE","CREATE SESSION POLICY","CREATE SHARE","CREATE STAGE","CREATE STORAGE INTEGRATION","CREATE STREAM","CREATE TAG","CREATE TASK","CREATE USER","CREATE WAREHOUSE","DELETE","DESCRIBE DATABASE","DESCRIBE EXTERNAL TABLE","DESCRIBE FILE FORMAT","DESCRIBE FUNCTION","DESCRIBE INTEGRATION","DESCRIBE MASKING POLICY","DESCRIBE MATERIALIZED VIEW","DESCRIBE NETWORK POLICY","DESCRIBE PIPE","DESCRIBE PROCEDURE","DESCRIBE RESULT","DESCRIBE ROW ACCESS POLICY","DESCRIBE SCHEMA","DESCRIBE SEQUENCE","DESCRIBE SESSION POLICY","DESCRIBE SHARE","DESCRIBE STAGE","DESCRIBE STREAM","DESCRIBE TABLE","DESCRIBE TASK","DESCRIBE TRANSACTION","DESCRIBE USER","DESCRIBE VIEW","DESCRIBE WAREHOUSE","DROP CONNECTION","DROP DATABASE","DROP EXTERNAL TABLE","DROP FAILOVER GROUP","DROP FILE FORMAT","DROP FUNCTION","DROP INTEGRATION","DROP MANAGED ACCOUNT","DROP MASKING POLICY","DROP MATERIALIZED VIEW","DROP NETWORK POLICY","DROP PIPE","DROP PROCEDURE","DROP REPLICATION GROUP","DROP RESOURCE MONITOR","DROP ROLE","DROP ROW ACCESS POLICY","DROP SCHEMA","DROP SEQUENCE","DROP SESSION POLICY","DROP SHARE","DROP STAGE","DROP STREAM","DROP TAG","DROP TASK","DROP USER","DROP VIEW","DROP WAREHOUSE","EXECUTE IMMEDIATE","EXECUTE TASK","EXPLAIN","GET","GRANT OWNERSHIP","GRANT ROLE","INSERT","LIST","MERGE","PUT","REMOVE","REVOKE ROLE","ROLLBACK","SHOW COLUMNS","SHOW CONNECTIONS","SHOW DATABASES","SHOW DATABASES IN FAILOVER GROUP","SHOW DATABASES IN REPLICATION GROUP","SHOW DELEGATED AUTHORIZATIONS","SHOW EXTERNAL FUNCTIONS","SHOW EXTERNAL TABLES","SHOW FAILOVER GROUPS","SHOW FILE FORMATS","SHOW FUNCTIONS","SHOW GLOBAL ACCOUNTS","SHOW GRANTS","SHOW INTEGRATIONS","SHOW LOCKS","SHOW MANAGED ACCOUNTS","SHOW MASKING POLICIES","SHOW MATERIALIZED VIEWS","SHOW NETWORK POLICIES","SHOW OBJECTS","SHOW ORGANIZATION ACCOUNTS","SHOW PARAMETERS","SHOW PIPES","SHOW PRIMARY KEYS","SHOW PROCEDURES","SHOW REGIONS","SHOW REPLICATION ACCOUNTS","SHOW REPLICATION DATABASES","SHOW REPLICATION GROUPS","SHOW RESOURCE MONITORS","SHOW ROLES","SHOW ROW ACCESS POLICIES","SHOW SCHEMAS","SHOW SEQUENCES","SHOW SESSION POLICIES","SHOW SHARES","SHOW SHARES IN FAILOVER GROUP","SHOW SHARES IN REPLICATION GROUP","SHOW STAGES","SHOW STREAMS","SHOW TABLES","SHOW TAGS","SHOW TASKS","SHOW TRANSACTIONS","SHOW USER FUNCTIONS","SHOW USERS","SHOW VARIABLES","SHOW VIEWS","SHOW WAREHOUSES","TRUNCATE MATERIALIZED VIEW","UNDROP DATABASE","UNDROP SCHEMA","UNDROP TABLE","UNDROP TAG","UNSET","USE DATABASE","USE ROLE","USE SCHEMA","USE SECONDARY ROLES","USE WAREHOUSE"]),qI=P(["UNION [ALL]","MINUS","EXCEPT","INTERSECT"]),jI=P(["[INNER] JOIN","[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | NATURAL} JOIN"]),zI=P(["{ROWS | RANGE} BETWEEN","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]"]);class EO extends eE{tokenizer(){return new RE({reservedClauses:QI,reservedSelect:ZI,reservedSetOperations:qI,reservedJoins:jI,reservedPhrases:zI,reservedKeywords:kI,reservedFunctionNames:JI,stringTypes:["$$","''-qq-bs"],identTypes:['""-qq'],variableTypes:[{regex:"[$][1-9]\\d*"},{regex:"[$][_a-zA-Z][_a-zA-Z0-9$]*"}],extraParens:["[]"],identChars:{rest:"$"},lineCommentTypes:["--","//"],operators:["%","::","||",":","=>"]})}formatOptions(){return{alwaysDenseOperators:[":","::"]}}}const uR={bigquery:YS,db2:$S,hive:Et,mariadb:Ot,mysql:it,n1ql:dt,plsql:Yt,postgresql:Kt,redshift:qt,singlestoredb:wI,snowflake:EO,spark:SI,sql:lI,sqlite:aI,transactsql:xe,trino:hI,tsql:xe},TO=Object.keys(uR),eO={language:"sql",tabWidth:2,useTabs:!1,keywordCase:"preserve",indentStyle:"standard",logicalOperatorNewline:"before",tabulateAlias:!1,commaPosition:"after",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},RO=(T,E={})=>{if(typeof T!="string")throw new Error("Invalid query argument. Expected string, instead got "+typeof T);const e=AO({...eO,...E}),R=typeof e.language=="string"?uR[e.language]:e.language;return new R(e).format(T)};class wE extends Error{}function AO(T){if(typeof T.language=="string"&&!TO.includes(T.language))throw new wE(`Unsupported SQL dialect: ${T.language}`);if("multilineLists"in T)throw new wE("multilineLists config is no more supported.");if("newlineBeforeOpenParen"in T)throw new wE("newlineBeforeOpenParen config is no more supported.");if("newlineBeforeCloseParen"in T)throw new wE("newlineBeforeCloseParen config is no more supported.");if("aliasAs"in T)throw new wE("aliasAs config is no more supported.");if(T.expressionWidth<=0)throw new wE(`expressionWidth config must be positive number. Received ${T.expressionWidth} instead.`);if(T.commaPosition==="before"&&T.useTabs)throw new wE("commaPosition: before does not work when tabs are used for indentation.");return T.params&&!SO(T.params)&&console.warn('WARNING: All "params" option values should be strings.'),T}function SO(T){return(T instanceof Array?T:Object.values(T)).every(e=>typeof e=="string")}var tO=Q('<th class="th svelte-lzq57u"> </th>'),IO=Q('<td class="svelte-lzq57u"> </td>'),OO=Q('<tr class="svelte-lzq57u"></tr>'),NO=Q('<div class="table-container svelte-lzq57u"><table class="table is-fullwidth is-striped is-hoverable"><thead><tr class="svelte-lzq57u"></tr></thead><tbody></tbody></table></div>');function rO(T,E){bE(E,!0);var e=NO(),R=b(e),A=b(R),S=b(A);DT(S,21,()=>E.result.columns,bT,(O,r)=>{var I=tO(),N=b(I,!0);W(I),NE(()=>nE(N,a(r))),w(O,I)}),W(S),W(A);var t=$(A);DT(t,21,()=>E.result.values,bT,(O,r,I)=>{var N=OO();DT(N,21,()=>a(r),bT,(n,L,i)=>{var o=IO(),d=b(o,!0);W(o),NE(()=>{$E(o,"title",`Row ${I+1}, ${E.result.columns[i]}`),nE(d,a(L))}),w(n,o)}),W(N),w(O,N)}),W(t),W(R),W(e),w(T,e),KE()}var v;(function(T){T.assertEqual=A=>A;function E(A){}T.assertIs=E;function e(A){throw new Error}T.assertNever=e,T.arrayToEnum=A=>{const S={};for(const t of A)S[t]=t;return S},T.getValidEnumValues=A=>{const S=T.objectKeys(A).filter(O=>typeof A[A[O]]!="number"),t={};for(const O of S)t[O]=A[O];return T.objectValues(t)},T.objectValues=A=>T.objectKeys(A).map(function(S){return A[S]}),T.objectKeys=typeof Object.keys=="function"?A=>Object.keys(A):A=>{const S=[];for(const t in A)Object.prototype.hasOwnProperty.call(A,t)&&S.push(t);return S},T.find=(A,S)=>{for(const t of A)if(S(t))return t},T.isInteger=typeof Number.isInteger=="function"?A=>Number.isInteger(A):A=>typeof A=="number"&&isFinite(A)&&Math.floor(A)===A;function R(A,S=" | "){return A.map(t=>typeof t=="string"?`'${t}'`:t).join(S)}T.joinValues=R,T.jsonStringifyReplacer=(A,S)=>typeof S=="bigint"?S.toString():S})(v||(v={}));var Le;(function(T){T.mergeShapes=(E,e)=>({...E,...e})})(Le||(Le={}));const M=v.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),pE=T=>{switch(typeof T){case"undefined":return M.undefined;case"string":return M.string;case"number":return isNaN(T)?M.nan:M.number;case"boolean":return M.boolean;case"function":return M.function;case"bigint":return M.bigint;case"symbol":return M.symbol;case"object":return Array.isArray(T)?M.array:T===null?M.null:T.then&&typeof T.then=="function"&&T.catch&&typeof T.catch=="function"?M.promise:typeof Map<"u"&&T instanceof Map?M.map:typeof Set<"u"&&T instanceof Set?M.set:typeof Date<"u"&&T instanceof Date?M.date:M.object;default:return M.unknown}},C=v.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),sO=T=>JSON.stringify(T,null,2).replace(/"([^"]+)":/g,"$1:");class _E extends Error{get errors(){return this.issues}constructor(E){super(),this.issues=[],this.addIssue=R=>{this.issues=[...this.issues,R]},this.addIssues=(R=[])=>{this.issues=[...this.issues,...R]};const e=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,e):this.__proto__=e,this.name="ZodError",this.issues=E}format(E){const e=E||function(S){return S.message},R={_errors:[]},A=S=>{for(const t of S.issues)if(t.code==="invalid_union")t.unionErrors.map(A);else if(t.code==="invalid_return_type")A(t.returnTypeError);else if(t.code==="invalid_arguments")A(t.argumentsError);else if(t.path.length===0)R._errors.push(e(t));else{let O=R,r=0;for(;r<t.path.length;){const I=t.path[r];r===t.path.length-1?(O[I]=O[I]||{_errors:[]},O[I]._errors.push(e(t))):O[I]=O[I]||{_errors:[]},O=O[I],r++}}};return A(this),R}static assert(E){if(!(E instanceof _E))throw new Error(`Not a ZodError: ${E}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,v.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(E=e=>e.message){const e={},R=[];for(const A of this.issues)A.path.length>0?(e[A.path[0]]=e[A.path[0]]||[],e[A.path[0]].push(E(A))):R.push(E(A));return{formErrors:R,fieldErrors:e}}get formErrors(){return this.flatten()}}_E.create=T=>new _E(T);const IT=(T,E)=>{let e;switch(T.code){case C.invalid_type:T.received===M.undefined?e="Required":e=`Expected ${T.expected}, received ${T.received}`;break;case C.invalid_literal:e=`Invalid literal value, expected ${JSON.stringify(T.expected,v.jsonStringifyReplacer)}`;break;case C.unrecognized_keys:e=`Unrecognized key(s) in object: ${v.joinValues(T.keys,", ")}`;break;case C.invalid_union:e="Invalid input";break;case C.invalid_union_discriminator:e=`Invalid discriminator value. Expected ${v.joinValues(T.options)}`;break;case C.invalid_enum_value:e=`Invalid enum value. Expected ${v.joinValues(T.options)}, received '${T.received}'`;break;case C.invalid_arguments:e="Invalid function arguments";break;case C.invalid_return_type:e="Invalid function return type";break;case C.invalid_date:e="Invalid date";break;case C.invalid_string:typeof T.validation=="object"?"includes"in T.validation?(e=`Invalid input: must include "${T.validation.includes}"`,typeof T.validation.position=="number"&&(e=`${e} at one or more positions greater than or equal to ${T.validation.position}`)):"startsWith"in T.validation?e=`Invalid input: must start with "${T.validation.startsWith}"`:"endsWith"in T.validation?e=`Invalid input: must end with "${T.validation.endsWith}"`:v.assertNever(T.validation):T.validation!=="regex"?e=`Invalid ${T.validation}`:e="Invalid";break;case C.too_small:T.type==="array"?e=`Array must contain ${T.exact?"exactly":T.inclusive?"at least":"more than"} ${T.minimum} element(s)`:T.type==="string"?e=`String must contain ${T.exact?"exactly":T.inclusive?"at least":"over"} ${T.minimum} character(s)`:T.type==="number"?e=`Number must be ${T.exact?"exactly equal to ":T.inclusive?"greater than or equal to ":"greater than "}${T.minimum}`:T.type==="date"?e=`Date must be ${T.exact?"exactly equal to ":T.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(T.minimum))}`:e="Invalid input";break;case C.too_big:T.type==="array"?e=`Array must contain ${T.exact?"exactly":T.inclusive?"at most":"less than"} ${T.maximum} element(s)`:T.type==="string"?e=`String must contain ${T.exact?"exactly":T.inclusive?"at most":"under"} ${T.maximum} character(s)`:T.type==="number"?e=`Number must be ${T.exact?"exactly":T.inclusive?"less than or equal to":"less than"} ${T.maximum}`:T.type==="bigint"?e=`BigInt must be ${T.exact?"exactly":T.inclusive?"less than or equal to":"less than"} ${T.maximum}`:T.type==="date"?e=`Date must be ${T.exact?"exactly":T.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(T.maximum))}`:e="Invalid input";break;case C.custom:e="Invalid input";break;case C.invalid_intersection_types:e="Intersection results could not be merged";break;case C.not_multiple_of:e=`Number must be a multiple of ${T.multipleOf}`;break;case C.not_finite:e="Number must be finite";break;default:e=E.defaultError,v.assertNever(T)}return{message:e}};let dR=IT;function nO(T){dR=T}function wT(){return dR}const $T=T=>{const{data:E,path:e,errorMaps:R,issueData:A}=T,S=[...e,...A.path||[]],t={...A,path:S};if(A.message!==void 0)return{...A,path:S,message:A.message};let O="";const r=R.filter(I=>!!I).slice().reverse();for(const I of r)O=I(t,{data:E,defaultError:O}).message;return{...A,path:S,message:O}},_O=[];function D(T,E){const e=wT(),R=$T({issueData:E,data:T.data,path:T.path,errorMaps:[T.common.contextualErrorMap,T.schemaErrorMap,e,e===IT?void 0:IT].filter(A=>!!A)});T.common.issues.push(R)}class TE{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(E,e){const R=[];for(const A of e){if(A.status==="aborted")return f;A.status==="dirty"&&E.dirty(),R.push(A.value)}return{status:E.value,value:R}}static async mergeObjectAsync(E,e){const R=[];for(const A of e){const S=await A.key,t=await A.value;R.push({key:S,value:t})}return TE.mergeObjectSync(E,R)}static mergeObjectSync(E,e){const R={};for(const A of e){const{key:S,value:t}=A;if(S.status==="aborted"||t.status==="aborted")return f;S.status==="dirty"&&E.dirty(),t.status==="dirty"&&E.dirty(),S.value!=="__proto__"&&(typeof t.value<"u"||A.alwaysSet)&&(R[S.value]=t.value)}return{status:E.value,value:R}}}const f=Object.freeze({status:"aborted"}),ST=T=>({status:"dirty",value:T}),SE=T=>({status:"valid",value:T}),ie=T=>T.status==="aborted",oe=T=>T.status==="dirty",QE=T=>T.status==="valid",MT=T=>typeof Promise<"u"&&T instanceof Promise;function JT(T,E,e,R){if(typeof E=="function"?T!==E||!0:!E.has(T))throw new TypeError("Cannot read private member from an object whose class did not declare it");return E.get(T)}function GR(T,E,e,R,A){if(typeof E=="function"?T!==E||!0:!E.has(T))throw new TypeError("Cannot write private member to an object whose class did not declare it");return E.set(T,e),e}var l;(function(T){T.errToObj=E=>typeof E=="string"?{message:E}:E||{},T.toString=E=>typeof E=="string"?E:E==null?void 0:E.message})(l||(l={}));var iT,oT;class cE{constructor(E,e,R,A){this._cachedPath=[],this.parent=E,this.data=e,this._path=R,this._key=A}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const we=(T,E)=>{if(QE(E))return{success:!0,data:E.value};if(!T.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const e=new _E(T.common.issues);return this._error=e,this._error}}};function m(T){if(!T)return{};const{errorMap:E,invalid_type_error:e,required_error:R,description:A}=T;if(E&&(e||R))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return E?{errorMap:E,description:A}:{errorMap:(t,O)=>{var r,I;const{message:N}=T;return t.code==="invalid_enum_value"?{message:N??O.defaultError}:typeof O.data>"u"?{message:(r=N??R)!==null&&r!==void 0?r:O.defaultError}:t.code!=="invalid_type"?{message:O.defaultError}:{message:(I=N??e)!==null&&I!==void 0?I:O.defaultError}},description:A}}class F{get description(){return this._def.description}_getType(E){return pE(E.data)}_getOrReturnCtx(E,e){return e||{common:E.parent.common,data:E.data,parsedType:pE(E.data),schemaErrorMap:this._def.errorMap,path:E.path,parent:E.parent}}_processInputParams(E){return{status:new TE,ctx:{common:E.parent.common,data:E.data,parsedType:pE(E.data),schemaErrorMap:this._def.errorMap,path:E.path,parent:E.parent}}}_parseSync(E){const e=this._parse(E);if(MT(e))throw new Error("Synchronous parse encountered promise.");return e}_parseAsync(E){const e=this._parse(E);return Promise.resolve(e)}parse(E,e){const R=this.safeParse(E,e);if(R.success)return R.data;throw R.error}safeParse(E,e){var R;const A={common:{issues:[],async:(R=e==null?void 0:e.async)!==null&&R!==void 0?R:!1,contextualErrorMap:e==null?void 0:e.errorMap},path:(e==null?void 0:e.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:E,parsedType:pE(E)},S=this._parseSync({data:E,path:A.path,parent:A});return we(A,S)}"~validate"(E){var e,R;const A={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:E,parsedType:pE(E)};if(!this["~standard"].async)try{const S=this._parseSync({data:E,path:[],parent:A});return QE(S)?{value:S.value}:{issues:A.common.issues}}catch(S){!((R=(e=S==null?void 0:S.message)===null||e===void 0?void 0:e.toLowerCase())===null||R===void 0)&&R.includes("encountered")&&(this["~standard"].async=!0),A.common={issues:[],async:!0}}return this._parseAsync({data:E,path:[],parent:A}).then(S=>QE(S)?{value:S.value}:{issues:A.common.issues})}async parseAsync(E,e){const R=await this.safeParseAsync(E,e);if(R.success)return R.data;throw R.error}async safeParseAsync(E,e){const R={common:{issues:[],contextualErrorMap:e==null?void 0:e.errorMap,async:!0},path:(e==null?void 0:e.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:E,parsedType:pE(E)},A=this._parse({data:E,path:R.path,parent:R}),S=await(MT(A)?A:Promise.resolve(A));return we(R,S)}refine(E,e){const R=A=>typeof e=="string"||typeof e>"u"?{message:e}:typeof e=="function"?e(A):e;return this._refinement((A,S)=>{const t=E(A),O=()=>S.addIssue({code:C.custom,...R(A)});return typeof Promise<"u"&&t instanceof Promise?t.then(r=>r?!0:(O(),!1)):t?!0:(O(),!1)})}refinement(E,e){return this._refinement((R,A)=>E(R)?!0:(A.addIssue(typeof e=="function"?e(R,A):e),!1))}_refinement(E){return new lE({schema:this,typeName:G.ZodEffects,effect:{type:"refinement",refinement:E}})}superRefine(E){return this._refinement(E)}constructor(E){this.spa=this.safeParseAsync,this._def=E,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:e=>this["~validate"](e)}}optional(){return UE.create(this,this._def)}nullable(){return XE.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return ME.create(this)}promise(){return NT.create(this,this._def)}or(E){return uT.create([this,E],this._def)}and(E){return dT.create(this,E,this._def)}transform(E){return new lE({...m(this._def),schema:this,typeName:G.ZodEffects,effect:{type:"transform",transform:E}})}default(E){const e=typeof E=="function"?E:()=>E;return new HT({...m(this._def),innerType:this,defaultValue:e,typeName:G.ZodDefault})}brand(){return new Ue({typeName:G.ZodBranded,type:this,...m(this._def)})}catch(E){const e=typeof E=="function"?E:()=>E;return new mT({...m(this._def),innerType:this,catchValue:e,typeName:G.ZodCatch})}describe(E){const e=this.constructor;return new e({...this._def,description:E})}pipe(E){return VT.create(this,E)}readonly(){return BT.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const aO=/^c[^\s-]{8,}$/i,CO=/^[0-9a-z]+$/,LO=/^[0-9A-HJKMNP-TV-Z]{26}$/i,iO=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,oO=/^[a-z0-9_-]{21}$/i,PO=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,DO=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,MO=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,lO="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let ne;const UO=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,cO=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,uO=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,dO=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,GO=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,fO=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,fR="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",pO=new RegExp(`^${fR}$`);function pR(T){let E="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return T.precision?E=`${E}\\.\\d{${T.precision}}`:T.precision==null&&(E=`${E}(\\.\\d+)?`),E}function hO(T){return new RegExp(`^${pR(T)}$`)}function hR(T){let E=`${fR}T${pR(T)}`;const e=[];return e.push(T.local?"Z?":"Z"),T.offset&&e.push("([+-]\\d{2}:?\\d{2})"),E=`${E}(${e.join("|")})`,new RegExp(`^${E}$`)}function HO(T,E){return!!((E==="v4"||!E)&&UO.test(T)||(E==="v6"||!E)&&uO.test(T))}function mO(T,E){if(!PO.test(T))return!1;try{const[e]=T.split("."),R=e.replace(/-/g,"+").replace(/_/g,"/").padEnd(e.length+(4-e.length%4)%4,"="),A=JSON.parse(atob(R));return!(typeof A!="object"||A===null||!A.typ||!A.alg||E&&A.alg!==E)}catch{return!1}}function BO(T,E){return!!((E==="v4"||!E)&&cO.test(T)||(E==="v6"||!E)&&dO.test(T))}class PE extends F{_parse(E){if(this._def.coerce&&(E.data=String(E.data)),this._getType(E)!==M.string){const S=this._getOrReturnCtx(E);return D(S,{code:C.invalid_type,expected:M.string,received:S.parsedType}),f}const R=new TE;let A;for(const S of this._def.checks)if(S.kind==="min")E.data.length<S.value&&(A=this._getOrReturnCtx(E,A),D(A,{code:C.too_small,minimum:S.value,type:"string",inclusive:!0,exact:!1,message:S.message}),R.dirty());else if(S.kind==="max")E.data.length>S.value&&(A=this._getOrReturnCtx(E,A),D(A,{code:C.too_big,maximum:S.value,type:"string",inclusive:!0,exact:!1,message:S.message}),R.dirty());else if(S.kind==="length"){const t=E.data.length>S.value,O=E.data.length<S.value;(t||O)&&(A=this._getOrReturnCtx(E,A),t?D(A,{code:C.too_big,maximum:S.value,type:"string",inclusive:!0,exact:!0,message:S.message}):O&&D(A,{code:C.too_small,minimum:S.value,type:"string",inclusive:!0,exact:!0,message:S.message}),R.dirty())}else if(S.kind==="email")MO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"email",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="emoji")ne||(ne=new RegExp(lO,"u")),ne.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"emoji",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="uuid")iO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"uuid",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="nanoid")oO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"nanoid",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="cuid")aO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"cuid",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="cuid2")CO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"cuid2",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="ulid")LO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"ulid",code:C.invalid_string,message:S.message}),R.dirty());else if(S.kind==="url")try{new URL(E.data)}catch{A=this._getOrReturnCtx(E,A),D(A,{validation:"url",code:C.invalid_string,message:S.message}),R.dirty()}else S.kind==="regex"?(S.regex.lastIndex=0,S.regex.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"regex",code:C.invalid_string,message:S.message}),R.dirty())):S.kind==="trim"?E.data=E.data.trim():S.kind==="includes"?E.data.includes(S.value,S.position)||(A=this._getOrReturnCtx(E,A),D(A,{code:C.invalid_string,validation:{includes:S.value,position:S.position},message:S.message}),R.dirty()):S.kind==="toLowerCase"?E.data=E.data.toLowerCase():S.kind==="toUpperCase"?E.data=E.data.toUpperCase():S.kind==="startsWith"?E.data.startsWith(S.value)||(A=this._getOrReturnCtx(E,A),D(A,{code:C.invalid_string,validation:{startsWith:S.value},message:S.message}),R.dirty()):S.kind==="endsWith"?E.data.endsWith(S.value)||(A=this._getOrReturnCtx(E,A),D(A,{code:C.invalid_string,validation:{endsWith:S.value},message:S.message}),R.dirty()):S.kind==="datetime"?hR(S).test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{code:C.invalid_string,validation:"datetime",message:S.message}),R.dirty()):S.kind==="date"?pO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{code:C.invalid_string,validation:"date",message:S.message}),R.dirty()):S.kind==="time"?hO(S).test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{code:C.invalid_string,validation:"time",message:S.message}),R.dirty()):S.kind==="duration"?DO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"duration",code:C.invalid_string,message:S.message}),R.dirty()):S.kind==="ip"?HO(E.data,S.version)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"ip",code:C.invalid_string,message:S.message}),R.dirty()):S.kind==="jwt"?mO(E.data,S.alg)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"jwt",code:C.invalid_string,message:S.message}),R.dirty()):S.kind==="cidr"?BO(E.data,S.version)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"cidr",code:C.invalid_string,message:S.message}),R.dirty()):S.kind==="base64"?GO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"base64",code:C.invalid_string,message:S.message}),R.dirty()):S.kind==="base64url"?fO.test(E.data)||(A=this._getOrReturnCtx(E,A),D(A,{validation:"base64url",code:C.invalid_string,message:S.message}),R.dirty()):v.assertNever(S);return{status:R.value,value:E.data}}_regex(E,e,R){return this.refinement(A=>E.test(A),{validation:e,code:C.invalid_string,...l.errToObj(R)})}_addCheck(E){return new PE({...this._def,checks:[...this._def.checks,E]})}email(E){return this._addCheck({kind:"email",...l.errToObj(E)})}url(E){return this._addCheck({kind:"url",...l.errToObj(E)})}emoji(E){return this._addCheck({kind:"emoji",...l.errToObj(E)})}uuid(E){return this._addCheck({kind:"uuid",...l.errToObj(E)})}nanoid(E){return this._addCheck({kind:"nanoid",...l.errToObj(E)})}cuid(E){return this._addCheck({kind:"cuid",...l.errToObj(E)})}cuid2(E){return this._addCheck({kind:"cuid2",...l.errToObj(E)})}ulid(E){return this._addCheck({kind:"ulid",...l.errToObj(E)})}base64(E){return this._addCheck({kind:"base64",...l.errToObj(E)})}base64url(E){return this._addCheck({kind:"base64url",...l.errToObj(E)})}jwt(E){return this._addCheck({kind:"jwt",...l.errToObj(E)})}ip(E){return this._addCheck({kind:"ip",...l.errToObj(E)})}cidr(E){return this._addCheck({kind:"cidr",...l.errToObj(E)})}datetime(E){var e,R;return typeof E=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:E}):this._addCheck({kind:"datetime",precision:typeof(E==null?void 0:E.precision)>"u"?null:E==null?void 0:E.precision,offset:(e=E==null?void 0:E.offset)!==null&&e!==void 0?e:!1,local:(R=E==null?void 0:E.local)!==null&&R!==void 0?R:!1,...l.errToObj(E==null?void 0:E.message)})}date(E){return this._addCheck({kind:"date",message:E})}time(E){return typeof E=="string"?this._addCheck({kind:"time",precision:null,message:E}):this._addCheck({kind:"time",precision:typeof(E==null?void 0:E.precision)>"u"?null:E==null?void 0:E.precision,...l.errToObj(E==null?void 0:E.message)})}duration(E){return this._addCheck({kind:"duration",...l.errToObj(E)})}regex(E,e){return this._addCheck({kind:"regex",regex:E,...l.errToObj(e)})}includes(E,e){return this._addCheck({kind:"includes",value:E,position:e==null?void 0:e.position,...l.errToObj(e==null?void 0:e.message)})}startsWith(E,e){return this._addCheck({kind:"startsWith",value:E,...l.errToObj(e)})}endsWith(E,e){return this._addCheck({kind:"endsWith",value:E,...l.errToObj(e)})}min(E,e){return this._addCheck({kind:"min",value:E,...l.errToObj(e)})}max(E,e){return this._addCheck({kind:"max",value:E,...l.errToObj(e)})}length(E,e){return this._addCheck({kind:"length",value:E,...l.errToObj(e)})}nonempty(E){return this.min(1,l.errToObj(E))}trim(){return new PE({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new PE({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new PE({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(E=>E.kind==="datetime")}get isDate(){return!!this._def.checks.find(E=>E.kind==="date")}get isTime(){return!!this._def.checks.find(E=>E.kind==="time")}get isDuration(){return!!this._def.checks.find(E=>E.kind==="duration")}get isEmail(){return!!this._def.checks.find(E=>E.kind==="email")}get isURL(){return!!this._def.checks.find(E=>E.kind==="url")}get isEmoji(){return!!this._def.checks.find(E=>E.kind==="emoji")}get isUUID(){return!!this._def.checks.find(E=>E.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(E=>E.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(E=>E.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(E=>E.kind==="cuid2")}get isULID(){return!!this._def.checks.find(E=>E.kind==="ulid")}get isIP(){return!!this._def.checks.find(E=>E.kind==="ip")}get isCIDR(){return!!this._def.checks.find(E=>E.kind==="cidr")}get isBase64(){return!!this._def.checks.find(E=>E.kind==="base64")}get isBase64url(){return!!this._def.checks.find(E=>E.kind==="base64url")}get minLength(){let E=null;for(const e of this._def.checks)e.kind==="min"&&(E===null||e.value>E)&&(E=e.value);return E}get maxLength(){let E=null;for(const e of this._def.checks)e.kind==="max"&&(E===null||e.value<E)&&(E=e.value);return E}}PE.create=T=>{var E;return new PE({checks:[],typeName:G.ZodString,coerce:(E=T==null?void 0:T.coerce)!==null&&E!==void 0?E:!1,...m(T)})};function YO(T,E){const e=(T.toString().split(".")[1]||"").length,R=(E.toString().split(".")[1]||"").length,A=e>R?e:R,S=parseInt(T.toFixed(A).replace(".","")),t=parseInt(E.toFixed(A).replace(".",""));return S%t/Math.pow(10,A)}class WE extends F{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(E){if(this._def.coerce&&(E.data=Number(E.data)),this._getType(E)!==M.number){const S=this._getOrReturnCtx(E);return D(S,{code:C.invalid_type,expected:M.number,received:S.parsedType}),f}let R;const A=new TE;for(const S of this._def.checks)S.kind==="int"?v.isInteger(E.data)||(R=this._getOrReturnCtx(E,R),D(R,{code:C.invalid_type,expected:"integer",received:"float",message:S.message}),A.dirty()):S.kind==="min"?(S.inclusive?E.data<S.value:E.data<=S.value)&&(R=this._getOrReturnCtx(E,R),D(R,{code:C.too_small,minimum:S.value,type:"number",inclusive:S.inclusive,exact:!1,message:S.message}),A.dirty()):S.kind==="max"?(S.inclusive?E.data>S.value:E.data>=S.value)&&(R=this._getOrReturnCtx(E,R),D(R,{code:C.too_big,maximum:S.value,type:"number",inclusive:S.inclusive,exact:!1,message:S.message}),A.dirty()):S.kind==="multipleOf"?YO(E.data,S.value)!==0&&(R=this._getOrReturnCtx(E,R),D(R,{code:C.not_multiple_of,multipleOf:S.value,message:S.message}),A.dirty()):S.kind==="finite"?Number.isFinite(E.data)||(R=this._getOrReturnCtx(E,R),D(R,{code:C.not_finite,message:S.message}),A.dirty()):v.assertNever(S);return{status:A.value,value:E.data}}gte(E,e){return this.setLimit("min",E,!0,l.toString(e))}gt(E,e){return this.setLimit("min",E,!1,l.toString(e))}lte(E,e){return this.setLimit("max",E,!0,l.toString(e))}lt(E,e){return this.setLimit("max",E,!1,l.toString(e))}setLimit(E,e,R,A){return new WE({...this._def,checks:[...this._def.checks,{kind:E,value:e,inclusive:R,message:l.toString(A)}]})}_addCheck(E){return new WE({...this._def,checks:[...this._def.checks,E]})}int(E){return this._addCheck({kind:"int",message:l.toString(E)})}positive(E){return this._addCheck({kind:"min",value:0,inclusive:!1,message:l.toString(E)})}negative(E){return this._addCheck({kind:"max",value:0,inclusive:!1,message:l.toString(E)})}nonpositive(E){return this._addCheck({kind:"max",value:0,inclusive:!0,message:l.toString(E)})}nonnegative(E){return this._addCheck({kind:"min",value:0,inclusive:!0,message:l.toString(E)})}multipleOf(E,e){return this._addCheck({kind:"multipleOf",value:E,message:l.toString(e)})}finite(E){return this._addCheck({kind:"finite",message:l.toString(E)})}safe(E){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:l.toString(E)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:l.toString(E)})}get minValue(){let E=null;for(const e of this._def.checks)e.kind==="min"&&(E===null||e.value>E)&&(E=e.value);return E}get maxValue(){let E=null;for(const e of this._def.checks)e.kind==="max"&&(E===null||e.value<E)&&(E=e.value);return E}get isInt(){return!!this._def.checks.find(E=>E.kind==="int"||E.kind==="multipleOf"&&v.isInteger(E.value))}get isFinite(){let E=null,e=null;for(const R of this._def.checks){if(R.kind==="finite"||R.kind==="int"||R.kind==="multipleOf")return!0;R.kind==="min"?(e===null||R.value>e)&&(e=R.value):R.kind==="max"&&(E===null||R.value<E)&&(E=R.value)}return Number.isFinite(e)&&Number.isFinite(E)}}WE.create=T=>new WE({checks:[],typeName:G.ZodNumber,coerce:(T==null?void 0:T.coerce)||!1,...m(T)});class vE extends F{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(E){if(this._def.coerce)try{E.data=BigInt(E.data)}catch{return this._getInvalidInput(E)}if(this._getType(E)!==M.bigint)return this._getInvalidInput(E);let R;const A=new TE;for(const S of this._def.checks)S.kind==="min"?(S.inclusive?E.data<S.value:E.data<=S.value)&&(R=this._getOrReturnCtx(E,R),D(R,{code:C.too_small,type:"bigint",minimum:S.value,inclusive:S.inclusive,message:S.message}),A.dirty()):S.kind==="max"?(S.inclusive?E.data>S.value:E.data>=S.value)&&(R=this._getOrReturnCtx(E,R),D(R,{code:C.too_big,type:"bigint",maximum:S.value,inclusive:S.inclusive,message:S.message}),A.dirty()):S.kind==="multipleOf"?E.data%S.value!==BigInt(0)&&(R=this._getOrReturnCtx(E,R),D(R,{code:C.not_multiple_of,multipleOf:S.value,message:S.message}),A.dirty()):v.assertNever(S);return{status:A.value,value:E.data}}_getInvalidInput(E){const e=this._getOrReturnCtx(E);return D(e,{code:C.invalid_type,expected:M.bigint,received:e.parsedType}),f}gte(E,e){return this.setLimit("min",E,!0,l.toString(e))}gt(E,e){return this.setLimit("min",E,!1,l.toString(e))}lte(E,e){return this.setLimit("max",E,!0,l.toString(e))}lt(E,e){return this.setLimit("max",E,!1,l.toString(e))}setLimit(E,e,R,A){return new vE({...this._def,checks:[...this._def.checks,{kind:E,value:e,inclusive:R,message:l.toString(A)}]})}_addCheck(E){return new vE({...this._def,checks:[...this._def.checks,E]})}positive(E){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:l.toString(E)})}negative(E){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:l.toString(E)})}nonpositive(E){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:l.toString(E)})}nonnegative(E){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:l.toString(E)})}multipleOf(E,e){return this._addCheck({kind:"multipleOf",value:E,message:l.toString(e)})}get minValue(){let E=null;for(const e of this._def.checks)e.kind==="min"&&(E===null||e.value>E)&&(E=e.value);return E}get maxValue(){let E=null;for(const e of this._def.checks)e.kind==="max"&&(E===null||e.value<E)&&(E=e.value);return E}}vE.create=T=>{var E;return new vE({checks:[],typeName:G.ZodBigInt,coerce:(E=T==null?void 0:T.coerce)!==null&&E!==void 0?E:!1,...m(T)})};class lT extends F{_parse(E){if(this._def.coerce&&(E.data=!!E.data),this._getType(E)!==M.boolean){const R=this._getOrReturnCtx(E);return D(R,{code:C.invalid_type,expected:M.boolean,received:R.parsedType}),f}return SE(E.data)}}lT.create=T=>new lT({typeName:G.ZodBoolean,coerce:(T==null?void 0:T.coerce)||!1,...m(T)});class qE extends F{_parse(E){if(this._def.coerce&&(E.data=new Date(E.data)),this._getType(E)!==M.date){const S=this._getOrReturnCtx(E);return D(S,{code:C.invalid_type,expected:M.date,received:S.parsedType}),f}if(isNaN(E.data.getTime())){const S=this._getOrReturnCtx(E);return D(S,{code:C.invalid_date}),f}const R=new TE;let A;for(const S of this._def.checks)S.kind==="min"?E.data.getTime()<S.value&&(A=this._getOrReturnCtx(E,A),D(A,{code:C.too_small,message:S.message,inclusive:!0,exact:!1,minimum:S.value,type:"date"}),R.dirty()):S.kind==="max"?E.data.getTime()>S.value&&(A=this._getOrReturnCtx(E,A),D(A,{code:C.too_big,message:S.message,inclusive:!0,exact:!1,maximum:S.value,type:"date"}),R.dirty()):v.assertNever(S);return{status:R.value,value:new Date(E.data.getTime())}}_addCheck(E){return new qE({...this._def,checks:[...this._def.checks,E]})}min(E,e){return this._addCheck({kind:"min",value:E.getTime(),message:l.toString(e)})}max(E,e){return this._addCheck({kind:"max",value:E.getTime(),message:l.toString(e)})}get minDate(){let E=null;for(const e of this._def.checks)e.kind==="min"&&(E===null||e.value>E)&&(E=e.value);return E!=null?new Date(E):null}get maxDate(){let E=null;for(const e of this._def.checks)e.kind==="max"&&(E===null||e.value<E)&&(E=e.value);return E!=null?new Date(E):null}}qE.create=T=>new qE({checks:[],coerce:(T==null?void 0:T.coerce)||!1,typeName:G.ZodDate,...m(T)});class kT extends F{_parse(E){if(this._getType(E)!==M.symbol){const R=this._getOrReturnCtx(E);return D(R,{code:C.invalid_type,expected:M.symbol,received:R.parsedType}),f}return SE(E.data)}}kT.create=T=>new kT({typeName:G.ZodSymbol,...m(T)});class UT extends F{_parse(E){if(this._getType(E)!==M.undefined){const R=this._getOrReturnCtx(E);return D(R,{code:C.invalid_type,expected:M.undefined,received:R.parsedType}),f}return SE(E.data)}}UT.create=T=>new UT({typeName:G.ZodUndefined,...m(T)});class cT extends F{_parse(E){if(this._getType(E)!==M.null){const R=this._getOrReturnCtx(E);return D(R,{code:C.invalid_type,expected:M.null,received:R.parsedType}),f}return SE(E.data)}}cT.create=T=>new cT({typeName:G.ZodNull,...m(T)});class OT extends F{constructor(){super(...arguments),this._any=!0}_parse(E){return SE(E.data)}}OT.create=T=>new OT({typeName:G.ZodAny,...m(T)});class kE extends F{constructor(){super(...arguments),this._unknown=!0}_parse(E){return SE(E.data)}}kE.create=T=>new kE({typeName:G.ZodUnknown,...m(T)});class hE extends F{_parse(E){const e=this._getOrReturnCtx(E);return D(e,{code:C.invalid_type,expected:M.never,received:e.parsedType}),f}}hE.create=T=>new hE({typeName:G.ZodNever,...m(T)});class ZT extends F{_parse(E){if(this._getType(E)!==M.undefined){const R=this._getOrReturnCtx(E);return D(R,{code:C.invalid_type,expected:M.void,received:R.parsedType}),f}return SE(E.data)}}ZT.create=T=>new ZT({typeName:G.ZodVoid,...m(T)});class ME extends F{_parse(E){const{ctx:e,status:R}=this._processInputParams(E),A=this._def;if(e.parsedType!==M.array)return D(e,{code:C.invalid_type,expected:M.array,received:e.parsedType}),f;if(A.exactLength!==null){const t=e.data.length>A.exactLength.value,O=e.data.length<A.exactLength.value;(t||O)&&(D(e,{code:t?C.too_big:C.too_small,minimum:O?A.exactLength.value:void 0,maximum:t?A.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:A.exactLength.message}),R.dirty())}if(A.minLength!==null&&e.data.length<A.minLength.value&&(D(e,{code:C.too_small,minimum:A.minLength.value,type:"array",inclusive:!0,exact:!1,message:A.minLength.message}),R.dirty()),A.maxLength!==null&&e.data.length>A.maxLength.value&&(D(e,{code:C.too_big,maximum:A.maxLength.value,type:"array",inclusive:!0,exact:!1,message:A.maxLength.message}),R.dirty()),e.common.async)return Promise.all([...e.data].map((t,O)=>A.type._parseAsync(new cE(e,t,e.path,O)))).then(t=>TE.mergeArray(R,t));const S=[...e.data].map((t,O)=>A.type._parseSync(new cE(e,t,e.path,O)));return TE.mergeArray(R,S)}get element(){return this._def.type}min(E,e){return new ME({...this._def,minLength:{value:E,message:l.toString(e)}})}max(E,e){return new ME({...this._def,maxLength:{value:E,message:l.toString(e)}})}length(E,e){return new ME({...this._def,exactLength:{value:E,message:l.toString(e)}})}nonempty(E){return this.min(1,E)}}ME.create=(T,E)=>new ME({type:T,minLength:null,maxLength:null,exactLength:null,typeName:G.ZodArray,...m(E)});function eT(T){if(T instanceof J){const E={};for(const e in T.shape){const R=T.shape[e];E[e]=UE.create(eT(R))}return new J({...T._def,shape:()=>E})}else return T instanceof ME?new ME({...T._def,type:eT(T.element)}):T instanceof UE?UE.create(eT(T.unwrap())):T instanceof XE?XE.create(eT(T.unwrap())):T instanceof uE?uE.create(T.items.map(E=>eT(E))):T}class J extends F{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const E=this._def.shape(),e=v.objectKeys(E);return this._cached={shape:E,keys:e}}_parse(E){if(this._getType(E)!==M.object){const I=this._getOrReturnCtx(E);return D(I,{code:C.invalid_type,expected:M.object,received:I.parsedType}),f}const{status:R,ctx:A}=this._processInputParams(E),{shape:S,keys:t}=this._getCached(),O=[];if(!(this._def.catchall instanceof hE&&this._def.unknownKeys==="strip"))for(const I in A.data)t.includes(I)||O.push(I);const r=[];for(const I of t){const N=S[I],n=A.data[I];r.push({key:{status:"valid",value:I},value:N._parse(new cE(A,n,A.path,I)),alwaysSet:I in A.data})}if(this._def.catchall instanceof hE){const I=this._def.unknownKeys;if(I==="passthrough")for(const N of O)r.push({key:{status:"valid",value:N},value:{status:"valid",value:A.data[N]}});else if(I==="strict")O.length>0&&(D(A,{code:C.unrecognized_keys,keys:O}),R.dirty());else if(I!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const I=this._def.catchall;for(const N of O){const n=A.data[N];r.push({key:{status:"valid",value:N},value:I._parse(new cE(A,n,A.path,N)),alwaysSet:N in A.data})}}return A.common.async?Promise.resolve().then(async()=>{const I=[];for(const N of r){const n=await N.key,L=await N.value;I.push({key:n,value:L,alwaysSet:N.alwaysSet})}return I}).then(I=>TE.mergeObjectSync(R,I)):TE.mergeObjectSync(R,r)}get shape(){return this._def.shape()}strict(E){return l.errToObj,new J({...this._def,unknownKeys:"strict",...E!==void 0?{errorMap:(e,R)=>{var A,S,t,O;const r=(t=(S=(A=this._def).errorMap)===null||S===void 0?void 0:S.call(A,e,R).message)!==null&&t!==void 0?t:R.defaultError;return e.code==="unrecognized_keys"?{message:(O=l.errToObj(E).message)!==null&&O!==void 0?O:r}:{message:r}}}:{}})}strip(){return new J({...this._def,unknownKeys:"strip"})}passthrough(){return new J({...this._def,unknownKeys:"passthrough"})}extend(E){return new J({...this._def,shape:()=>({...this._def.shape(),...E})})}merge(E){return new J({unknownKeys:E._def.unknownKeys,catchall:E._def.catchall,shape:()=>({...this._def.shape(),...E._def.shape()}),typeName:G.ZodObject})}setKey(E,e){return this.augment({[E]:e})}catchall(E){return new J({...this._def,catchall:E})}pick(E){const e={};return v.objectKeys(E).forEach(R=>{E[R]&&this.shape[R]&&(e[R]=this.shape[R])}),new J({...this._def,shape:()=>e})}omit(E){const e={};return v.objectKeys(this.shape).forEach(R=>{E[R]||(e[R]=this.shape[R])}),new J({...this._def,shape:()=>e})}deepPartial(){return eT(this)}partial(E){const e={};return v.objectKeys(this.shape).forEach(R=>{const A=this.shape[R];E&&!E[R]?e[R]=A:e[R]=A.optional()}),new J({...this._def,shape:()=>e})}required(E){const e={};return v.objectKeys(this.shape).forEach(R=>{if(E&&!E[R])e[R]=this.shape[R];else{let S=this.shape[R];for(;S instanceof UE;)S=S._def.innerType;e[R]=S}}),new J({...this._def,shape:()=>e})}keyof(){return HR(v.objectKeys(this.shape))}}J.create=(T,E)=>new J({shape:()=>T,unknownKeys:"strip",catchall:hE.create(),typeName:G.ZodObject,...m(E)});J.strictCreate=(T,E)=>new J({shape:()=>T,unknownKeys:"strict",catchall:hE.create(),typeName:G.ZodObject,...m(E)});J.lazycreate=(T,E)=>new J({shape:T,unknownKeys:"strip",catchall:hE.create(),typeName:G.ZodObject,...m(E)});class uT extends F{_parse(E){const{ctx:e}=this._processInputParams(E),R=this._def.options;function A(S){for(const O of S)if(O.result.status==="valid")return O.result;for(const O of S)if(O.result.status==="dirty")return e.common.issues.push(...O.ctx.common.issues),O.result;const t=S.map(O=>new _E(O.ctx.common.issues));return D(e,{code:C.invalid_union,unionErrors:t}),f}if(e.common.async)return Promise.all(R.map(async S=>{const t={...e,common:{...e.common,issues:[]},parent:null};return{result:await S._parseAsync({data:e.data,path:e.path,parent:t}),ctx:t}})).then(A);{let S;const t=[];for(const r of R){const I={...e,common:{...e.common,issues:[]},parent:null},N=r._parseSync({data:e.data,path:e.path,parent:I});if(N.status==="valid")return N;N.status==="dirty"&&!S&&(S={result:N,ctx:I}),I.common.issues.length&&t.push(I.common.issues)}if(S)return e.common.issues.push(...S.ctx.common.issues),S.result;const O=t.map(r=>new _E(r));return D(e,{code:C.invalid_union,unionErrors:O}),f}}get options(){return this._def.options}}uT.create=(T,E)=>new uT({options:T,typeName:G.ZodUnion,...m(E)});const fE=T=>T instanceof fT?fE(T.schema):T instanceof lE?fE(T.innerType()):T instanceof pT?[T.value]:T instanceof gE?T.options:T instanceof hT?v.objectValues(T.enum):T instanceof HT?fE(T._def.innerType):T instanceof UT?[void 0]:T instanceof cT?[null]:T instanceof UE?[void 0,...fE(T.unwrap())]:T instanceof XE?[null,...fE(T.unwrap())]:T instanceof Ue||T instanceof BT?fE(T.unwrap()):T instanceof mT?fE(T._def.innerType):[];class ee extends F{_parse(E){const{ctx:e}=this._processInputParams(E);if(e.parsedType!==M.object)return D(e,{code:C.invalid_type,expected:M.object,received:e.parsedType}),f;const R=this.discriminator,A=e.data[R],S=this.optionsMap.get(A);return S?e.common.async?S._parseAsync({data:e.data,path:e.path,parent:e}):S._parseSync({data:e.data,path:e.path,parent:e}):(D(e,{code:C.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[R]}),f)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(E,e,R){const A=new Map;for(const S of e){const t=fE(S.shape[E]);if(!t.length)throw new Error(`A discriminator value for key \`${E}\` could not be extracted from all schema options`);for(const O of t){if(A.has(O))throw new Error(`Discriminator property ${String(E)} has duplicate value ${String(O)}`);A.set(O,S)}}return new ee({typeName:G.ZodDiscriminatedUnion,discriminator:E,options:e,optionsMap:A,...m(R)})}}function Pe(T,E){const e=pE(T),R=pE(E);if(T===E)return{valid:!0,data:T};if(e===M.object&&R===M.object){const A=v.objectKeys(E),S=v.objectKeys(T).filter(O=>A.indexOf(O)!==-1),t={...T,...E};for(const O of S){const r=Pe(T[O],E[O]);if(!r.valid)return{valid:!1};t[O]=r.data}return{valid:!0,data:t}}else if(e===M.array&&R===M.array){if(T.length!==E.length)return{valid:!1};const A=[];for(let S=0;S<T.length;S++){const t=T[S],O=E[S],r=Pe(t,O);if(!r.valid)return{valid:!1};A.push(r.data)}return{valid:!0,data:A}}else return e===M.date&&R===M.date&&+T==+E?{valid:!0,data:T}:{valid:!1}}class dT extends F{_parse(E){const{status:e,ctx:R}=this._processInputParams(E),A=(S,t)=>{if(ie(S)||ie(t))return f;const O=Pe(S.value,t.value);return O.valid?((oe(S)||oe(t))&&e.dirty(),{status:e.value,value:O.data}):(D(R,{code:C.invalid_intersection_types}),f)};return R.common.async?Promise.all([this._def.left._parseAsync({data:R.data,path:R.path,parent:R}),this._def.right._parseAsync({data:R.data,path:R.path,parent:R})]).then(([S,t])=>A(S,t)):A(this._def.left._parseSync({data:R.data,path:R.path,parent:R}),this._def.right._parseSync({data:R.data,path:R.path,parent:R}))}}dT.create=(T,E,e)=>new dT({left:T,right:E,typeName:G.ZodIntersection,...m(e)});class uE extends F{_parse(E){const{status:e,ctx:R}=this._processInputParams(E);if(R.parsedType!==M.array)return D(R,{code:C.invalid_type,expected:M.array,received:R.parsedType}),f;if(R.data.length<this._def.items.length)return D(R,{code:C.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),f;!this._def.rest&&R.data.length>this._def.items.length&&(D(R,{code:C.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),e.dirty());const S=[...R.data].map((t,O)=>{const r=this._def.items[O]||this._def.rest;return r?r._parse(new cE(R,t,R.path,O)):null}).filter(t=>!!t);return R.common.async?Promise.all(S).then(t=>TE.mergeArray(e,t)):TE.mergeArray(e,S)}get items(){return this._def.items}rest(E){return new uE({...this._def,rest:E})}}uE.create=(T,E)=>{if(!Array.isArray(T))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new uE({items:T,typeName:G.ZodTuple,rest:null,...m(E)})};class GT extends F{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(E){const{status:e,ctx:R}=this._processInputParams(E);if(R.parsedType!==M.object)return D(R,{code:C.invalid_type,expected:M.object,received:R.parsedType}),f;const A=[],S=this._def.keyType,t=this._def.valueType;for(const O in R.data)A.push({key:S._parse(new cE(R,O,R.path,O)),value:t._parse(new cE(R,R.data[O],R.path,O)),alwaysSet:O in R.data});return R.common.async?TE.mergeObjectAsync(e,A):TE.mergeObjectSync(e,A)}get element(){return this._def.valueType}static create(E,e,R){return e instanceof F?new GT({keyType:E,valueType:e,typeName:G.ZodRecord,...m(R)}):new GT({keyType:PE.create(),valueType:E,typeName:G.ZodRecord,...m(e)})}}class QT extends F{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(E){const{status:e,ctx:R}=this._processInputParams(E);if(R.parsedType!==M.map)return D(R,{code:C.invalid_type,expected:M.map,received:R.parsedType}),f;const A=this._def.keyType,S=this._def.valueType,t=[...R.data.entries()].map(([O,r],I)=>({key:A._parse(new cE(R,O,R.path,[I,"key"])),value:S._parse(new cE(R,r,R.path,[I,"value"]))}));if(R.common.async){const O=new Map;return Promise.resolve().then(async()=>{for(const r of t){const I=await r.key,N=await r.value;if(I.status==="aborted"||N.status==="aborted")return f;(I.status==="dirty"||N.status==="dirty")&&e.dirty(),O.set(I.value,N.value)}return{status:e.value,value:O}})}else{const O=new Map;for(const r of t){const I=r.key,N=r.value;if(I.status==="aborted"||N.status==="aborted")return f;(I.status==="dirty"||N.status==="dirty")&&e.dirty(),O.set(I.value,N.value)}return{status:e.value,value:O}}}}QT.create=(T,E,e)=>new QT({valueType:E,keyType:T,typeName:G.ZodMap,...m(e)});class jE extends F{_parse(E){const{status:e,ctx:R}=this._processInputParams(E);if(R.parsedType!==M.set)return D(R,{code:C.invalid_type,expected:M.set,received:R.parsedType}),f;const A=this._def;A.minSize!==null&&R.data.size<A.minSize.value&&(D(R,{code:C.too_small,minimum:A.minSize.value,type:"set",inclusive:!0,exact:!1,message:A.minSize.message}),e.dirty()),A.maxSize!==null&&R.data.size>A.maxSize.value&&(D(R,{code:C.too_big,maximum:A.maxSize.value,type:"set",inclusive:!0,exact:!1,message:A.maxSize.message}),e.dirty());const S=this._def.valueType;function t(r){const I=new Set;for(const N of r){if(N.status==="aborted")return f;N.status==="dirty"&&e.dirty(),I.add(N.value)}return{status:e.value,value:I}}const O=[...R.data.values()].map((r,I)=>S._parse(new cE(R,r,R.path,I)));return R.common.async?Promise.all(O).then(r=>t(r)):t(O)}min(E,e){return new jE({...this._def,minSize:{value:E,message:l.toString(e)}})}max(E,e){return new jE({...this._def,maxSize:{value:E,message:l.toString(e)}})}size(E,e){return this.min(E,e).max(E,e)}nonempty(E){return this.min(1,E)}}jE.create=(T,E)=>new jE({valueType:T,minSize:null,maxSize:null,typeName:G.ZodSet,...m(E)});class tT extends F{constructor(){super(...arguments),this.validate=this.implement}_parse(E){const{ctx:e}=this._processInputParams(E);if(e.parsedType!==M.function)return D(e,{code:C.invalid_type,expected:M.function,received:e.parsedType}),f;function R(O,r){return $T({data:O,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,wT(),IT].filter(I=>!!I),issueData:{code:C.invalid_arguments,argumentsError:r}})}function A(O,r){return $T({data:O,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,wT(),IT].filter(I=>!!I),issueData:{code:C.invalid_return_type,returnTypeError:r}})}const S={errorMap:e.common.contextualErrorMap},t=e.data;if(this._def.returns instanceof NT){const O=this;return SE(async function(...r){const I=new _E([]),N=await O._def.args.parseAsync(r,S).catch(i=>{throw I.addIssue(R(r,i)),I}),n=await Reflect.apply(t,this,N);return await O._def.returns._def.type.parseAsync(n,S).catch(i=>{throw I.addIssue(A(n,i)),I})})}else{const O=this;return SE(function(...r){const I=O._def.args.safeParse(r,S);if(!I.success)throw new _E([R(r,I.error)]);const N=Reflect.apply(t,this,I.data),n=O._def.returns.safeParse(N,S);if(!n.success)throw new _E([A(N,n.error)]);return n.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...E){return new tT({...this._def,args:uE.create(E).rest(kE.create())})}returns(E){return new tT({...this._def,returns:E})}implement(E){return this.parse(E)}strictImplement(E){return this.parse(E)}static create(E,e,R){return new tT({args:E||uE.create([]).rest(kE.create()),returns:e||kE.create(),typeName:G.ZodFunction,...m(R)})}}class fT extends F{get schema(){return this._def.getter()}_parse(E){const{ctx:e}=this._processInputParams(E);return this._def.getter()._parse({data:e.data,path:e.path,parent:e})}}fT.create=(T,E)=>new fT({getter:T,typeName:G.ZodLazy,...m(E)});class pT extends F{_parse(E){if(E.data!==this._def.value){const e=this._getOrReturnCtx(E);return D(e,{received:e.data,code:C.invalid_literal,expected:this._def.value}),f}return{status:"valid",value:E.data}}get value(){return this._def.value}}pT.create=(T,E)=>new pT({value:T,typeName:G.ZodLiteral,...m(E)});function HR(T,E){return new gE({values:T,typeName:G.ZodEnum,...m(E)})}class gE extends F{constructor(){super(...arguments),iT.set(this,void 0)}_parse(E){if(typeof E.data!="string"){const e=this._getOrReturnCtx(E),R=this._def.values;return D(e,{expected:v.joinValues(R),received:e.parsedType,code:C.invalid_type}),f}if(JT(this,iT)||GR(this,iT,new Set(this._def.values)),!JT(this,iT).has(E.data)){const e=this._getOrReturnCtx(E),R=this._def.values;return D(e,{received:e.data,code:C.invalid_enum_value,options:R}),f}return SE(E.data)}get options(){return this._def.values}get enum(){const E={};for(const e of this._def.values)E[e]=e;return E}get Values(){const E={};for(const e of this._def.values)E[e]=e;return E}get Enum(){const E={};for(const e of this._def.values)E[e]=e;return E}extract(E,e=this._def){return gE.create(E,{...this._def,...e})}exclude(E,e=this._def){return gE.create(this.options.filter(R=>!E.includes(R)),{...this._def,...e})}}iT=new WeakMap;gE.create=HR;class hT extends F{constructor(){super(...arguments),oT.set(this,void 0)}_parse(E){const e=v.getValidEnumValues(this._def.values),R=this._getOrReturnCtx(E);if(R.parsedType!==M.string&&R.parsedType!==M.number){const A=v.objectValues(e);return D(R,{expected:v.joinValues(A),received:R.parsedType,code:C.invalid_type}),f}if(JT(this,oT)||GR(this,oT,new Set(v.getValidEnumValues(this._def.values))),!JT(this,oT).has(E.data)){const A=v.objectValues(e);return D(R,{received:R.data,code:C.invalid_enum_value,options:A}),f}return SE(E.data)}get enum(){return this._def.values}}oT=new WeakMap;hT.create=(T,E)=>new hT({values:T,typeName:G.ZodNativeEnum,...m(E)});class NT extends F{unwrap(){return this._def.type}_parse(E){const{ctx:e}=this._processInputParams(E);if(e.parsedType!==M.promise&&e.common.async===!1)return D(e,{code:C.invalid_type,expected:M.promise,received:e.parsedType}),f;const R=e.parsedType===M.promise?e.data:Promise.resolve(e.data);return SE(R.then(A=>this._def.type.parseAsync(A,{path:e.path,errorMap:e.common.contextualErrorMap})))}}NT.create=(T,E)=>new NT({type:T,typeName:G.ZodPromise,...m(E)});class lE extends F{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===G.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(E){const{status:e,ctx:R}=this._processInputParams(E),A=this._def.effect||null,S={addIssue:t=>{D(R,t),t.fatal?e.abort():e.dirty()},get path(){return R.path}};if(S.addIssue=S.addIssue.bind(S),A.type==="preprocess"){const t=A.transform(R.data,S);if(R.common.async)return Promise.resolve(t).then(async O=>{if(e.value==="aborted")return f;const r=await this._def.schema._parseAsync({data:O,path:R.path,parent:R});return r.status==="aborted"?f:r.status==="dirty"||e.value==="dirty"?ST(r.value):r});{if(e.value==="aborted")return f;const O=this._def.schema._parseSync({data:t,path:R.path,parent:R});return O.status==="aborted"?f:O.status==="dirty"||e.value==="dirty"?ST(O.value):O}}if(A.type==="refinement"){const t=O=>{const r=A.refinement(O,S);if(R.common.async)return Promise.resolve(r);if(r instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return O};if(R.common.async===!1){const O=this._def.schema._parseSync({data:R.data,path:R.path,parent:R});return O.status==="aborted"?f:(O.status==="dirty"&&e.dirty(),t(O.value),{status:e.value,value:O.value})}else return this._def.schema._parseAsync({data:R.data,path:R.path,parent:R}).then(O=>O.status==="aborted"?f:(O.status==="dirty"&&e.dirty(),t(O.value).then(()=>({status:e.value,value:O.value}))))}if(A.type==="transform")if(R.common.async===!1){const t=this._def.schema._parseSync({data:R.data,path:R.path,parent:R});if(!QE(t))return t;const O=A.transform(t.value,S);if(O instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:e.value,value:O}}else return this._def.schema._parseAsync({data:R.data,path:R.path,parent:R}).then(t=>QE(t)?Promise.resolve(A.transform(t.value,S)).then(O=>({status:e.value,value:O})):t);v.assertNever(A)}}lE.create=(T,E,e)=>new lE({schema:T,typeName:G.ZodEffects,effect:E,...m(e)});lE.createWithPreprocess=(T,E,e)=>new lE({schema:E,effect:{type:"preprocess",transform:T},typeName:G.ZodEffects,...m(e)});class UE extends F{_parse(E){return this._getType(E)===M.undefined?SE(void 0):this._def.innerType._parse(E)}unwrap(){return this._def.innerType}}UE.create=(T,E)=>new UE({innerType:T,typeName:G.ZodOptional,...m(E)});class XE extends F{_parse(E){return this._getType(E)===M.null?SE(null):this._def.innerType._parse(E)}unwrap(){return this._def.innerType}}XE.create=(T,E)=>new XE({innerType:T,typeName:G.ZodNullable,...m(E)});class HT extends F{_parse(E){const{ctx:e}=this._processInputParams(E);let R=e.data;return e.parsedType===M.undefined&&(R=this._def.defaultValue()),this._def.innerType._parse({data:R,path:e.path,parent:e})}removeDefault(){return this._def.innerType}}HT.create=(T,E)=>new HT({innerType:T,typeName:G.ZodDefault,defaultValue:typeof E.default=="function"?E.default:()=>E.default,...m(E)});class mT extends F{_parse(E){const{ctx:e}=this._processInputParams(E),R={...e,common:{...e.common,issues:[]}},A=this._def.innerType._parse({data:R.data,path:R.path,parent:{...R}});return MT(A)?A.then(S=>({status:"valid",value:S.status==="valid"?S.value:this._def.catchValue({get error(){return new _E(R.common.issues)},input:R.data})})):{status:"valid",value:A.status==="valid"?A.value:this._def.catchValue({get error(){return new _E(R.common.issues)},input:R.data})}}removeCatch(){return this._def.innerType}}mT.create=(T,E)=>new mT({innerType:T,typeName:G.ZodCatch,catchValue:typeof E.catch=="function"?E.catch:()=>E.catch,...m(E)});class qT extends F{_parse(E){if(this._getType(E)!==M.nan){const R=this._getOrReturnCtx(E);return D(R,{code:C.invalid_type,expected:M.nan,received:R.parsedType}),f}return{status:"valid",value:E.data}}}qT.create=T=>new qT({typeName:G.ZodNaN,...m(T)});const FO=Symbol("zod_brand");class Ue extends F{_parse(E){const{ctx:e}=this._processInputParams(E),R=e.data;return this._def.type._parse({data:R,path:e.path,parent:e})}unwrap(){return this._def.type}}class VT extends F{_parse(E){const{status:e,ctx:R}=this._processInputParams(E);if(R.common.async)return(async()=>{const S=await this._def.in._parseAsync({data:R.data,path:R.path,parent:R});return S.status==="aborted"?f:S.status==="dirty"?(e.dirty(),ST(S.value)):this._def.out._parseAsync({data:S.value,path:R.path,parent:R})})();{const A=this._def.in._parseSync({data:R.data,path:R.path,parent:R});return A.status==="aborted"?f:A.status==="dirty"?(e.dirty(),{status:"dirty",value:A.value}):this._def.out._parseSync({data:A.value,path:R.path,parent:R})}}static create(E,e){return new VT({in:E,out:e,typeName:G.ZodPipeline})}}class BT extends F{_parse(E){const e=this._def.innerType._parse(E),R=A=>(QE(A)&&(A.value=Object.freeze(A.value)),A);return MT(e)?e.then(A=>R(A)):R(e)}unwrap(){return this._def.innerType}}BT.create=(T,E)=>new BT({innerType:T,typeName:G.ZodReadonly,...m(E)});function mR(T,E={},e){return T?OT.create().superRefine((R,A)=>{var S,t;if(!T(R)){const O=typeof E=="function"?E(R):typeof E=="string"?{message:E}:E,r=(t=(S=O.fatal)!==null&&S!==void 0?S:e)!==null&&t!==void 0?t:!0,I=typeof O=="string"?{message:O}:O;A.addIssue({code:"custom",...I,fatal:r})}}):OT.create()}const VO={object:J.lazycreate};var G;(function(T){T.ZodString="ZodString",T.ZodNumber="ZodNumber",T.ZodNaN="ZodNaN",T.ZodBigInt="ZodBigInt",T.ZodBoolean="ZodBoolean",T.ZodDate="ZodDate",T.ZodSymbol="ZodSymbol",T.ZodUndefined="ZodUndefined",T.ZodNull="ZodNull",T.ZodAny="ZodAny",T.ZodUnknown="ZodUnknown",T.ZodNever="ZodNever",T.ZodVoid="ZodVoid",T.ZodArray="ZodArray",T.ZodObject="ZodObject",T.ZodUnion="ZodUnion",T.ZodDiscriminatedUnion="ZodDiscriminatedUnion",T.ZodIntersection="ZodIntersection",T.ZodTuple="ZodTuple",T.ZodRecord="ZodRecord",T.ZodMap="ZodMap",T.ZodSet="ZodSet",T.ZodFunction="ZodFunction",T.ZodLazy="ZodLazy",T.ZodLiteral="ZodLiteral",T.ZodEnum="ZodEnum",T.ZodEffects="ZodEffects",T.ZodNativeEnum="ZodNativeEnum",T.ZodOptional="ZodOptional",T.ZodNullable="ZodNullable",T.ZodDefault="ZodDefault",T.ZodCatch="ZodCatch",T.ZodPromise="ZodPromise",T.ZodBranded="ZodBranded",T.ZodPipeline="ZodPipeline",T.ZodReadonly="ZodReadonly"})(G||(G={}));const yO=(T,E={message:`Input not instance of ${T.name}`})=>mR(e=>e instanceof T,E),BR=PE.create,YR=WE.create,WO=qT.create,vO=vE.create,FR=lT.create,gO=qE.create,XO=kT.create,bO=UT.create,KO=cT.create,xO=OT.create,wO=kE.create,$O=hE.create,JO=ZT.create,kO=ME.create,ZO=J.create,QO=J.strictCreate,qO=uT.create,jO=ee.create,zO=dT.create,EN=uE.create,TN=GT.create,eN=QT.create,RN=jE.create,AN=tT.create,SN=fT.create,tN=pT.create,IN=gE.create,ON=hT.create,NN=NT.create,$e=lE.create,rN=UE.create,sN=XE.create,nN=lE.createWithPreprocess,_N=VT.create,aN=()=>BR().optional(),CN=()=>YR().optional(),LN=()=>FR().optional(),iN={string:T=>PE.create({...T,coerce:!0}),number:T=>WE.create({...T,coerce:!0}),boolean:T=>lT.create({...T,coerce:!0}),bigint:T=>vE.create({...T,coerce:!0}),date:T=>qE.create({...T,coerce:!0})},oN=f;var RT=Object.freeze({__proto__:null,defaultErrorMap:IT,setErrorMap:nO,getErrorMap:wT,makeIssue:$T,EMPTY_PATH:_O,addIssueToContext:D,ParseStatus:TE,INVALID:f,DIRTY:ST,OK:SE,isAborted:ie,isDirty:oe,isValid:QE,isAsync:MT,get util(){return v},get objectUtil(){return Le},ZodParsedType:M,getParsedType:pE,ZodType:F,datetimeRegex:hR,ZodString:PE,ZodNumber:WE,ZodBigInt:vE,ZodBoolean:lT,ZodDate:qE,ZodSymbol:kT,ZodUndefined:UT,ZodNull:cT,ZodAny:OT,ZodUnknown:kE,ZodNever:hE,ZodVoid:ZT,ZodArray:ME,ZodObject:J,ZodUnion:uT,ZodDiscriminatedUnion:ee,ZodIntersection:dT,ZodTuple:uE,ZodRecord:GT,ZodMap:QT,ZodSet:jE,ZodFunction:tT,ZodLazy:fT,ZodLiteral:pT,ZodEnum:gE,ZodNativeEnum:hT,ZodPromise:NT,ZodEffects:lE,ZodTransformer:lE,ZodOptional:UE,ZodNullable:XE,ZodDefault:HT,ZodCatch:mT,ZodNaN:qT,BRAND:FO,ZodBranded:Ue,ZodPipeline:VT,ZodReadonly:BT,custom:mR,Schema:F,ZodSchema:F,late:VO,get ZodFirstPartyTypeKind(){return G},coerce:iN,any:xO,array:kO,bigint:vO,boolean:FR,date:gO,discriminatedUnion:jO,effect:$e,enum:IN,function:AN,instanceof:yO,intersection:zO,lazy:SN,literal:tN,map:eN,nan:WO,nativeEnum:ON,never:$O,null:KO,nullable:sN,number:YR,object:ZO,oboolean:LN,onumber:CN,optional:rN,ostring:aN,pipeline:_N,preprocess:nN,promise:NN,record:TN,set:RN,strictObject:QO,string:BR,symbol:XO,transformer:$e,tuple:EN,undefined:bO,union:qO,unknown:wO,void:JO,NEVER:oN,ZodIssueCode:C,quotelessJson:sO,ZodError:_E}),PN=()=>{},DN=(T,E)=>E(),MN=(T,E)=>E(),lN=(T,E)=>E(),UN=Q('<div class="buttons svelte-7pyyks"><button class="button is-info">Copy</button> <button class="button is-info">Insert in editor</button></div> <textarea readonly="" class="svelte-7pyyks"></textarea>',1),cN=Q('<div class="log svelte-7pyyks"><span role="button" tabindex="0" class="log-title mb-2 svelte-7pyyks"> </span> <!></div>');function uN(T,E){bE(E,!0);let e=JE(E,"log",15),R=JE(E,"onOpen",3,()=>{}),A=JE(E,"onClose",3,()=>{}),S=JE(E,"onSetEditor",3,()=>{}),t=Z(void 0);async function O(){await navigator.clipboard.writeText(e().text),alert("Copied!")}function r(){S()(e().text)}function I(){var h;(h=a(t))==null||h.scrollIntoView({behavior:"smooth"}),e(e().isOpen=!0,!0),R()()}function N(){e(e().isOpen=!1,!0),A()()}function n(){if(e().isOpen){N();return}I()}var L=cN(),i=b(L);i.__keydown=[PN],i.__click=[DN,n];var o=b(i,!0);W(i);var d=$(i,2);{var B=h=>{var u=UN(),U=YE(u),K=b(U);K.__click=[MN,O];var p=$(K,2);p.__click=[lN,r],W(U);var y=$(U,2);PA(y),NE(()=>uA(y,e().text)),w(h,u)};iE(d,h=>{e().isOpen&&h(B)})}return W(L),AT(L,h=>x(t,h),()=>a(t)),NE(()=>nE(o,(e().isOpen?"- ":"+")+e().title)),w(T,L),KE({open:I,close:N})}Ee(["keydown","click"]);var dN=()=>{},GN=(T,E)=>x(E,!a(E)),fN=Q('<div class="logger"><span class="label svelte-18zj4or" role="button" tabindex="0"> </span> <!></div>');function pN(T,E){bE(E,!0);let e=JE(E,"onSetEditor",3,()=>{}),R=Z(q([])),A=Z(!0);function S(i){x(R,q([...a(R),i]))}function t(){x(R,q([]))}function O(i){for(let o=0;o<a(R).length;o++)a(R)[o].isOpen=i==o}var r=fN(),I=b(r);I.__keydown=[dN],I.__click=[GN,A];var N=b(I);W(I);var n=$(I,2);{var L=i=>{var o=De(),d=YE(o);DT(d,19,()=>a(R),B=>B.timestamp,(B,h,u)=>{uN(B,{onOpen:()=>O(a(u)),onSetEditor:U=>e()(U),get log(){return a(R)[a(u)]},set log(U){a(R)[a(u)]=U}})}),w(i,o)};iE(n,i=>{a(A)&&i(L)})}return W(r),NE(()=>nE(N,`${(a(A)?"-":"+")??""}
        Logs`)),w(T,r),KE({addLog:S,clear:t})}Ee(["keydown","click"]);const jT=SR("Dark");function hN(T,E,e){return E in T?Object.defineProperty(T,E,{value:e,enumerable:!0,configurable:!0,writable:!0}):T[E]=e,T}function Je(T,E){var e=Object.keys(T);if(Object.getOwnPropertySymbols){var R=Object.getOwnPropertySymbols(T);E&&(R=R.filter(function(A){return Object.getOwnPropertyDescriptor(T,A).enumerable})),e.push.apply(e,R)}return e}function ke(T){for(var E=1;E<arguments.length;E++){var e=arguments[E]!=null?arguments[E]:{};E%2?Je(Object(e),!0).forEach(function(R){hN(T,R,e[R])}):Object.getOwnPropertyDescriptors?Object.defineProperties(T,Object.getOwnPropertyDescriptors(e)):Je(Object(e)).forEach(function(R){Object.defineProperty(T,R,Object.getOwnPropertyDescriptor(e,R))})}return T}function HN(T,E){if(T==null)return{};var e={},R=Object.keys(T),A,S;for(S=0;S<R.length;S++)A=R[S],!(E.indexOf(A)>=0)&&(e[A]=T[A]);return e}function mN(T,E){if(T==null)return{};var e=HN(T,E),R,A;if(Object.getOwnPropertySymbols){var S=Object.getOwnPropertySymbols(T);for(A=0;A<S.length;A++)R=S[A],!(E.indexOf(R)>=0)&&Object.prototype.propertyIsEnumerable.call(T,R)&&(e[R]=T[R])}return e}function BN(T,E){return YN(T)||FN(T,E)||VN(T,E)||yN()}function YN(T){if(Array.isArray(T))return T}function FN(T,E){if(!(typeof Symbol>"u"||!(Symbol.iterator in Object(T)))){var e=[],R=!0,A=!1,S=void 0;try{for(var t=T[Symbol.iterator](),O;!(R=(O=t.next()).done)&&(e.push(O.value),!(E&&e.length===E));R=!0);}catch(r){A=!0,S=r}finally{try{!R&&t.return!=null&&t.return()}finally{if(A)throw S}}return e}}function VN(T,E){if(T){if(typeof T=="string")return Ze(T,E);var e=Object.prototype.toString.call(T).slice(8,-1);if(e==="Object"&&T.constructor&&(e=T.constructor.name),e==="Map"||e==="Set")return Array.from(T);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return Ze(T,E)}}function Ze(T,E){(E==null||E>T.length)&&(E=T.length);for(var e=0,R=new Array(E);e<E;e++)R[e]=T[e];return R}function yN(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function WN(T,E,e){return E in T?Object.defineProperty(T,E,{value:e,enumerable:!0,configurable:!0,writable:!0}):T[E]=e,T}function Qe(T,E){var e=Object.keys(T);if(Object.getOwnPropertySymbols){var R=Object.getOwnPropertySymbols(T);E&&(R=R.filter(function(A){return Object.getOwnPropertyDescriptor(T,A).enumerable})),e.push.apply(e,R)}return e}function qe(T){for(var E=1;E<arguments.length;E++){var e=arguments[E]!=null?arguments[E]:{};E%2?Qe(Object(e),!0).forEach(function(R){WN(T,R,e[R])}):Object.getOwnPropertyDescriptors?Object.defineProperties(T,Object.getOwnPropertyDescriptors(e)):Qe(Object(e)).forEach(function(R){Object.defineProperty(T,R,Object.getOwnPropertyDescriptor(e,R))})}return T}function vN(){for(var T=arguments.length,E=new Array(T),e=0;e<T;e++)E[e]=arguments[e];return function(R){return E.reduceRight(function(A,S){return S(A)},R)}}function PT(T){return function E(){for(var e=this,R=arguments.length,A=new Array(R),S=0;S<R;S++)A[S]=arguments[S];return A.length>=T.length?T.apply(this,A):function(){for(var t=arguments.length,O=new Array(t),r=0;r<t;r++)O[r]=arguments[r];return E.apply(e,[].concat(A,O))}}}function zT(T){return{}.toString.call(T).includes("Object")}function gN(T){return!Object.keys(T).length}function YT(T){return typeof T=="function"}function XN(T,E){return Object.prototype.hasOwnProperty.call(T,E)}function bN(T,E){return zT(E)||VE("changeType"),Object.keys(E).some(function(e){return!XN(T,e)})&&VE("changeField"),E}function KN(T){YT(T)||VE("selectorType")}function xN(T){YT(T)||zT(T)||VE("handlerType"),zT(T)&&Object.values(T).some(function(E){return!YT(E)})&&VE("handlersType")}function wN(T){T||VE("initialIsRequired"),zT(T)||VE("initialType"),gN(T)&&VE("initialContent")}function $N(T,E){throw new Error(T[E]||T.default)}var JN={initialIsRequired:"initial state is required",initialType:"initial state should be an object",initialContent:"initial state shouldn't be an empty object",handlerType:"handler should be an object or a function",handlersType:"all handlers should be a functions",selectorType:"selector should be a function",changeType:"provided value of changes should be an object",changeField:'it seams you want to change a field in the state which is not specified in the "initial" state',default:"an unknown error accured in `state-local` package"},VE=PT($N)(JN),gT={changes:bN,selector:KN,handler:xN,initial:wN};function kN(T){var E=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};gT.initial(T),gT.handler(E);var e={current:T},R=PT(qN)(e,E),A=PT(QN)(e),S=PT(gT.changes)(T),t=PT(ZN)(e);function O(){var I=arguments.length>0&&arguments[0]!==void 0?arguments[0]:function(N){return N};return gT.selector(I),I(e.current)}function r(I){vN(R,A,S,t)(I)}return[O,r]}function ZN(T,E){return YT(E)?E(T.current):E}function QN(T,E){return T.current=qe(qe({},T.current),E),E}function qN(T,E,e){return YT(E)?E(T.current):Object.keys(e).forEach(function(R){var A;return(A=E[R])===null||A===void 0?void 0:A.call(E,T.current[R])}),e}var jN={create:kN},zN={paths:{vs:"https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs"}};function Er(T){return function E(){for(var e=this,R=arguments.length,A=new Array(R),S=0;S<R;S++)A[S]=arguments[S];return A.length>=T.length?T.apply(this,A):function(){for(var t=arguments.length,O=new Array(t),r=0;r<t;r++)O[r]=arguments[r];return E.apply(e,[].concat(A,O))}}}function Tr(T){return{}.toString.call(T).includes("Object")}function er(T){return T||je("configIsRequired"),Tr(T)||je("configType"),T.urls?(Rr(),{paths:{vs:T.urls.monacoBase}}):T}function Rr(){console.warn(VR.deprecation)}function Ar(T,E){throw new Error(T[E]||T.default)}var VR={configIsRequired:"the configuration object is required",configType:"the configuration object should be an object",default:"an unknown error accured in `@monaco-editor/loader` package",deprecation:`Deprecation warning!
    You are using deprecated way of configuration.

    Instead of using
      monaco.config({ urls: { monacoBase: '...' } })
    use
      monaco.config({ paths: { vs: '...' } })

    For more please check the link https://github.com/suren-atoyan/monaco-loader#config
  `},je=Er(Ar)(VR),Sr={config:er},tr=function(){for(var E=arguments.length,e=new Array(E),R=0;R<E;R++)e[R]=arguments[R];return function(A){return e.reduceRight(function(S,t){return t(S)},A)}};function yR(T,E){return Object.keys(E).forEach(function(e){E[e]instanceof Object&&T[e]&&Object.assign(E[e],yR(T[e],E[e]))}),ke(ke({},T),E)}var Ir={type:"cancelation",msg:"operation is manually canceled"};function _e(T){var E=!1,e=new Promise(function(R,A){T.then(function(S){return E?A(Ir):R(S)}),T.catch(A)});return e.cancel=function(){return E=!0},e}var Or=jN.create({config:zN,isInitialized:!1,resolve:null,reject:null,monaco:null}),WR=BN(Or,2),yT=WR[0],Re=WR[1];function Nr(T){var E=Sr.config(T),e=E.monaco,R=mN(E,["monaco"]);Re(function(A){return{config:yR(A.config,R),monaco:e}})}function rr(){var T=yT(function(E){var e=E.monaco,R=E.isInitialized,A=E.resolve;return{monaco:e,isInitialized:R,resolve:A}});if(!T.isInitialized){if(Re({isInitialized:!0}),T.monaco)return T.resolve(T.monaco),_e(ae);if(window.monaco&&window.monaco.editor)return vR(window.monaco),T.resolve(window.monaco),_e(ae);tr(sr,_r)(ar)}return _e(ae)}function sr(T){return document.body.appendChild(T)}function nr(T){var E=document.createElement("script");return T&&(E.src=T),E}function _r(T){var E=yT(function(R){var A=R.config,S=R.reject;return{config:A,reject:S}}),e=nr("".concat(E.config.paths.vs,"/loader.js"));return e.onload=function(){return T()},e.onerror=E.reject,e}function ar(){var T=yT(function(e){var R=e.config,A=e.resolve,S=e.reject;return{config:R,resolve:A,reject:S}}),E=window.require;E.config(T.config),E(["vs/editor/editor.main"],function(e){vR(e),T.resolve(e)},function(e){T.reject(e)})}function vR(T){yT().monaco||Re({monaco:T})}function Cr(){return yT(function(T){var E=T.monaco;return E})}var ae=new Promise(function(T,E){return Re({resolve:T,reject:E})}),Lr={config:Nr,init:rr,__getMonacoInstance:Cr},ir=Q('<div class="custom-editor svelte-qhwgh8"></div>');function or(T,E){bE(E,!0);let e=JE(E,"value",15),R=JE(E,"onChange",3,()=>{}),A=Z(void 0),S=Z(void 0),t=Z(void 0);function O(){return a(t)==null?(console.warn("sql editor not ready, can't get value"),""):a(t).getValue({lineEnding:`
`,preserveBOM:!1})}function r(n){if(a(t)==null){console.warn("sql editor not ready, can't set value",{value:n});return}a(t).setValue(n)}async function I(){return a(A)==null?"editor element not found":(x(S,q(await Lr.init())),a(S)==null?"failed to initialize SQL editor":(x(t,q(a(S).editor.create(a(A),{value:e(),language:E.lang,theme:"vs-dark",readOnly:E.readonly,wordWrap:"on",minimap:{enabled:E.minimapEnabled}}))),a(t).onDidChangeModelContent(()=>{e(O()),R()(e())}),""))}FT(()=>{jT.subscribe(n=>{a(S)!=null&&a(S).editor.setTheme(n=="Dark"?"vs-dark":"vs")})});var N=ir();return AT(N,n=>x(A,n),()=>a(A)),w(T,N),KE({setValue:r,init:I})}var Pr=Q('<p class="editor-error mt-2 svelte-1uei17n"> </p>'),Dr=Q("<p>Waiting for database to load...</p> <!>",1),Mr=()=>{},lr=(T,E)=>x(E,!a(E)),Ur=Q("<p>Waiting for editor to load...</p>"),cr=(T,E)=>E(),ur=(T,E)=>E(),dr=(T,E)=>E(),Gr=(T,E)=>E(),fr=Q('<div class="buttons"><button class="button is-info">Execute</button> <button class="button is-info">Format</button> <button class="button is-info">Show Tables</button> <button class="button is-info">Clear Log</button></div>'),pr=Q('<p class="editor-error mt-2 svelte-1uei17n"> </p>'),hr=()=>{},Hr=(T,E)=>x(E,!a(E)),mr=Q("<p> </p> <!>",1),Br=Q('<span class="label svelte-1uei17n" role="button" tabindex="0"> </span> <!>',1),Yr=Q('<span class="label svelte-1uei17n" role="button" tabindex="0"> </span> <div><!> <!> <!></div> <!> <!>',1),Fr=Q('<div class="editor svelte-1uei17n"><!> <!></div>');function Vr(T,E){bE(E,!0);const e="SELECT * FROM sqlite_master WHERE type='table';";let R=Z(void 0),A=Z(void 0),S=Z(void 0),t=Z(void 0),O=Z(q([])),r=Z(""),I=Z(""),N=Z(!1),n=Z(!0),L=Z(!0),i=Z(void 0),o=Z("SELECT * FROM todo ORDER BY userId, completed DESC, title;");async function d(){h(`CREATE TABLE todo (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            userId INTEGER,
            title VARCHAR (255),
            completed INTEGER (1)
        )`);const g=RT.object({userId:RT.number(),id:RT.number(),title:RT.string(),completed:RT.boolean()}).array(),V=await fetch("https://jsonplaceholder.typicode.com/todos"),j=await V.text();if(!V.ok){const AE=`ERROR: failed to seed database, status ${V.status}`;u(AE,`${AE}:
${j}`);return}const rE=JSON.parse(j),sE=g.safeParse(rE);if(!sE.success){const AE=sE.error.errors[0],mE=`${AE.path.join(".")}: ${AE.message}; ${AE.code}`,sT="ERROR: failed to seed database, JSON error";u(sT,`${sT}:
${mE}`);return}const GE=sE.data;let HE="";for(let AE=0;AE<GE.length;AE++){const mE=GE[AE];HE+=`
                INSERT INTO todo (ID, userId, title, completed)
                VALUES (${mE.id}, ${mE.userId}, '${mE.title}', ${mE.completed?1:0});
            `}h(HE)}function B(){try{x(o,q(RO(a(o),{language:"sqlite",newlineBeforeSemicolon:!0,tabWidth:4,linesBetweenQueries:1,keywordCase:"upper"})))}catch(Y){const g="ERROR: SQL format";u(g,`${g}:
${Y}`)}a(i)!=null&&a(i).setValue(a(o))}function h(Y){if(Y==null||Y==""||a(t)==null)return;x(I,""),x(O,q([]));try{console.log(Y),u(`Query: ${Y.substring(0,40)}`,Y),x(O,q(a(t).exec(Y))),a(O).length>0&&x(L,!0)}catch(V){console.error(V),x(I,`${V}`);const j="ERROR: execute query";u(j,`${j}:
${V}`);return}let g=`Results: ${a(O).length}`;for(let V=0;V<a(O).length;V++){const j=a(O)[V];g+=`
  #${V+1}. cols ${j.columns.length} x rows ${j.values.length}`}u("Query result",JSON.stringify(a(O),null,2))}function u(Y,g){var j;if(g=="")return;const V=new Date().toLocaleTimeString();(j=a(S))==null||j.addLog({timestamp:Date.now()+Math.random(),title:`${V}: ${Y}`,text:g,isOpen:!1})}function U(){var Y,g;(Y=a(i))==null||Y.setValue(e+`
`),B(),h(e),(g=a(A))==null||g.scrollIntoView({behavior:"smooth"})}function K(){var Y;(Y=a(S))==null||Y.clear()}async function p(){var Y;h(a(o)),await he(),(Y=a(A))==null||Y.scrollIntoView({behavior:"smooth"})}FT(async()=>{if(u("Waiting for database...","Waiting for database..."),!await BA(()=>window.db!=null,100,3*1e3)){const V="ERROR: failed to initialize database";x(r,`${V}. Try reloading the page.`),u(V,a(r));return}if(x(t,q(window.db)),u("Database found!","Database found!"),await he(),await d(),a(i)==null){console.error("sql editor not ready");return}const g=await a(i).init();if(g.length>0){const V=`ERROR: ${g}`;x(I,`${V}. Try reloading the page.`),u(V,a(I)),console.log("show log",V);return}x(N,!0),B()});var y=Fr(),dE=b(y);{var CE=Y=>{var g=Dr(),V=$(YE(g),2);{var j=rE=>{var sE=Pr(),GE=b(sE,!0);W(sE),NE(()=>nE(GE,a(r))),w(rE,sE)};iE(V,rE=>{a(r).length>0&&rE(j)})}w(Y,g)},tE=Y=>{var g=Yr(),V=YE(g);V.__keydown=[Mr],V.__click=[lr,n];var j=b(V);W(V),AT(V,k=>x(R,k),()=>a(R));var rE=$(V,2),sE=b(rE);{var GE=k=>{var aE=Ur();w(k,aE)};iE(sE,k=>{a(N)||k(GE)})}var HE=$(sE,2);AT(or(HE,{minimapEnabled:!1,lang:"sql",readonly:!1,get value(){return a(o)},set value(k){x(o,q(k))}}),k=>x(i,q(k)),()=>a(i));var AE=$(HE,2);{var mE=k=>{var aE=fr(),LE=b(aE);LE.__click=[cr,p];var WT=$(LE,2);WT.__click=[ur,B];var vT=$(WT,2);vT.__click=[dr,U];var Ae=$(vT,2);Ae.__click=[Gr,K],W(aE),w(k,aE)};iE(AE,k=>{a(N)&&k(mE)})}W(rE);var sT=$(rE,2);{var gR=k=>{var aE=pr(),LE=b(aE,!0);W(aE),NE(()=>nE(LE,a(I))),w(k,aE)};iE(sT,k=>{a(I).length>0&&k(gR)})}var XR=$(sT,2);{var bR=k=>{var aE=Br(),LE=YE(aE);LE.__keydown=[hr],LE.__click=[Hr,L];var WT=b(LE);W(LE),AT(LE,nT=>x(A,nT),()=>a(A));var vT=$(LE,2);{var Ae=nT=>{var ce=De(),KR=YE(ce);DT(KR,17,()=>a(O),bT,(xR,_T,wR)=>{var ue=mr(),Se=YE(ue),$R=b(Se,!0);W(Se);var JR=$(Se,2);rO(JR,{get result(){return a(_T)}}),NE(()=>nE($R,`#${wR+1}: ${a(_T).columns.length} col${a(_T).columns.length===1?"":"s"} x ${a(_T).values.length} row${a(_T).values.length===1?"":"s"}`)),w(xR,ue)}),w(nT,ce)};iE(vT,nT=>{a(L)&&nT(Ae)})}NE(()=>nE(WT,`${(a(L)?"-":"+")??""}
                Results`)),w(k,aE)};iE(XR,k=>{a(O).length>0&&k(bR)})}NE(()=>{nE(j,`${(a(n)?"-":"+")??""}
            Editor`),GA(rE,cA(a(n)?"is-block":"is-hidden"),"svelte-1uei17n")}),w(Y,g)};iE(dE,Y=>{a(t)==null?Y(CE):Y(tE,!1)})}var zE=$(dE,2);AT(pN(zE,{onSetEditor:Y=>{var g,V;(g=a(R))==null||g.scrollIntoView({behavior:"smooth"}),(V=a(i))==null||V.setValue(Y),B()}}),Y=>x(S,q(Y)),()=>a(S)),W(y),NE(()=>$E(y,"style",E.style)),w(T,y),KE()}Ee(["keydown","click"]);const FE=RT.enum(["Light","Dark"]);var yr=(T,E)=>E(),Wr=Q('<div class="toggle svelte-4vc3hf"><button class="button is-info"> </button></div>');function vr(T,E){bE(E,!0);let e=Z(q(FE.Enum.Dark)),R=TT(()=>a(e)==FE.Enum.Dark);function A(){jT.set(a(R)?FE.Enum.Light:FE.Enum.Dark)}FT(()=>{jT.subscribe(r=>x(e,q(r)))});var S=Wr(),t=b(S);t.__click=[yr,A];var O=b(t);W(t),W(S),NE(()=>nE(O,`${(a(R)?"Light":"Dark")??""} mode`)),w(T,S),KE()}Ee(["click"]);var gr=Q('<p class="text-muted text-center">Version <a target="_blank"><b> </b></a>.<a target="_blank"><b> </b></a>, deployed by <a target="_blank"><b> </b></a></p>'),Xr=Q('<main class="svelte-rct2sd"><h1 class="title svelte-rct2sd"></h1> <!> <!> <div class="footer svelte-rct2sd"><div class="container"><!></div></div></main>');function br(T,E){bE(E,!0);const e="SQL Playground";let R=Z(null),A=Z(q(FE.enum.Dark)),S=TT(()=>{var U;return((U=a(R))==null?void 0:U.sha.substring(0,7))??""}),t=TT(()=>{var U;return`https://github.com/FS-Frost/sql-playground/commit/${((U=a(R))==null?void 0:U.sha)??""}`}),O=TT(()=>{var U;return`https://github.com/FS-Frost/sql-playground/tree/${((U=a(R))==null?void 0:U.ref)??""}`}),r=TT(()=>{var U;return`https://github.com/${((U=a(R))==null?void 0:U.actor)??""}`}),I=TT(()=>Object.entries({"background-color":a(A)==FE.Enum.Dark?"#1e1e1e":"white",color:a(A)==FE.Enum.Dark?"white":"black","label-hover-background-color":FE.Enum.Dark?"gray":""}).map(([U,K])=>`--${U}:${K}`).join(";"));async function N(){const U="build-info.json",K=await fetch(U);if(!K.ok){console.info(`Could not fectch ${U}`);return}const p=await K.json();p==null&&console.error("Invalid build info"),x(R,q(p))}FT(()=>{N(),jT.subscribe(U=>x(A,q(U)))});var n=Xr();oA(U=>{CA.title=e});var L=b(n);L.textContent=e;var i=$(L,2);vr(i,{});var o=$(i,2);Vr(o,{get style(){return a(I)}});var d=$(o,2),B=b(d),h=b(B);{var u=U=>{var K=gr(),p=$(b(K)),y=b(p),dE=b(y,!0);W(y),W(p);var CE=$(p,2),tE=b(CE),zE=b(tE,!0);W(tE),W(CE);var Y=$(CE,2),g=b(Y),V=b(g,!0);W(g),W(Y),W(K),NE(()=>{$E(p,"href",a(O)),nE(dE,a(R).ref),$E(CE,"href",a(t)),$E(tE,"title",a(R).sha),nE(zE,a(S)),$E(Y,"href",a(r)),nE(V,a(R).actor)}),w(U,K)};iE(h,U=>{a(R)!=null&&U(u)})}W(B),W(d),W(n),NE(()=>$E(n,"style",a(I))),w(T,n),KE()}function Kr(T,E){bE(E,!1);let e=LA();FT(()=>{Be.subscribe(I=>{I!=null&&x(e,I)});const O=new URLSearchParams(location.search).get("page")??"",r=mA(O)?O:"home";Be.set(r)}),iA();var R=De(),A=YE(R);{var S=t=>{br(t,{})};iE(A,t=>{a(e)=="home"&&t(S)})}w(T,R),KE()}var xr=Q('<section class="svelte-u22agc"><!></section>');function Ts(T){var E=xr(),e=b(E);Kr(e,{}),W(E),w(T,E)}export{Ts as component,Es as universal};
